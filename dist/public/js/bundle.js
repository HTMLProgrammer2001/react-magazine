(function (modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function (exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
    };
    __webpack_require__.r = function (exports) {
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
        }
        Object.defineProperty(exports, '__esModule', { value: true });
    };
    __webpack_require__.t = function (value, mode) {
        if (mode & 1)
            value = __webpack_require__(value);
        if (mode & 8)
            return value;
        if ((mode & 4) && typeof value === 'object' && value && value.__esModule)
            return value;
        var ns = Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, 'default', { enumerable: true, value: value });
        if (mode & 2 && typeof value != 'string')
            for (var key in value)
                __webpack_require__.d(ns, key, function (key) { return value[key]; }.bind(null, key));
        return ns;
    };
    __webpack_require__.n = function (module) {
        var getter = module && module.__esModule ?
            function getDefault() { return module['default']; } :
            function getModuleExports() { return module; };
        __webpack_require__.d(getter, 'a', getter);
        return getter;
    };
    __webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    __webpack_require__.p = "";
    return __webpack_require__(__webpack_require__.s = "./resources/app/js/main.tsx");
})({
    "./node_modules/@babel/runtime/helpers/createClass.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        module.exports = _createClass;
    }),
    "./node_modules/@babel/runtime/helpers/esm/extends.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = _extends;
        function _extends() {
            exports.default = _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };
            return _extends.apply(this, arguments);
        }
    }),
    "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = _inheritsLoose;
        function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
        }
    }),
    "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = _objectWithoutPropertiesLoose;
        function _objectWithoutPropertiesLoose(source, excluded) {
            if (source == null)
                return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;
            for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0)
                    continue;
                target[key] = source[key];
            }
            return target;
        }
    }),
    "./node_modules/@babel/runtime/helpers/extends.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function _extends() {
            module.exports = _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };
            return _extends.apply(this, arguments);
        }
        module.exports = _extends;
    }),
    "./node_modules/@babel/runtime/helpers/inheritsLoose.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
        }
        module.exports = _inheritsLoose;
    }),
    "./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function _objectWithoutPropertiesLoose(source, excluded) {
            if (source == null)
                return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;
            for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0)
                    continue;
                target[key] = source[key];
            }
            return target;
        }
        module.exports = _objectWithoutPropertiesLoose;
    }),
    "./node_modules/classnames/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        (function () {
            'use strict';
            var hasOwn = {}.hasOwnProperty;
            function classNames() {
                var classes = [];
                for (var i = 0; i < arguments.length; i++) {
                    var arg = arguments[i];
                    if (!arg)
                        continue;
                    var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
                    if (argType === 'string' || argType === 'number') {
                        classes.push(arg);
                    }
                    else if (Array.isArray(arg) && arg.length) {
                        var inner = classNames.apply(null, arg);
                        if (inner) {
                            classes.push(inner);
                        }
                    }
                    else if (argType === 'object') {
                        for (var key in arg) {
                            if (hasOwn.call(arg, key) && arg[key]) {
                                classes.push(key);
                            }
                        }
                    }
                }
                return classes.join(' ');
            }
            if (true && module.exports) {
                classNames.default = classNames;
                module.exports = classNames;
            }
            else if (true && _typeof(__webpack_require__("./node_modules/webpack/buildin/amd-options.js")) === 'object' && __webpack_require__("./node_modules/webpack/buildin/amd-options.js")) {
                !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                    return classNames;
                }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            }
            else {
                window.classNames = classNames;
            }
        })();
    }),
    "./node_modules/es6-error/es6/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        function _extendableBuiltin(cls) {
            function ExtendableBuiltin() {
                cls.apply(this, arguments);
            }
            ExtendableBuiltin.prototype = Object.create(cls.prototype, {
                constructor: {
                    value: cls,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(ExtendableBuiltin, cls);
            }
            else {
                ExtendableBuiltin.__proto__ = cls;
            }
            return ExtendableBuiltin;
        }
        var ExtendableError = function (_extendableBuiltin2) {
            _inherits(ExtendableError, _extendableBuiltin2);
            function ExtendableError() {
                var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                _classCallCheck(this, ExtendableError);
                var _this = _possibleConstructorReturn(this, (ExtendableError.__proto__ || Object.getPrototypeOf(ExtendableError)).call(this, message));
                Object.defineProperty(_this, 'message', {
                    configurable: true,
                    enumerable: false,
                    value: message,
                    writable: true
                });
                Object.defineProperty(_this, 'name', {
                    configurable: true,
                    enumerable: false,
                    value: _this.constructor.name,
                    writable: true
                });
                if (Error.hasOwnProperty('captureStackTrace')) {
                    Error.captureStackTrace(_this, _this.constructor);
                    return _possibleConstructorReturn(_this);
                }
                Object.defineProperty(_this, 'stack', {
                    configurable: true,
                    enumerable: false,
                    value: new Error(message).stack,
                    writable: true
                });
                return _this;
            }
            return ExtendableError;
        }(_extendableBuiltin(Error));
        exports.default = ExtendableError;
    }),
    "./node_modules/history/esm/history.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _resolvePathname = __webpack_require__("./node_modules/resolve-pathname/esm/resolve-pathname.js");
        var _resolvePathname2 = _interopRequireDefault(_resolvePathname);
        var _valueEqual = __webpack_require__("./node_modules/value-equal/esm/value-equal.js");
        var _valueEqual2 = _interopRequireDefault(_valueEqual);
        var _tinyWarning = __webpack_require__("./node_modules/tiny-warning/dist/tiny-warning.esm.js");
        var _tinyWarning2 = _interopRequireDefault(_tinyWarning);
        var _tinyInvariant = __webpack_require__("./node_modules/tiny-invariant/dist/tiny-invariant.esm.js");
        var _tinyInvariant2 = _interopRequireDefault(_tinyInvariant);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function addLeadingSlash(path) {
            return path.charAt(0) === '/' ? path : '/' + path;
        }
        function stripLeadingSlash(path) {
            return path.charAt(0) === '/' ? path.substr(1) : path;
        }
        function hasBasename(path, prefix) {
            return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
        }
        function stripBasename(path, prefix) {
            return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
        }
        function stripTrailingSlash(path) {
            return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
        }
        function parsePath(path) {
            var pathname = path || '/';
            var search = '';
            var hash = '';
            var hashIndex = pathname.indexOf('#');
            if (hashIndex !== -1) {
                hash = pathname.substr(hashIndex);
                pathname = pathname.substr(0, hashIndex);
            }
            var searchIndex = pathname.indexOf('?');
            if (searchIndex !== -1) {
                search = pathname.substr(searchIndex);
                pathname = pathname.substr(0, searchIndex);
            }
            return {
                pathname: pathname,
                search: search === '?' ? '' : search,
                hash: hash === '#' ? '' : hash
            };
        }
        function createPath(location) {
            var pathname = location.pathname, search = location.search, hash = location.hash;
            var path = pathname || '/';
            if (search && search !== '?')
                path += search.charAt(0) === '?' ? search : "?" + search;
            if (hash && hash !== '#')
                path += hash.charAt(0) === '#' ? hash : "#" + hash;
            return path;
        }
        function createLocation(path, state, key, currentLocation) {
            var location;
            if (typeof path === 'string') {
                location = parsePath(path);
                location.state = state;
            }
            else {
                location = (0, _extends3.default)({}, path);
                if (location.pathname === undefined)
                    location.pathname = '';
                if (location.search) {
                    if (location.search.charAt(0) !== '?')
                        location.search = '?' + location.search;
                }
                else {
                    location.search = '';
                }
                if (location.hash) {
                    if (location.hash.charAt(0) !== '#')
                        location.hash = '#' + location.hash;
                }
                else {
                    location.hash = '';
                }
                if (state !== undefined && location.state === undefined)
                    location.state = state;
            }
            try {
                location.pathname = decodeURI(location.pathname);
            }
            catch (e) {
                if (e instanceof URIError) {
                    throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
                }
                else {
                    throw e;
                }
            }
            if (key)
                location.key = key;
            if (currentLocation) {
                if (!location.pathname) {
                    location.pathname = currentLocation.pathname;
                }
                else if (location.pathname.charAt(0) !== '/') {
                    location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
                }
            }
            else {
                if (!location.pathname) {
                    location.pathname = '/';
                }
            }
            return location;
        }
        function locationsAreEqual(a, b) {
            return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
        }
        function createTransitionManager() {
            var prompt = null;
            function setPrompt(nextPrompt) {
                true ? (0, _tinyWarning2.default)(prompt == null, 'A history supports only one prompt at a time') : undefined;
                prompt = nextPrompt;
                return function () {
                    if (prompt === nextPrompt)
                        prompt = null;
                };
            }
            function confirmTransitionTo(location, action, getUserConfirmation, callback) {
                if (prompt != null) {
                    var result = typeof prompt === 'function' ? prompt(location, action) : prompt;
                    if (typeof result === 'string') {
                        if (typeof getUserConfirmation === 'function') {
                            getUserConfirmation(result, callback);
                        }
                        else {
                            true ? (0, _tinyWarning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : undefined;
                            callback(true);
                        }
                    }
                    else {
                        callback(result !== false);
                    }
                }
                else {
                    callback(true);
                }
            }
            var listeners = [];
            function appendListener(fn) {
                var isActive = true;
                function listener() {
                    if (isActive)
                        fn.apply(void 0, arguments);
                }
                listeners.push(listener);
                return function () {
                    isActive = false;
                    listeners = listeners.filter(function (item) {
                        return item !== listener;
                    });
                };
            }
            function notifyListeners() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                listeners.forEach(function (listener) {
                    return listener.apply(void 0, args);
                });
            }
            return {
                setPrompt: setPrompt,
                confirmTransitionTo: confirmTransitionTo,
                appendListener: appendListener,
                notifyListeners: notifyListeners
            };
        }
        var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
        function getConfirmation(message, callback) {
            callback(window.confirm(message));
        }
        function supportsHistory() {
            var ua = window.navigator.userAgent;
            if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1)
                return false;
            return window.history && 'pushState' in window.history;
        }
        function supportsPopStateOnHashChange() {
            return window.navigator.userAgent.indexOf('Trident') === -1;
        }
        function supportsGoWithoutReloadUsingHash() {
            return window.navigator.userAgent.indexOf('Firefox') === -1;
        }
        function isExtraneousPopstateEvent(event) {
            return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
        }
        var PopStateEvent = 'popstate';
        var HashChangeEvent = 'hashchange';
        function getHistoryState() {
            try {
                return window.history.state || {};
            }
            catch (e) {
                return {};
            }
        }
        function createBrowserHistory(props) {
            if (props === void 0) {
                props = {};
            }
            !canUseDOM ? true ? (0, _tinyInvariant2.default)(false, 'Browser history needs a DOM') : undefined : void 0;
            var globalHistory = window.history;
            var canUseHistory = supportsHistory();
            var needsHashChangeListener = !supportsPopStateOnHashChange();
            var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
            var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
            function getDOMLocation(historyState) {
                var _ref = historyState || {}, key = _ref.key, state = _ref.state;
                var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
                var path = pathname + search + hash;
                true ? (0, _tinyWarning2.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : undefined;
                if (basename)
                    path = stripBasename(path, basename);
                return createLocation(path, state, key);
            }
            function createKey() {
                return Math.random().toString(36).substr(2, keyLength);
            }
            var transitionManager = createTransitionManager();
            function setState(nextState) {
                (0, _extends3.default)(history, nextState);
                history.length = globalHistory.length;
                transitionManager.notifyListeners(history.location, history.action);
            }
            function handlePopState(event) {
                if (isExtraneousPopstateEvent(event))
                    return;
                handlePop(getDOMLocation(event.state));
            }
            function handleHashChange() {
                handlePop(getDOMLocation(getHistoryState()));
            }
            var forceNextPop = false;
            function handlePop(location) {
                if (forceNextPop) {
                    forceNextPop = false;
                    setState();
                }
                else {
                    var action = 'POP';
                    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                        if (ok) {
                            setState({
                                action: action,
                                location: location
                            });
                        }
                        else {
                            revertPop(location);
                        }
                    });
                }
            }
            function revertPop(fromLocation) {
                var toLocation = history.location;
                var toIndex = allKeys.indexOf(toLocation.key);
                if (toIndex === -1)
                    toIndex = 0;
                var fromIndex = allKeys.indexOf(fromLocation.key);
                if (fromIndex === -1)
                    fromIndex = 0;
                var delta = toIndex - fromIndex;
                if (delta) {
                    forceNextPop = true;
                    go(delta);
                }
            }
            var initialLocation = getDOMLocation(getHistoryState());
            var allKeys = [initialLocation.key];
            function createHref(location) {
                return basename + createPath(location);
            }
            function push(path, state) {
                true ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
                var action = 'PUSH';
                var location = createLocation(path, state, createKey(), history.location);
                transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                    if (!ok)
                        return;
                    var href = createHref(location);
                    var key = location.key, state = location.state;
                    if (canUseHistory) {
                        globalHistory.pushState({
                            key: key,
                            state: state
                        }, null, href);
                        if (forceRefresh) {
                            window.location.href = href;
                        }
                        else {
                            var prevIndex = allKeys.indexOf(history.location.key);
                            var nextKeys = allKeys.slice(0, prevIndex + 1);
                            nextKeys.push(location.key);
                            allKeys = nextKeys;
                            setState({
                                action: action,
                                location: location
                            });
                        }
                    }
                    else {
                        true ? (0, _tinyWarning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : undefined;
                        window.location.href = href;
                    }
                });
            }
            function replace(path, state) {
                true ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
                var action = 'REPLACE';
                var location = createLocation(path, state, createKey(), history.location);
                transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                    if (!ok)
                        return;
                    var href = createHref(location);
                    var key = location.key, state = location.state;
                    if (canUseHistory) {
                        globalHistory.replaceState({
                            key: key,
                            state: state
                        }, null, href);
                        if (forceRefresh) {
                            window.location.replace(href);
                        }
                        else {
                            var prevIndex = allKeys.indexOf(history.location.key);
                            if (prevIndex !== -1)
                                allKeys[prevIndex] = location.key;
                            setState({
                                action: action,
                                location: location
                            });
                        }
                    }
                    else {
                        true ? (0, _tinyWarning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : undefined;
                        window.location.replace(href);
                    }
                });
            }
            function go(n) {
                globalHistory.go(n);
            }
            function goBack() {
                go(-1);
            }
            function goForward() {
                go(1);
            }
            var listenerCount = 0;
            function checkDOMListeners(delta) {
                listenerCount += delta;
                if (listenerCount === 1 && delta === 1) {
                    window.addEventListener(PopStateEvent, handlePopState);
                    if (needsHashChangeListener)
                        window.addEventListener(HashChangeEvent, handleHashChange);
                }
                else if (listenerCount === 0) {
                    window.removeEventListener(PopStateEvent, handlePopState);
                    if (needsHashChangeListener)
                        window.removeEventListener(HashChangeEvent, handleHashChange);
                }
            }
            var isBlocked = false;
            function block(prompt) {
                if (prompt === void 0) {
                    prompt = false;
                }
                var unblock = transitionManager.setPrompt(prompt);
                if (!isBlocked) {
                    checkDOMListeners(1);
                    isBlocked = true;
                }
                return function () {
                    if (isBlocked) {
                        isBlocked = false;
                        checkDOMListeners(-1);
                    }
                    return unblock();
                };
            }
            function listen(listener) {
                var unlisten = transitionManager.appendListener(listener);
                checkDOMListeners(1);
                return function () {
                    checkDOMListeners(-1);
                    unlisten();
                };
            }
            var history = {
                length: globalHistory.length,
                action: 'POP',
                location: initialLocation,
                createHref: createHref,
                push: push,
                replace: replace,
                go: go,
                goBack: goBack,
                goForward: goForward,
                block: block,
                listen: listen
            };
            return history;
        }
        var HashChangeEvent$1 = 'hashchange';
        var HashPathCoders = {
            hashbang: {
                encodePath: function encodePath(path) {
                    return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
                },
                decodePath: function decodePath(path) {
                    return path.charAt(0) === '!' ? path.substr(1) : path;
                }
            },
            noslash: {
                encodePath: stripLeadingSlash,
                decodePath: addLeadingSlash
            },
            slash: {
                encodePath: addLeadingSlash,
                decodePath: addLeadingSlash
            }
        };
        function stripHash(url) {
            var hashIndex = url.indexOf('#');
            return hashIndex === -1 ? url : url.slice(0, hashIndex);
        }
        function getHashPath() {
            var href = window.location.href;
            var hashIndex = href.indexOf('#');
            return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
        }
        function pushHashPath(path) {
            window.location.hash = path;
        }
        function replaceHashPath(path) {
            window.location.replace(stripHash(window.location.href) + '#' + path);
        }
        function createHashHistory(props) {
            if (props === void 0) {
                props = {};
            }
            !canUseDOM ? true ? (0, _tinyInvariant2.default)(false, 'Hash history needs a DOM') : undefined : void 0;
            var globalHistory = window.history;
            var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
            var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
            var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
            var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath = _HashPathCoders$hashT.encodePath, decodePath = _HashPathCoders$hashT.decodePath;
            function getDOMLocation() {
                var path = decodePath(getHashPath());
                true ? (0, _tinyWarning2.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : undefined;
                if (basename)
                    path = stripBasename(path, basename);
                return createLocation(path);
            }
            var transitionManager = createTransitionManager();
            function setState(nextState) {
                (0, _extends3.default)(history, nextState);
                history.length = globalHistory.length;
                transitionManager.notifyListeners(history.location, history.action);
            }
            var forceNextPop = false;
            var ignorePath = null;
            function locationsAreEqual$$1(a, b) {
                return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
            }
            function handleHashChange() {
                var path = getHashPath();
                var encodedPath = encodePath(path);
                if (path !== encodedPath) {
                    replaceHashPath(encodedPath);
                }
                else {
                    var location = getDOMLocation();
                    var prevLocation = history.location;
                    if (!forceNextPop && locationsAreEqual$$1(prevLocation, location))
                        return;
                    if (ignorePath === createPath(location))
                        return;
                    ignorePath = null;
                    handlePop(location);
                }
            }
            function handlePop(location) {
                if (forceNextPop) {
                    forceNextPop = false;
                    setState();
                }
                else {
                    var action = 'POP';
                    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                        if (ok) {
                            setState({
                                action: action,
                                location: location
                            });
                        }
                        else {
                            revertPop(location);
                        }
                    });
                }
            }
            function revertPop(fromLocation) {
                var toLocation = history.location;
                var toIndex = allPaths.lastIndexOf(createPath(toLocation));
                if (toIndex === -1)
                    toIndex = 0;
                var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
                if (fromIndex === -1)
                    fromIndex = 0;
                var delta = toIndex - fromIndex;
                if (delta) {
                    forceNextPop = true;
                    go(delta);
                }
            }
            var path = getHashPath();
            var encodedPath = encodePath(path);
            if (path !== encodedPath)
                replaceHashPath(encodedPath);
            var initialLocation = getDOMLocation();
            var allPaths = [createPath(initialLocation)];
            function createHref(location) {
                var baseTag = document.querySelector('base');
                var href = '';
                if (baseTag && baseTag.getAttribute('href')) {
                    href = stripHash(window.location.href);
                }
                return href + '#' + encodePath(basename + createPath(location));
            }
            function push(path, state) {
                true ? (0, _tinyWarning2.default)(state === undefined, 'Hash history cannot push state; it is ignored') : undefined;
                var action = 'PUSH';
                var location = createLocation(path, undefined, undefined, history.location);
                transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                    if (!ok)
                        return;
                    var path = createPath(location);
                    var encodedPath = encodePath(basename + path);
                    var hashChanged = getHashPath() !== encodedPath;
                    if (hashChanged) {
                        ignorePath = path;
                        pushHashPath(encodedPath);
                        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
                        var nextPaths = allPaths.slice(0, prevIndex + 1);
                        nextPaths.push(path);
                        allPaths = nextPaths;
                        setState({
                            action: action,
                            location: location
                        });
                    }
                    else {
                        true ? (0, _tinyWarning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : undefined;
                        setState();
                    }
                });
            }
            function replace(path, state) {
                true ? (0, _tinyWarning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored') : undefined;
                var action = 'REPLACE';
                var location = createLocation(path, undefined, undefined, history.location);
                transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                    if (!ok)
                        return;
                    var path = createPath(location);
                    var encodedPath = encodePath(basename + path);
                    var hashChanged = getHashPath() !== encodedPath;
                    if (hashChanged) {
                        ignorePath = path;
                        replaceHashPath(encodedPath);
                    }
                    var prevIndex = allPaths.indexOf(createPath(history.location));
                    if (prevIndex !== -1)
                        allPaths[prevIndex] = path;
                    setState({
                        action: action,
                        location: location
                    });
                });
            }
            function go(n) {
                true ? (0, _tinyWarning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;
                globalHistory.go(n);
            }
            function goBack() {
                go(-1);
            }
            function goForward() {
                go(1);
            }
            var listenerCount = 0;
            function checkDOMListeners(delta) {
                listenerCount += delta;
                if (listenerCount === 1 && delta === 1) {
                    window.addEventListener(HashChangeEvent$1, handleHashChange);
                }
                else if (listenerCount === 0) {
                    window.removeEventListener(HashChangeEvent$1, handleHashChange);
                }
            }
            var isBlocked = false;
            function block(prompt) {
                if (prompt === void 0) {
                    prompt = false;
                }
                var unblock = transitionManager.setPrompt(prompt);
                if (!isBlocked) {
                    checkDOMListeners(1);
                    isBlocked = true;
                }
                return function () {
                    if (isBlocked) {
                        isBlocked = false;
                        checkDOMListeners(-1);
                    }
                    return unblock();
                };
            }
            function listen(listener) {
                var unlisten = transitionManager.appendListener(listener);
                checkDOMListeners(1);
                return function () {
                    checkDOMListeners(-1);
                    unlisten();
                };
            }
            var history = {
                length: globalHistory.length,
                action: 'POP',
                location: initialLocation,
                createHref: createHref,
                push: push,
                replace: replace,
                go: go,
                goBack: goBack,
                goForward: goForward,
                block: block,
                listen: listen
            };
            return history;
        }
        function clamp(n, lowerBound, upperBound) {
            return Math.min(Math.max(n, lowerBound), upperBound);
        }
        function createMemoryHistory(props) {
            if (props === void 0) {
                props = {};
            }
            var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
            var transitionManager = createTransitionManager();
            function setState(nextState) {
                (0, _extends3.default)(history, nextState);
                history.length = history.entries.length;
                transitionManager.notifyListeners(history.location, history.action);
            }
            function createKey() {
                return Math.random().toString(36).substr(2, keyLength);
            }
            var index = clamp(initialIndex, 0, initialEntries.length - 1);
            var entries = initialEntries.map(function (entry) {
                return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
            });
            var createHref = createPath;
            function push(path, state) {
                true ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
                var action = 'PUSH';
                var location = createLocation(path, state, createKey(), history.location);
                transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                    if (!ok)
                        return;
                    var prevIndex = history.index;
                    var nextIndex = prevIndex + 1;
                    var nextEntries = history.entries.slice(0);
                    if (nextEntries.length > nextIndex) {
                        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
                    }
                    else {
                        nextEntries.push(location);
                    }
                    setState({
                        action: action,
                        location: location,
                        index: nextIndex,
                        entries: nextEntries
                    });
                });
            }
            function replace(path, state) {
                true ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
                var action = 'REPLACE';
                var location = createLocation(path, state, createKey(), history.location);
                transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                    if (!ok)
                        return;
                    history.entries[history.index] = location;
                    setState({
                        action: action,
                        location: location
                    });
                });
            }
            function go(n) {
                var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
                var action = 'POP';
                var location = history.entries[nextIndex];
                transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                    if (ok) {
                        setState({
                            action: action,
                            location: location,
                            index: nextIndex
                        });
                    }
                    else {
                        setState();
                    }
                });
            }
            function goBack() {
                go(-1);
            }
            function goForward() {
                go(1);
            }
            function canGo(n) {
                var nextIndex = history.index + n;
                return nextIndex >= 0 && nextIndex < history.entries.length;
            }
            function block(prompt) {
                if (prompt === void 0) {
                    prompt = false;
                }
                return transitionManager.setPrompt(prompt);
            }
            function listen(listener) {
                return transitionManager.appendListener(listener);
            }
            var history = {
                length: entries.length,
                action: 'POP',
                location: entries[index],
                index: index,
                entries: entries,
                createHref: createHref,
                push: push,
                replace: replace,
                go: go,
                goBack: goBack,
                goForward: goForward,
                canGo: canGo,
                block: block,
                listen: listen
            };
            return history;
        }
        exports.createBrowserHistory = createBrowserHistory;
        exports.createHashHistory = createHashHistory;
        exports.createMemoryHistory = createMemoryHistory;
        exports.createLocation = createLocation;
        exports.locationsAreEqual = locationsAreEqual;
        exports.parsePath = parsePath;
        exports.createPath = createPath;
    }),
    "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var reactIs = __webpack_require__("./node_modules/react-is/index.js");
        var REACT_STATICS = {
            childContextTypes: true,
            contextType: true,
            contextTypes: true,
            defaultProps: true,
            displayName: true,
            getDefaultProps: true,
            getDerivedStateFromError: true,
            getDerivedStateFromProps: true,
            mixins: true,
            propTypes: true,
            type: true
        };
        var KNOWN_STATICS = {
            name: true,
            length: true,
            prototype: true,
            caller: true,
            callee: true,
            arguments: true,
            arity: true
        };
        var FORWARD_REF_STATICS = {
            '$$typeof': true,
            render: true,
            defaultProps: true,
            displayName: true,
            propTypes: true
        };
        var MEMO_STATICS = {
            '$$typeof': true,
            compare: true,
            defaultProps: true,
            displayName: true,
            propTypes: true,
            type: true
        };
        var TYPE_STATICS = {};
        TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
        TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
        function getStatics(component) {
            if (reactIs.isMemo(component)) {
                return MEMO_STATICS;
            }
            return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
        }
        var defineProperty = Object.defineProperty;
        var getOwnPropertyNames = Object.getOwnPropertyNames;
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var getPrototypeOf = Object.getPrototypeOf;
        var objectPrototype = Object.prototype;
        function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
            if (typeof sourceComponent !== 'string') {
                if (objectPrototype) {
                    var inheritedComponent = getPrototypeOf(sourceComponent);
                    if (inheritedComponent && inheritedComponent !== objectPrototype) {
                        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                    }
                }
                var keys = getOwnPropertyNames(sourceComponent);
                if (getOwnPropertySymbols) {
                    keys = keys.concat(getOwnPropertySymbols(sourceComponent));
                }
                var targetStatics = getStatics(targetComponent);
                var sourceStatics = getStatics(sourceComponent);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                        try {
                            defineProperty(targetComponent, key, descriptor);
                        }
                        catch (e) { }
                    }
                }
            }
            return targetComponent;
        }
        module.exports = hoistNonReactStatics;
    }),
    "./node_modules/invariant/browser.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var invariant = function invariant(condition, format, a, b, c, d, e, f) {
            if (true) {
                if (format === undefined) {
                    throw new Error('invariant requires an error message argument');
                }
            }
            if (!condition) {
                var error;
                if (format === undefined) {
                    error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
                }
                else {
                    var args = [a, b, c, d, e, f];
                    var argIndex = 0;
                    error = new Error(format.replace(/%s/g, function () {
                        return args[argIndex++];
                    }));
                    error.name = 'Invariant Violation';
                }
                error.framesToPop = 1;
                throw error;
            }
        };
        module.exports = invariant;
    }),
    "./node_modules/is-promise/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        module.exports = isPromise;
        function isPromise(obj) {
            return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
        }
    }),
    "./node_modules/lodash/_DataView.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"), root = __webpack_require__("./node_modules/lodash/_root.js");
        var DataView = getNative(root, 'DataView');
        module.exports = DataView;
    }),
    "./node_modules/lodash/_Hash.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var hashClear = __webpack_require__("./node_modules/lodash/_hashClear.js"), hashDelete = __webpack_require__("./node_modules/lodash/_hashDelete.js"), hashGet = __webpack_require__("./node_modules/lodash/_hashGet.js"), hashHas = __webpack_require__("./node_modules/lodash/_hashHas.js"), hashSet = __webpack_require__("./node_modules/lodash/_hashSet.js");
        function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        module.exports = Hash;
    }),
    "./node_modules/lodash/_ListCache.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var listCacheClear = __webpack_require__("./node_modules/lodash/_listCacheClear.js"), listCacheDelete = __webpack_require__("./node_modules/lodash/_listCacheDelete.js"), listCacheGet = __webpack_require__("./node_modules/lodash/_listCacheGet.js"), listCacheHas = __webpack_require__("./node_modules/lodash/_listCacheHas.js"), listCacheSet = __webpack_require__("./node_modules/lodash/_listCacheSet.js");
        function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        module.exports = ListCache;
    }),
    "./node_modules/lodash/_Map.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"), root = __webpack_require__("./node_modules/lodash/_root.js");
        var Map = getNative(root, 'Map');
        module.exports = Map;
    }),
    "./node_modules/lodash/_MapCache.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var mapCacheClear = __webpack_require__("./node_modules/lodash/_mapCacheClear.js"), mapCacheDelete = __webpack_require__("./node_modules/lodash/_mapCacheDelete.js"), mapCacheGet = __webpack_require__("./node_modules/lodash/_mapCacheGet.js"), mapCacheHas = __webpack_require__("./node_modules/lodash/_mapCacheHas.js"), mapCacheSet = __webpack_require__("./node_modules/lodash/_mapCacheSet.js");
        function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        module.exports = MapCache;
    }),
    "./node_modules/lodash/_Promise.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"), root = __webpack_require__("./node_modules/lodash/_root.js");
        var Promise = getNative(root, 'Promise');
        module.exports = Promise;
    }),
    "./node_modules/lodash/_Set.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"), root = __webpack_require__("./node_modules/lodash/_root.js");
        var Set = getNative(root, 'Set');
        module.exports = Set;
    }),
    "./node_modules/lodash/_SetCache.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var MapCache = __webpack_require__("./node_modules/lodash/_MapCache.js"), setCacheAdd = __webpack_require__("./node_modules/lodash/_setCacheAdd.js"), setCacheHas = __webpack_require__("./node_modules/lodash/_setCacheHas.js");
        function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache();
            while (++index < length) {
                this.add(values[index]);
            }
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        module.exports = SetCache;
    }),
    "./node_modules/lodash/_Stack.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var ListCache = __webpack_require__("./node_modules/lodash/_ListCache.js"), stackClear = __webpack_require__("./node_modules/lodash/_stackClear.js"), stackDelete = __webpack_require__("./node_modules/lodash/_stackDelete.js"), stackGet = __webpack_require__("./node_modules/lodash/_stackGet.js"), stackHas = __webpack_require__("./node_modules/lodash/_stackHas.js"), stackSet = __webpack_require__("./node_modules/lodash/_stackSet.js");
        function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        module.exports = Stack;
    }),
    "./node_modules/lodash/_Symbol.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var root = __webpack_require__("./node_modules/lodash/_root.js");
        var _Symbol = root.Symbol;
        module.exports = _Symbol;
    }),
    "./node_modules/lodash/_Uint8Array.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var root = __webpack_require__("./node_modules/lodash/_root.js");
        var Uint8Array = root.Uint8Array;
        module.exports = Uint8Array;
    }),
    "./node_modules/lodash/_WeakMap.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"), root = __webpack_require__("./node_modules/lodash/_root.js");
        var WeakMap = getNative(root, 'WeakMap');
        module.exports = WeakMap;
    }),
    "./node_modules/lodash/_apply.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function apply(func, thisArg, args) {
            switch (args.length) {
                case 0:
                    return func.call(thisArg);
                case 1:
                    return func.call(thisArg, args[0]);
                case 2:
                    return func.call(thisArg, args[0], args[1]);
                case 3:
                    return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
        }
        module.exports = apply;
    }),
    "./node_modules/lodash/_arrayFilter.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function arrayFilter(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }
        module.exports = arrayFilter;
    }),
    "./node_modules/lodash/_arrayLikeKeys.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseTimes = __webpack_require__("./node_modules/lodash/_baseTimes.js"), isArguments = __webpack_require__("./node_modules/lodash/isArguments.js"), isArray = __webpack_require__("./node_modules/lodash/isArray.js"), isBuffer = __webpack_require__("./node_modules/lodash/isBuffer.js"), isIndex = __webpack_require__("./node_modules/lodash/_isIndex.js"), isTypedArray = __webpack_require__("./node_modules/lodash/isTypedArray.js");
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for (var key in value) {
                if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' ||
                    isBuff && (key == 'offset' || key == 'parent') ||
                    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
                    isIndex(key, length)))) {
                    result.push(key);
                }
            }
            return result;
        }
        module.exports = arrayLikeKeys;
    }),
    "./node_modules/lodash/_arrayMap.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function arrayMap(array, iteratee) {
            var index = -1, length = array == null ? 0 : array.length, result = Array(length);
            while (++index < length) {
                result[index] = iteratee(array[index], index, array);
            }
            return result;
        }
        module.exports = arrayMap;
    }),
    "./node_modules/lodash/_arrayPush.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function arrayPush(array, values) {
            var index = -1, length = values.length, offset = array.length;
            while (++index < length) {
                array[offset + index] = values[index];
            }
            return array;
        }
        module.exports = arrayPush;
    }),
    "./node_modules/lodash/_arraySome.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function arraySome(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return true;
                }
            }
            return false;
        }
        module.exports = arraySome;
    }),
    "./node_modules/lodash/_assignMergeValue.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseAssignValue = __webpack_require__("./node_modules/lodash/_baseAssignValue.js"), eq = __webpack_require__("./node_modules/lodash/eq.js");
        function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
                baseAssignValue(object, key, value);
            }
        }
        module.exports = assignMergeValue;
    }),
    "./node_modules/lodash/_assignValue.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseAssignValue = __webpack_require__("./node_modules/lodash/_baseAssignValue.js"), eq = __webpack_require__("./node_modules/lodash/eq.js");
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
                baseAssignValue(object, key, value);
            }
        }
        module.exports = assignValue;
    }),
    "./node_modules/lodash/_assocIndexOf.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var eq = __webpack_require__("./node_modules/lodash/eq.js");
        function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
                if (eq(array[length][0], key)) {
                    return length;
                }
            }
            return -1;
        }
        module.exports = assocIndexOf;
    }),
    "./node_modules/lodash/_baseAssignValue.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var defineProperty = __webpack_require__("./node_modules/lodash/_defineProperty.js");
        function baseAssignValue(object, key, value) {
            if (key == '__proto__' && defineProperty) {
                defineProperty(object, key, {
                    'configurable': true,
                    'enumerable': true,
                    'value': value,
                    'writable': true
                });
            }
            else {
                object[key] = value;
            }
        }
        module.exports = baseAssignValue;
    }),
    "./node_modules/lodash/_baseCreate.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isObject = __webpack_require__("./node_modules/lodash/isObject.js");
        var objectCreate = Object.create;
        var baseCreate = function () {
            function object() { }
            return function (proto) {
                if (!isObject(proto)) {
                    return {};
                }
                if (objectCreate) {
                    return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object();
                object.prototype = undefined;
                return result;
            };
        }();
        module.exports = baseCreate;
    }),
    "./node_modules/lodash/_baseFor.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var createBaseFor = __webpack_require__("./node_modules/lodash/_createBaseFor.js");
        var baseFor = createBaseFor();
        module.exports = baseFor;
    }),
    "./node_modules/lodash/_baseForOwn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseFor = __webpack_require__("./node_modules/lodash/_baseFor.js"), keys = __webpack_require__("./node_modules/lodash/keys.js");
        function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        module.exports = baseForOwn;
    }),
    "./node_modules/lodash/_baseGet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var castPath = __webpack_require__("./node_modules/lodash/_castPath.js"), toKey = __webpack_require__("./node_modules/lodash/_toKey.js");
        function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
                object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined;
        }
        module.exports = baseGet;
    }),
    "./node_modules/lodash/_baseGetAllKeys.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var arrayPush = __webpack_require__("./node_modules/lodash/_arrayPush.js"), isArray = __webpack_require__("./node_modules/lodash/isArray.js");
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        module.exports = baseGetAllKeys;
    }),
    "./node_modules/lodash/_baseGetTag.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js"), getRawTag = __webpack_require__("./node_modules/lodash/_getRawTag.js"), objectToString = __webpack_require__("./node_modules/lodash/_objectToString.js");
        var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
        var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
        function baseGetTag(value) {
            if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        module.exports = baseGetTag;
    }),
    "./node_modules/lodash/_baseHasIn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }
        module.exports = baseHasIn;
    }),
    "./node_modules/lodash/_baseIsArguments.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"), isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
        var argsTag = '[object Arguments]';
        function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        module.exports = baseIsArguments;
    }),
    "./node_modules/lodash/_baseIsEqual.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseIsEqualDeep = __webpack_require__("./node_modules/lodash/_baseIsEqualDeep.js"), isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
        function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
                return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
                return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        module.exports = baseIsEqual;
    }),
    "./node_modules/lodash/_baseIsEqualDeep.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var Stack = __webpack_require__("./node_modules/lodash/_Stack.js"), equalArrays = __webpack_require__("./node_modules/lodash/_equalArrays.js"), equalByTag = __webpack_require__("./node_modules/lodash/_equalByTag.js"), equalObjects = __webpack_require__("./node_modules/lodash/_equalObjects.js"), getTag = __webpack_require__("./node_modules/lodash/_getTag.js"), isArray = __webpack_require__("./node_modules/lodash/isArray.js"), isBuffer = __webpack_require__("./node_modules/lodash/isBuffer.js"), isTypedArray = __webpack_require__("./node_modules/lodash/isTypedArray.js");
        var COMPARE_PARTIAL_FLAG = 1;
        var argsTag = '[object Arguments]', arrayTag = '[object Array]', objectTag = '[object Object]';
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                    return false;
                }
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack());
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) {
                return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        module.exports = baseIsEqualDeep;
    }),
    "./node_modules/lodash/_baseIsMatch.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var Stack = __webpack_require__("./node_modules/lodash/_Stack.js"), baseIsEqual = __webpack_require__("./node_modules/lodash/_baseIsEqual.js");
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (index--) {
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                    return false;
                }
            }
            while (++index < length) {
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) {
                        return false;
                    }
                }
                else {
                    var stack = new Stack();
                    if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                    }
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
                        return false;
                    }
                }
            }
            return true;
        }
        module.exports = baseIsMatch;
    }),
    "./node_modules/lodash/_baseIsNative.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isFunction = __webpack_require__("./node_modules/lodash/isFunction.js"), isMasked = __webpack_require__("./node_modules/lodash/_isMasked.js"), isObject = __webpack_require__("./node_modules/lodash/isObject.js"), toSource = __webpack_require__("./node_modules/lodash/_toSource.js");
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var funcProto = Function.prototype, objectProto = Object.prototype;
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
        function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
                return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        module.exports = baseIsNative;
    }),
    "./node_modules/lodash/_baseIsTypedArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"), isLength = __webpack_require__("./node_modules/lodash/isLength.js"), isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
        var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
        var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        module.exports = baseIsTypedArray;
    }),
    "./node_modules/lodash/_baseIteratee.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var baseMatches = __webpack_require__("./node_modules/lodash/_baseMatches.js"), baseMatchesProperty = __webpack_require__("./node_modules/lodash/_baseMatchesProperty.js"), identity = __webpack_require__("./node_modules/lodash/identity.js"), isArray = __webpack_require__("./node_modules/lodash/isArray.js"), property = __webpack_require__("./node_modules/lodash/property.js");
        function baseIteratee(value) {
            if (typeof value == 'function') {
                return value;
            }
            if (value == null) {
                return identity;
            }
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
                return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
        }
        module.exports = baseIteratee;
    }),
    "./node_modules/lodash/_baseKeys.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isPrototype = __webpack_require__("./node_modules/lodash/_isPrototype.js"), nativeKeys = __webpack_require__("./node_modules/lodash/_nativeKeys.js");
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function baseKeys(object) {
            if (!isPrototype(object)) {
                return nativeKeys(object);
            }
            var result = [];
            for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != 'constructor') {
                    result.push(key);
                }
            }
            return result;
        }
        module.exports = baseKeys;
    }),
    "./node_modules/lodash/_baseKeysIn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isObject = __webpack_require__("./node_modules/lodash/isObject.js"), isPrototype = __webpack_require__("./node_modules/lodash/_isPrototype.js"), nativeKeysIn = __webpack_require__("./node_modules/lodash/_nativeKeysIn.js");
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function baseKeysIn(object) {
            if (!isObject(object)) {
                return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result = [];
            for (var key in object) {
                if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                    result.push(key);
                }
            }
            return result;
        }
        module.exports = baseKeysIn;
    }),
    "./node_modules/lodash/_baseMatches.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseIsMatch = __webpack_require__("./node_modules/lodash/_baseIsMatch.js"), getMatchData = __webpack_require__("./node_modules/lodash/_getMatchData.js"), matchesStrictComparable = __webpack_require__("./node_modules/lodash/_matchesStrictComparable.js");
        function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function (object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        module.exports = baseMatches;
    }),
    "./node_modules/lodash/_baseMatchesProperty.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseIsEqual = __webpack_require__("./node_modules/lodash/_baseIsEqual.js"), get = __webpack_require__("./node_modules/lodash/get.js"), hasIn = __webpack_require__("./node_modules/lodash/hasIn.js"), isKey = __webpack_require__("./node_modules/lodash/_isKey.js"), isStrictComparable = __webpack_require__("./node_modules/lodash/_isStrictComparable.js"), matchesStrictComparable = __webpack_require__("./node_modules/lodash/_matchesStrictComparable.js"), toKey = __webpack_require__("./node_modules/lodash/_toKey.js");
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
            }
            return function (object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        module.exports = baseMatchesProperty;
    }),
    "./node_modules/lodash/_baseMerge.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var Stack = __webpack_require__("./node_modules/lodash/_Stack.js"), assignMergeValue = __webpack_require__("./node_modules/lodash/_assignMergeValue.js"), baseFor = __webpack_require__("./node_modules/lodash/_baseFor.js"), baseMergeDeep = __webpack_require__("./node_modules/lodash/_baseMergeDeep.js"), isObject = __webpack_require__("./node_modules/lodash/isObject.js"), keysIn = __webpack_require__("./node_modules/lodash/keysIn.js"), safeGet = __webpack_require__("./node_modules/lodash/_safeGet.js");
        function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
                return;
            }
            baseFor(source, function (srcValue, key) {
                stack || (stack = new Stack());
                if (isObject(srcValue)) {
                    baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                }
                else {
                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
                    if (newValue === undefined) {
                        newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        module.exports = baseMerge;
    }),
    "./node_modules/lodash/_baseMergeDeep.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var assignMergeValue = __webpack_require__("./node_modules/lodash/_assignMergeValue.js"), cloneBuffer = __webpack_require__("./node_modules/lodash/_cloneBuffer.js"), cloneTypedArray = __webpack_require__("./node_modules/lodash/_cloneTypedArray.js"), copyArray = __webpack_require__("./node_modules/lodash/_copyArray.js"), initCloneObject = __webpack_require__("./node_modules/lodash/_initCloneObject.js"), isArguments = __webpack_require__("./node_modules/lodash/isArguments.js"), isArray = __webpack_require__("./node_modules/lodash/isArray.js"), isArrayLikeObject = __webpack_require__("./node_modules/lodash/isArrayLikeObject.js"), isBuffer = __webpack_require__("./node_modules/lodash/isBuffer.js"), isFunction = __webpack_require__("./node_modules/lodash/isFunction.js"), isObject = __webpack_require__("./node_modules/lodash/isObject.js"), isPlainObject = __webpack_require__("./node_modules/lodash/isPlainObject.js"), isTypedArray = __webpack_require__("./node_modules/lodash/isTypedArray.js"), safeGet = __webpack_require__("./node_modules/lodash/_safeGet.js"), toPlainObject = __webpack_require__("./node_modules/lodash/toPlainObject.js");
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) {
                        newValue = objValue;
                    }
                    else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                    }
                    else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    }
                    else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    }
                    else {
                        newValue = [];
                    }
                }
                else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                    }
                    else if (!isObject(objValue) || isFunction(objValue)) {
                        newValue = initCloneObject(srcValue);
                    }
                }
                else {
                    isCommon = false;
                }
            }
            if (isCommon) {
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack['delete'](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        module.exports = baseMergeDeep;
    }),
    "./node_modules/lodash/_baseProperty.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function baseProperty(key) {
            return function (object) {
                return object == null ? undefined : object[key];
            };
        }
        module.exports = baseProperty;
    }),
    "./node_modules/lodash/_basePropertyDeep.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseGet = __webpack_require__("./node_modules/lodash/_baseGet.js");
        function basePropertyDeep(path) {
            return function (object) {
                return baseGet(object, path);
            };
        }
        module.exports = basePropertyDeep;
    }),
    "./node_modules/lodash/_baseRest.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var identity = __webpack_require__("./node_modules/lodash/identity.js"), overRest = __webpack_require__("./node_modules/lodash/_overRest.js"), setToString = __webpack_require__("./node_modules/lodash/_setToString.js");
        function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + '');
        }
        module.exports = baseRest;
    }),
    "./node_modules/lodash/_baseSetToString.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var constant = __webpack_require__("./node_modules/lodash/constant.js"), defineProperty = __webpack_require__("./node_modules/lodash/_defineProperty.js"), identity = __webpack_require__("./node_modules/lodash/identity.js");
        var baseSetToString = !defineProperty ? identity : function (func, string) {
            return defineProperty(func, 'toString', {
                'configurable': true,
                'enumerable': false,
                'value': constant(string),
                'writable': true
            });
        };
        module.exports = baseSetToString;
    }),
    "./node_modules/lodash/_baseTimes.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function baseTimes(n, iteratee) {
            var index = -1, result = Array(n);
            while (++index < n) {
                result[index] = iteratee(index);
            }
            return result;
        }
        module.exports = baseTimes;
    }),
    "./node_modules/lodash/_baseToString.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js"), arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"), isArray = __webpack_require__("./node_modules/lodash/isArray.js"), isSymbol = __webpack_require__("./node_modules/lodash/isSymbol.js");
        var INFINITY = 1 / 0;
        var symbolProto = _Symbol ? _Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        function baseToString(value) {
            if (typeof value == 'string') {
                return value;
            }
            if (isArray(value)) {
                return arrayMap(value, baseToString) + '';
            }
            if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : '';
            }
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        module.exports = baseToString;
    }),
    "./node_modules/lodash/_baseUnary.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function baseUnary(func) {
            return function (value) {
                return func(value);
            };
        }
        module.exports = baseUnary;
    }),
    "./node_modules/lodash/_cacheHas.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function cacheHas(cache, key) {
            return cache.has(key);
        }
        module.exports = cacheHas;
    }),
    "./node_modules/lodash/_castPath.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isArray = __webpack_require__("./node_modules/lodash/isArray.js"), isKey = __webpack_require__("./node_modules/lodash/_isKey.js"), stringToPath = __webpack_require__("./node_modules/lodash/_stringToPath.js"), toString = __webpack_require__("./node_modules/lodash/toString.js");
        function castPath(value, object) {
            if (isArray(value)) {
                return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        module.exports = castPath;
    }),
    "./node_modules/lodash/_cloneArrayBuffer.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var Uint8Array = __webpack_require__("./node_modules/lodash/_Uint8Array.js");
        function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        module.exports = cloneArrayBuffer;
    }),
    "./node_modules/lodash/_cloneBuffer.js": (function (module, exports, __webpack_require__) {
        "use strict";
        (function (module) {
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
            var root = __webpack_require__("./node_modules/lodash/_root.js");
            var freeExports = (false ? undefined : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
            var freeModule = freeExports && (false ? undefined : _typeof(module)) == 'object' && module && !module.nodeType && module;
            var moduleExports = freeModule && freeModule.exports === freeExports;
            var Buffer = moduleExports ? root.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
            function cloneBuffer(buffer, isDeep) {
                if (isDeep) {
                    return buffer.slice();
                }
                var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
                buffer.copy(result);
                return result;
            }
            module.exports = cloneBuffer;
        }.call(this, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)));
    }),
    "./node_modules/lodash/_cloneTypedArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var cloneArrayBuffer = __webpack_require__("./node_modules/lodash/_cloneArrayBuffer.js");
        function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        module.exports = cloneTypedArray;
    }),
    "./node_modules/lodash/_copyArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while (++index < length) {
                array[index] = source[index];
            }
            return array;
        }
        module.exports = copyArray;
    }),
    "./node_modules/lodash/_copyObject.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var assignValue = __webpack_require__("./node_modules/lodash/_assignValue.js"), baseAssignValue = __webpack_require__("./node_modules/lodash/_baseAssignValue.js");
        function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) {
                    newValue = source[key];
                }
                if (isNew) {
                    baseAssignValue(object, key, newValue);
                }
                else {
                    assignValue(object, key, newValue);
                }
            }
            return object;
        }
        module.exports = copyObject;
    }),
    "./node_modules/lodash/_coreJsData.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var root = __webpack_require__("./node_modules/lodash/_root.js");
        var coreJsData = root['__core-js_shared__'];
        module.exports = coreJsData;
    }),
    "./node_modules/lodash/_createAssigner.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseRest = __webpack_require__("./node_modules/lodash/_baseRest.js"), isIterateeCall = __webpack_require__("./node_modules/lodash/_isIterateeCall.js");
        function createAssigner(assigner) {
            return baseRest(function (object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object(object);
                while (++index < length) {
                    var source = sources[index];
                    if (source) {
                        assigner(object, source, index, customizer);
                    }
                }
                return object;
            });
        }
        module.exports = createAssigner;
    }),
    "./node_modules/lodash/_createBaseFor.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function createBaseFor(fromRight) {
            return function (object, iteratee, keysFunc) {
                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                while (length--) {
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                    }
                }
                return object;
            };
        }
        module.exports = createBaseFor;
    }),
    "./node_modules/lodash/_defineProperty.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getNative = __webpack_require__("./node_modules/lodash/_getNative.js");
        var defineProperty = function () {
            try {
                var func = getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
            }
            catch (e) { }
        }();
        module.exports = defineProperty;
    }),
    "./node_modules/lodash/_equalArrays.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var SetCache = __webpack_require__("./node_modules/lodash/_SetCache.js"), arraySome = __webpack_require__("./node_modules/lodash/_arraySome.js"), cacheHas = __webpack_require__("./node_modules/lodash/_cacheHas.js");
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
            }
            var stacked = stack.get(array);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
                var arrValue = array[index], othValue = other[index];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined) {
                    if (compared) {
                        continue;
                    }
                    result = false;
                    break;
                }
                if (seen) {
                    if (!arraySome(other, function (othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                            return seen.push(othIndex);
                        }
                    })) {
                        result = false;
                        break;
                    }
                }
                else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            stack['delete'](other);
            return result;
        }
        module.exports = equalArrays;
    }),
    "./node_modules/lodash/_equalByTag.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js"), Uint8Array = __webpack_require__("./node_modules/lodash/_Uint8Array.js"), eq = __webpack_require__("./node_modules/lodash/eq.js"), equalArrays = __webpack_require__("./node_modules/lodash/_equalArrays.js"), mapToArray = __webpack_require__("./node_modules/lodash/_mapToArray.js"), setToArray = __webpack_require__("./node_modules/lodash/_setToArray.js");
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
        var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]';
        var symbolProto = _Symbol ? _Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
                case dataViewTag:
                    if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                        return false;
                    }
                    object = object.buffer;
                    other = other.buffer;
                case arrayBufferTag:
                    if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                        return false;
                    }
                    return true;
                case boolTag:
                case dateTag:
                case numberTag:
                    return eq(+object, +other);
                case errorTag:
                    return object.name == other.name && object.message == other.message;
                case regexpTag:
                case stringTag:
                    return object == other + '';
                case mapTag:
                    var convert = mapToArray;
                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);
                    if (object.size != other.size && !isPartial) {
                        return false;
                    }
                    var stacked = stack.get(object);
                    if (stacked) {
                        return stacked == other;
                    }
                    bitmask |= COMPARE_UNORDERED_FLAG;
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack['delete'](object);
                    return result;
                case symbolTag:
                    if (symbolValueOf) {
                        return symbolValueOf.call(object) == symbolValueOf.call(other);
                    }
            }
            return false;
        }
        module.exports = equalByTag;
    }),
    "./node_modules/lodash/_equalObjects.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getAllKeys = __webpack_require__("./node_modules/lodash/_getAllKeys.js");
        var COMPARE_PARTIAL_FLAG = 1;
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
                return false;
            }
            var index = objLength;
            while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                    return false;
                }
            }
            var stacked = stack.get(object);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                }
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                    result = false;
                }
            }
            stack['delete'](object);
            stack['delete'](other);
            return result;
        }
        module.exports = equalObjects;
    }),
    "./node_modules/lodash/_freeGlobal.js": (function (module, exports, __webpack_require__) {
        "use strict";
        (function (global) {
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
            var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;
            module.exports = freeGlobal;
        }.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")));
    }),
    "./node_modules/lodash/_getAllKeys.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseGetAllKeys = __webpack_require__("./node_modules/lodash/_baseGetAllKeys.js"), getSymbols = __webpack_require__("./node_modules/lodash/_getSymbols.js"), keys = __webpack_require__("./node_modules/lodash/keys.js");
        function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        module.exports = getAllKeys;
    }),
    "./node_modules/lodash/_getMapData.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isKeyable = __webpack_require__("./node_modules/lodash/_isKeyable.js");
        function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
        }
        module.exports = getMapData;
    }),
    "./node_modules/lodash/_getMatchData.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isStrictComparable = __webpack_require__("./node_modules/lodash/_isStrictComparable.js"), keys = __webpack_require__("./node_modules/lodash/keys.js");
        function getMatchData(object) {
            var result = keys(object), length = result.length;
            while (length--) {
                var key = result[length], value = object[key];
                result[length] = [key, value, isStrictComparable(value)];
            }
            return result;
        }
        module.exports = getMatchData;
    }),
    "./node_modules/lodash/_getNative.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseIsNative = __webpack_require__("./node_modules/lodash/_baseIsNative.js"), getValue = __webpack_require__("./node_modules/lodash/_getValue.js");
        function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        module.exports = getNative;
    }),
    "./node_modules/lodash/_getPrototype.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var overArg = __webpack_require__("./node_modules/lodash/_overArg.js");
        var getPrototype = overArg(Object.getPrototypeOf, Object);
        module.exports = getPrototype;
    }),
    "./node_modules/lodash/_getRawTag.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js");
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var nativeObjectToString = objectProto.toString;
        var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
        function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            }
            catch (e) { }
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) {
                    value[symToStringTag] = tag;
                }
                else {
                    delete value[symToStringTag];
                }
            }
            return result;
        }
        module.exports = getRawTag;
    }),
    "./node_modules/lodash/_getSymbols.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var arrayFilter = __webpack_require__("./node_modules/lodash/_arrayFilter.js"), stubArray = __webpack_require__("./node_modules/lodash/stubArray.js");
        var objectProto = Object.prototype;
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;
        var nativeGetSymbols = Object.getOwnPropertySymbols;
        var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
            if (object == null) {
                return [];
            }
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function (symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };
        module.exports = getSymbols;
    }),
    "./node_modules/lodash/_getTag.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var DataView = __webpack_require__("./node_modules/lodash/_DataView.js"), Map = __webpack_require__("./node_modules/lodash/_Map.js"), Promise = __webpack_require__("./node_modules/lodash/_Promise.js"), Set = __webpack_require__("./node_modules/lodash/_Set.js"), WeakMap = __webpack_require__("./node_modules/lodash/_WeakMap.js"), baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"), toSource = __webpack_require__("./node_modules/lodash/_toSource.js");
        var mapTag = '[object Map]', objectTag = '[object Object]', promiseTag = '[object Promise]', setTag = '[object Set]', weakMapTag = '[object WeakMap]';
        var dataViewTag = '[object DataView]';
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
            getTag = function getTag(value) {
                var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
                if (ctorString) {
                    switch (ctorString) {
                        case dataViewCtorString:
                            return dataViewTag;
                        case mapCtorString:
                            return mapTag;
                        case promiseCtorString:
                            return promiseTag;
                        case setCtorString:
                            return setTag;
                        case weakMapCtorString:
                            return weakMapTag;
                    }
                }
                return result;
            };
        }
        module.exports = getTag;
    }),
    "./node_modules/lodash/_getValue.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function getValue(object, key) {
            return object == null ? undefined : object[key];
        }
        module.exports = getValue;
    }),
    "./node_modules/lodash/_hasPath.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var castPath = __webpack_require__("./node_modules/lodash/_castPath.js"), isArguments = __webpack_require__("./node_modules/lodash/isArguments.js"), isArray = __webpack_require__("./node_modules/lodash/isArray.js"), isIndex = __webpack_require__("./node_modules/lodash/_isIndex.js"), isLength = __webpack_require__("./node_modules/lodash/isLength.js"), toKey = __webpack_require__("./node_modules/lodash/_toKey.js");
        function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                    break;
                }
                object = object[key];
            }
            if (result || ++index != length) {
                return result;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        module.exports = hasPath;
    }),
    "./node_modules/lodash/_hashClear.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var nativeCreate = __webpack_require__("./node_modules/lodash/_nativeCreate.js");
        function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }
        module.exports = hashClear;
    }),
    "./node_modules/lodash/_hashDelete.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        module.exports = hashDelete;
    }),
    "./node_modules/lodash/_hashGet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var nativeCreate = __webpack_require__("./node_modules/lodash/_nativeCreate.js");
        var HASH_UNDEFINED = '__lodash_hash_undefined__';
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        module.exports = hashGet;
    }),
    "./node_modules/lodash/_hashHas.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var nativeCreate = __webpack_require__("./node_modules/lodash/_nativeCreate.js");
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        module.exports = hashHas;
    }),
    "./node_modules/lodash/_hashSet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var nativeCreate = __webpack_require__("./node_modules/lodash/_nativeCreate.js");
        var HASH_UNDEFINED = '__lodash_hash_undefined__';
        function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        module.exports = hashSet;
    }),
    "./node_modules/lodash/_initCloneObject.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseCreate = __webpack_require__("./node_modules/lodash/_baseCreate.js"), getPrototype = __webpack_require__("./node_modules/lodash/_getPrototype.js"), isPrototype = __webpack_require__("./node_modules/lodash/_isPrototype.js");
        function initCloneObject(object) {
            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        module.exports = initCloneObject;
    }),
    "./node_modules/lodash/_isIndex.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var MAX_SAFE_INTEGER = 9007199254740991;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        function isIndex(value, length) {
            var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        module.exports = isIndex;
    }),
    "./node_modules/lodash/_isIterateeCall.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var eq = __webpack_require__("./node_modules/lodash/eq.js"), isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js"), isIndex = __webpack_require__("./node_modules/lodash/_isIndex.js"), isObject = __webpack_require__("./node_modules/lodash/isObject.js");
        function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
                return false;
            }
            var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
            if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
                return eq(object[index], value);
            }
            return false;
        }
        module.exports = isIterateeCall;
    }),
    "./node_modules/lodash/_isKey.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var isArray = __webpack_require__("./node_modules/lodash/isArray.js"), isSymbol = __webpack_require__("./node_modules/lodash/isSymbol.js");
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
        function isKey(value, object) {
            if (isArray(value)) {
                return false;
            }
            var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
            if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
                return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
        }
        module.exports = isKey;
    }),
    "./node_modules/lodash/_isKeyable.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        function isKeyable(value) {
            var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
        }
        module.exports = isKeyable;
    }),
    "./node_modules/lodash/_isMasked.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var coreJsData = __webpack_require__("./node_modules/lodash/_coreJsData.js");
        var maskSrcKey = function () {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? 'Symbol(src)_1.' + uid : '';
        }();
        function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        module.exports = isMasked;
    }),
    "./node_modules/lodash/_isPrototype.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var objectProto = Object.prototype;
        function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
            return value === proto;
        }
        module.exports = isPrototype;
    }),
    "./node_modules/lodash/_isStrictComparable.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isObject = __webpack_require__("./node_modules/lodash/isObject.js");
        function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        module.exports = isStrictComparable;
    }),
    "./node_modules/lodash/_listCacheClear.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        module.exports = listCacheClear;
    }),
    "./node_modules/lodash/_listCacheDelete.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var assocIndexOf = __webpack_require__("./node_modules/lodash/_assocIndexOf.js");
        var arrayProto = Array.prototype;
        var splice = arrayProto.splice;
        function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
                data.pop();
            }
            else {
                splice.call(data, index, 1);
            }
            --this.size;
            return true;
        }
        module.exports = listCacheDelete;
    }),
    "./node_modules/lodash/_listCacheGet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var assocIndexOf = __webpack_require__("./node_modules/lodash/_assocIndexOf.js");
        function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        module.exports = listCacheGet;
    }),
    "./node_modules/lodash/_listCacheHas.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var assocIndexOf = __webpack_require__("./node_modules/lodash/_assocIndexOf.js");
        function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        module.exports = listCacheHas;
    }),
    "./node_modules/lodash/_listCacheSet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var assocIndexOf = __webpack_require__("./node_modules/lodash/_assocIndexOf.js");
        function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([key, value]);
            }
            else {
                data[index][1] = value;
            }
            return this;
        }
        module.exports = listCacheSet;
    }),
    "./node_modules/lodash/_mapCacheClear.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var Hash = __webpack_require__("./node_modules/lodash/_Hash.js"), ListCache = __webpack_require__("./node_modules/lodash/_ListCache.js"), Map = __webpack_require__("./node_modules/lodash/_Map.js");
        function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                'hash': new Hash(),
                'map': new (Map || ListCache)(),
                'string': new Hash()
            };
        }
        module.exports = mapCacheClear;
    }),
    "./node_modules/lodash/_mapCacheDelete.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getMapData = __webpack_require__("./node_modules/lodash/_getMapData.js");
        function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        module.exports = mapCacheDelete;
    }),
    "./node_modules/lodash/_mapCacheGet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getMapData = __webpack_require__("./node_modules/lodash/_getMapData.js");
        function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        module.exports = mapCacheGet;
    }),
    "./node_modules/lodash/_mapCacheHas.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getMapData = __webpack_require__("./node_modules/lodash/_getMapData.js");
        function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        module.exports = mapCacheHas;
    }),
    "./node_modules/lodash/_mapCacheSet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getMapData = __webpack_require__("./node_modules/lodash/_getMapData.js");
        function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        module.exports = mapCacheSet;
    }),
    "./node_modules/lodash/_mapToArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function mapToArray(map) {
            var index = -1, result = Array(map.size);
            map.forEach(function (value, key) {
                result[++index] = [key, value];
            });
            return result;
        }
        module.exports = mapToArray;
    }),
    "./node_modules/lodash/_matchesStrictComparable.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function matchesStrictComparable(key, srcValue) {
            return function (object) {
                if (object == null) {
                    return false;
                }
                return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
        }
        module.exports = matchesStrictComparable;
    }),
    "./node_modules/lodash/_memoizeCapped.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var memoize = __webpack_require__("./node_modules/lodash/memoize.js");
        var MAX_MEMOIZE_SIZE = 500;
        function memoizeCapped(func) {
            var result = memoize(func, function (key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                    cache.clear();
                }
                return key;
            });
            var cache = result.cache;
            return result;
        }
        module.exports = memoizeCapped;
    }),
    "./node_modules/lodash/_nativeCreate.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getNative = __webpack_require__("./node_modules/lodash/_getNative.js");
        var nativeCreate = getNative(Object, 'create');
        module.exports = nativeCreate;
    }),
    "./node_modules/lodash/_nativeKeys.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var overArg = __webpack_require__("./node_modules/lodash/_overArg.js");
        var nativeKeys = overArg(Object.keys, Object);
        module.exports = nativeKeys;
    }),
    "./node_modules/lodash/_nativeKeysIn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function nativeKeysIn(object) {
            var result = [];
            if (object != null) {
                for (var key in Object(object)) {
                    result.push(key);
                }
            }
            return result;
        }
        module.exports = nativeKeysIn;
    }),
    "./node_modules/lodash/_nodeUtil.js": (function (module, exports, __webpack_require__) {
        "use strict";
        (function (module) {
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
            var freeGlobal = __webpack_require__("./node_modules/lodash/_freeGlobal.js");
            var freeExports = (false ? undefined : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
            var freeModule = freeExports && (false ? undefined : _typeof(module)) == 'object' && module && !module.nodeType && module;
            var moduleExports = freeModule && freeModule.exports === freeExports;
            var freeProcess = moduleExports && freeGlobal.process;
            var nodeUtil = function () {
                try {
                    var types = freeModule && freeModule.require && freeModule.require('util').types;
                    if (types) {
                        return types;
                    }
                    return freeProcess && freeProcess.binding && freeProcess.binding('util');
                }
                catch (e) { }
            }();
            module.exports = nodeUtil;
        }.call(this, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)));
    }),
    "./node_modules/lodash/_objectToString.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var objectProto = Object.prototype;
        var nativeObjectToString = objectProto.toString;
        function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        module.exports = objectToString;
    }),
    "./node_modules/lodash/_overArg.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function overArg(func, transform) {
            return function (arg) {
                return func(transform(arg));
            };
        }
        module.exports = overArg;
    }),
    "./node_modules/lodash/_overRest.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var apply = __webpack_require__("./node_modules/lodash/_apply.js");
        var nativeMax = Math.max;
        function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function () {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                while (++index < length) {
                    array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                    otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        module.exports = overRest;
    }),
    "./node_modules/lodash/_root.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var freeGlobal = __webpack_require__("./node_modules/lodash/_freeGlobal.js");
        var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function('return this')();
        module.exports = root;
    }),
    "./node_modules/lodash/_safeGet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function safeGet(object, key) {
            if (key === 'constructor' && typeof object[key] === 'function') {
                return;
            }
            if (key == '__proto__') {
                return;
            }
            return object[key];
        }
        module.exports = safeGet;
    }),
    "./node_modules/lodash/_setCacheAdd.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var HASH_UNDEFINED = '__lodash_hash_undefined__';
        function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        module.exports = setCacheAdd;
    }),
    "./node_modules/lodash/_setCacheHas.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function setCacheHas(value) {
            return this.__data__.has(value);
        }
        module.exports = setCacheHas;
    }),
    "./node_modules/lodash/_setToArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function setToArray(set) {
            var index = -1, result = Array(set.size);
            set.forEach(function (value) {
                result[++index] = value;
            });
            return result;
        }
        module.exports = setToArray;
    }),
    "./node_modules/lodash/_setToString.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseSetToString = __webpack_require__("./node_modules/lodash/_baseSetToString.js"), shortOut = __webpack_require__("./node_modules/lodash/_shortOut.js");
        var setToString = shortOut(baseSetToString);
        module.exports = setToString;
    }),
    "./node_modules/lodash/_shortOut.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var nativeNow = Date.now;
        function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function () {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) {
                        return arguments[0];
                    }
                }
                else {
                    count = 0;
                }
                return func.apply(undefined, arguments);
            };
        }
        module.exports = shortOut;
    }),
    "./node_modules/lodash/_stackClear.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var ListCache = __webpack_require__("./node_modules/lodash/_ListCache.js");
        function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
        }
        module.exports = stackClear;
    }),
    "./node_modules/lodash/_stackDelete.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function stackDelete(key) {
            var data = this.__data__, result = data['delete'](key);
            this.size = data.size;
            return result;
        }
        module.exports = stackDelete;
    }),
    "./node_modules/lodash/_stackGet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function stackGet(key) {
            return this.__data__.get(key);
        }
        module.exports = stackGet;
    }),
    "./node_modules/lodash/_stackHas.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function stackHas(key) {
            return this.__data__.has(key);
        }
        module.exports = stackHas;
    }),
    "./node_modules/lodash/_stackSet.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var ListCache = __webpack_require__("./node_modules/lodash/_ListCache.js"), Map = __webpack_require__("./node_modules/lodash/_Map.js"), MapCache = __webpack_require__("./node_modules/lodash/_MapCache.js");
        var LARGE_ARRAY_SIZE = 200;
        function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([key, value]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        module.exports = stackSet;
    }),
    "./node_modules/lodash/_stringToPath.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var memoizeCapped = __webpack_require__("./node_modules/lodash/_memoizeCapped.js");
        var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reEscapeChar = /\\(\\)?/g;
        var stringToPath = memoizeCapped(function (string) {
            var result = [];
            if (string.charCodeAt(0) === 46) {
                result.push('');
            }
            string.replace(rePropName, function (match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
            });
            return result;
        });
        module.exports = stringToPath;
    }),
    "./node_modules/lodash/_toKey.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isSymbol = __webpack_require__("./node_modules/lodash/isSymbol.js");
        var INFINITY = 1 / 0;
        function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) {
                return value;
            }
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        module.exports = toKey;
    }),
    "./node_modules/lodash/_toSource.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var funcProto = Function.prototype;
        var funcToString = funcProto.toString;
        function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                }
                catch (e) { }
                try {
                    return func + '';
                }
                catch (e) { }
            }
            return '';
        }
        module.exports = toSource;
    }),
    "./node_modules/lodash/constant.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function constant(value) {
            return function () {
                return value;
            };
        }
        module.exports = constant;
    }),
    "./node_modules/lodash/eq.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        module.exports = eq;
    }),
    "./node_modules/lodash/get.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseGet = __webpack_require__("./node_modules/lodash/_baseGet.js");
        function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        module.exports = get;
    }),
    "./node_modules/lodash/hasIn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseHasIn = __webpack_require__("./node_modules/lodash/_baseHasIn.js"), hasPath = __webpack_require__("./node_modules/lodash/_hasPath.js");
        function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        module.exports = hasIn;
    }),
    "./node_modules/lodash/identity.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function identity(value) {
            return value;
        }
        module.exports = identity;
    }),
    "./node_modules/lodash/isArguments.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseIsArguments = __webpack_require__("./node_modules/lodash/_baseIsArguments.js"), isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;
        var isArguments = baseIsArguments(function () {
            return arguments;
        }()) ? baseIsArguments : function (value) {
            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
        };
        module.exports = isArguments;
    }),
    "./node_modules/lodash/isArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isArray = Array.isArray;
        module.exports = isArray;
    }),
    "./node_modules/lodash/isArrayLike.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isFunction = __webpack_require__("./node_modules/lodash/isFunction.js"), isLength = __webpack_require__("./node_modules/lodash/isLength.js");
        function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        module.exports = isArrayLike;
    }),
    "./node_modules/lodash/isArrayLikeObject.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js"), isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
        function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        module.exports = isArrayLikeObject;
    }),
    "./node_modules/lodash/isBuffer.js": (function (module, exports, __webpack_require__) {
        "use strict";
        (function (module) {
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
            var root = __webpack_require__("./node_modules/lodash/_root.js"), stubFalse = __webpack_require__("./node_modules/lodash/stubFalse.js");
            var freeExports = (false ? undefined : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
            var freeModule = freeExports && (false ? undefined : _typeof(module)) == 'object' && module && !module.nodeType && module;
            var moduleExports = freeModule && freeModule.exports === freeExports;
            var Buffer = moduleExports ? root.Buffer : undefined;
            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
            var isBuffer = nativeIsBuffer || stubFalse;
            module.exports = isBuffer;
        }.call(this, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)));
    }),
    "./node_modules/lodash/isEmpty.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseKeys = __webpack_require__("./node_modules/lodash/_baseKeys.js"), getTag = __webpack_require__("./node_modules/lodash/_getTag.js"), isArguments = __webpack_require__("./node_modules/lodash/isArguments.js"), isArray = __webpack_require__("./node_modules/lodash/isArray.js"), isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js"), isBuffer = __webpack_require__("./node_modules/lodash/isBuffer.js"), isPrototype = __webpack_require__("./node_modules/lodash/_isPrototype.js"), isTypedArray = __webpack_require__("./node_modules/lodash/isTypedArray.js");
        var mapTag = '[object Map]', setTag = '[object Set]';
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function isEmpty(value) {
            if (value == null) {
                return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
                return !value.size;
            }
            if (isPrototype(value)) {
                return !baseKeys(value).length;
            }
            for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                    return false;
                }
            }
            return true;
        }
        module.exports = isEmpty;
    }),
    "./node_modules/lodash/isEqual.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseIsEqual = __webpack_require__("./node_modules/lodash/_baseIsEqual.js");
        function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        module.exports = isEqual;
    }),
    "./node_modules/lodash/isEqualWith.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseIsEqual = __webpack_require__("./node_modules/lodash/_baseIsEqual.js");
        function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
        module.exports = isEqualWith;
    }),
    "./node_modules/lodash/isFunction.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"), isObject = __webpack_require__("./node_modules/lodash/isObject.js");
        var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
        function isFunction(value) {
            if (!isObject(value)) {
                return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        module.exports = isFunction;
    }),
    "./node_modules/lodash/isLength.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var MAX_SAFE_INTEGER = 9007199254740991;
        function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        module.exports = isLength;
    }),
    "./node_modules/lodash/isNil.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function isNil(value) {
            return value == null;
        }
        module.exports = isNil;
    }),
    "./node_modules/lodash/isObject.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        function isObject(value) {
            var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
            return value != null && (type == 'object' || type == 'function');
        }
        module.exports = isObject;
    }),
    "./node_modules/lodash/isObjectLike.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        function isObjectLike(value) {
            return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
        }
        module.exports = isObjectLike;
    }),
    "./node_modules/lodash/isPlainObject.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"), getPrototype = __webpack_require__("./node_modules/lodash/_getPrototype.js"), isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
        var objectTag = '[object Object]';
        var funcProto = Function.prototype, objectProto = Object.prototype;
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var objectCtorString = funcToString.call(Object);
        function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
                return true;
            }
            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        module.exports = isPlainObject;
    }),
    "./node_modules/lodash/isSymbol.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"), isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
        var symbolTag = '[object Symbol]';
        function isSymbol(value) {
            return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        module.exports = isSymbol;
    }),
    "./node_modules/lodash/isTypedArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseIsTypedArray = __webpack_require__("./node_modules/lodash/_baseIsTypedArray.js"), baseUnary = __webpack_require__("./node_modules/lodash/_baseUnary.js"), nodeUtil = __webpack_require__("./node_modules/lodash/_nodeUtil.js");
        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        module.exports = isTypedArray;
    }),
    "./node_modules/lodash/keys.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var arrayLikeKeys = __webpack_require__("./node_modules/lodash/_arrayLikeKeys.js"), baseKeys = __webpack_require__("./node_modules/lodash/_baseKeys.js"), isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js");
        function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        module.exports = keys;
    }),
    "./node_modules/lodash/keysIn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var arrayLikeKeys = __webpack_require__("./node_modules/lodash/_arrayLikeKeys.js"), baseKeysIn = __webpack_require__("./node_modules/lodash/_baseKeysIn.js"), isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js");
        function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        module.exports = keysIn;
    }),
    "./node_modules/lodash/mapValues.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseAssignValue = __webpack_require__("./node_modules/lodash/_baseAssignValue.js"), baseForOwn = __webpack_require__("./node_modules/lodash/_baseForOwn.js"), baseIteratee = __webpack_require__("./node_modules/lodash/_baseIteratee.js");
        function mapValues(object, iteratee) {
            var result = {};
            iteratee = baseIteratee(iteratee, 3);
            baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        }
        module.exports = mapValues;
    }),
    "./node_modules/lodash/memoize.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var MapCache = __webpack_require__("./node_modules/lodash/_MapCache.js");
        var FUNC_ERROR_TEXT = 'Expected a function';
        function memoize(func, resolver) {
            if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function memoized() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) {
                    return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
        }
        memoize.Cache = MapCache;
        module.exports = memoize;
    }),
    "./node_modules/lodash/merge.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseMerge = __webpack_require__("./node_modules/lodash/_baseMerge.js"), createAssigner = __webpack_require__("./node_modules/lodash/_createAssigner.js");
        var merge = createAssigner(function (object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        module.exports = merge;
    }),
    "./node_modules/lodash/property.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseProperty = __webpack_require__("./node_modules/lodash/_baseProperty.js"), basePropertyDeep = __webpack_require__("./node_modules/lodash/_basePropertyDeep.js"), isKey = __webpack_require__("./node_modules/lodash/_isKey.js"), toKey = __webpack_require__("./node_modules/lodash/_toKey.js");
        function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        module.exports = property;
    }),
    "./node_modules/lodash/stubArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function stubArray() {
            return [];
        }
        module.exports = stubArray;
    }),
    "./node_modules/lodash/stubFalse.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function stubFalse() {
            return false;
        }
        module.exports = stubFalse;
    }),
    "./node_modules/lodash/toPath.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"), copyArray = __webpack_require__("./node_modules/lodash/_copyArray.js"), isArray = __webpack_require__("./node_modules/lodash/isArray.js"), isSymbol = __webpack_require__("./node_modules/lodash/isSymbol.js"), stringToPath = __webpack_require__("./node_modules/lodash/_stringToPath.js"), toKey = __webpack_require__("./node_modules/lodash/_toKey.js"), toString = __webpack_require__("./node_modules/lodash/toString.js");
        function toPath(value) {
            if (isArray(value)) {
                return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        module.exports = toPath;
    }),
    "./node_modules/lodash/toPlainObject.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var copyObject = __webpack_require__("./node_modules/lodash/_copyObject.js"), keysIn = __webpack_require__("./node_modules/lodash/keysIn.js");
        function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        module.exports = toPlainObject;
    }),
    "./node_modules/lodash/toString.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var baseToString = __webpack_require__("./node_modules/lodash/_baseToString.js");
        function toString(value) {
            return value == null ? '' : baseToString(value);
        }
        module.exports = toString;
    }),
    "./node_modules/mini-create-react-context/dist/esm/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        (function (global) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _react = __webpack_require__("./node_modules/react/index.js");
            var _react2 = _interopRequireDefault(_react);
            var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
            var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
            var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
            var _propTypes2 = _interopRequireDefault(_propTypes);
            var _tinyWarning = __webpack_require__("./node_modules/tiny-warning/dist/tiny-warning.esm.js");
            var _tinyWarning2 = _interopRequireDefault(_tinyWarning);
            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
            var MAX_SIGNED_31_BIT_INT = 1073741823;
            var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};
            function getUniqueId() {
                var key = '__global_unique_id__';
                return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
            }
            function objectIs(x, y) {
                if (x === y) {
                    return x !== 0 || 1 / x === 1 / y;
                }
                else {
                    return x !== x && y !== y;
                }
            }
            function createEventEmitter(value) {
                var handlers = [];
                return {
                    on: function on(handler) {
                        handlers.push(handler);
                    },
                    off: function off(handler) {
                        handlers = handlers.filter(function (h) {
                            return h !== handler;
                        });
                    },
                    get: function get() {
                        return value;
                    },
                    set: function set(newValue, changedBits) {
                        value = newValue;
                        handlers.forEach(function (handler) {
                            return handler(value, changedBits);
                        });
                    }
                };
            }
            function onlyChild(children) {
                return Array.isArray(children) ? children[0] : children;
            }
            function createReactContext(defaultValue, calculateChangedBits) {
                var _Provider$childContex, _Consumer$contextType;
                var contextProp = '__create-react-context-' + getUniqueId() + '__';
                var Provider = function (_Component) {
                    (0, _inheritsLoose3.default)(Provider, _Component);
                    function Provider() {
                        var _this;
                        _this = _Component.apply(this, arguments) || this;
                        _this.emitter = createEventEmitter(_this.props.value);
                        return _this;
                    }
                    var _proto = Provider.prototype;
                    _proto.getChildContext = function getChildContext() {
                        var _ref;
                        return _ref = {}, _ref[contextProp] = this.emitter, _ref;
                    };
                    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                        if (this.props.value !== nextProps.value) {
                            var oldValue = this.props.value;
                            var newValue = nextProps.value;
                            var changedBits;
                            if (objectIs(oldValue, newValue)) {
                                changedBits = 0;
                            }
                            else {
                                changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                                if (true) {
                                    (0, _tinyWarning2.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
                                }
                                changedBits |= 0;
                                if (changedBits !== 0) {
                                    this.emitter.set(nextProps.value, changedBits);
                                }
                            }
                        }
                    };
                    _proto.render = function render() {
                        return this.props.children;
                    };
                    return Provider;
                }(_react.Component);
                Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);
                var Consumer = function (_Component2) {
                    (0, _inheritsLoose3.default)(Consumer, _Component2);
                    function Consumer() {
                        var _this2;
                        _this2 = _Component2.apply(this, arguments) || this;
                        _this2.state = {
                            value: _this2.getValue()
                        };
                        _this2.onUpdate = function (newValue, changedBits) {
                            var observedBits = _this2.observedBits | 0;
                            if ((observedBits & changedBits) !== 0) {
                                _this2.setState({
                                    value: _this2.getValue()
                                });
                            }
                        };
                        return _this2;
                    }
                    var _proto2 = Consumer.prototype;
                    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                        var observedBits = nextProps.observedBits;
                        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
                    };
                    _proto2.componentDidMount = function componentDidMount() {
                        if (this.context[contextProp]) {
                            this.context[contextProp].on(this.onUpdate);
                        }
                        var observedBits = this.props.observedBits;
                        this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
                    };
                    _proto2.componentWillUnmount = function componentWillUnmount() {
                        if (this.context[contextProp]) {
                            this.context[contextProp].off(this.onUpdate);
                        }
                    };
                    _proto2.getValue = function getValue() {
                        if (this.context[contextProp]) {
                            return this.context[contextProp].get();
                        }
                        else {
                            return defaultValue;
                        }
                    };
                    _proto2.render = function render() {
                        return onlyChild(this.props.children)(this.state.value);
                    };
                    return Consumer;
                }(_react.Component);
                Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);
                return {
                    Provider: Provider,
                    Consumer: Consumer
                };
            }
            var index = _react2.default.createContext || createReactContext;
            exports.default = index;
        }.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")));
    }),
    "./node_modules/object-assign/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;
        function toObject(val) {
            if (val === null || val === undefined) {
                throw new TypeError('Object.assign cannot be called with null or undefined');
            }
            return Object(val);
        }
        function shouldUseNative() {
            try {
                if (!Object.assign) {
                    return false;
                }
                var test1 = new String('abc');
                test1[5] = 'de';
                if (Object.getOwnPropertyNames(test1)[0] === '5') {
                    return false;
                }
                var test2 = {};
                for (var i = 0; i < 10; i++) {
                    test2['_' + String.fromCharCode(i)] = i;
                }
                var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                    return test2[n];
                });
                if (order2.join('') !== '0123456789') {
                    return false;
                }
                var test3 = {};
                'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                    test3[letter] = letter;
                });
                if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
                    return false;
                }
                return true;
            }
            catch (err) {
                return false;
            }
        }
        module.exports = shouldUseNative() ? Object.assign : function (target, source) {
            var from;
            var to = toObject(target);
            var symbols;
            for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);
                for (var key in from) {
                    if (hasOwnProperty.call(from, key)) {
                        to[key] = from[key];
                    }
                }
                if (getOwnPropertySymbols) {
                    symbols = getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                        if (propIsEnumerable.call(from, symbols[i])) {
                            to[symbols[i]] = from[symbols[i]];
                        }
                    }
                }
            }
            return to;
        };
    }),
    "./node_modules/path-to-regexp/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var isarray = __webpack_require__("./node_modules/path-to-regexp/node_modules/isarray/index.js");
        module.exports = pathToRegexp;
        module.exports.parse = parse;
        module.exports.compile = compile;
        module.exports.tokensToFunction = tokensToFunction;
        module.exports.tokensToRegExp = tokensToRegExp;
        var PATH_REGEXP = new RegExp([
            '(\\\\.)',
            '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
        ].join('|'), 'g');
        function parse(str, options) {
            var tokens = [];
            var key = 0;
            var index = 0;
            var path = '';
            var defaultDelimiter = options && options.delimiter || '/';
            var res;
            while ((res = PATH_REGEXP.exec(str)) != null) {
                var m = res[0];
                var escaped = res[1];
                var offset = res.index;
                path += str.slice(index, offset);
                index = offset + m.length;
                if (escaped) {
                    path += escaped[1];
                    continue;
                }
                var next = str[index];
                var prefix = res[2];
                var name = res[3];
                var capture = res[4];
                var group = res[5];
                var modifier = res[6];
                var asterisk = res[7];
                if (path) {
                    tokens.push(path);
                    path = '';
                }
                var partial = prefix != null && next != null && next !== prefix;
                var repeat = modifier === '+' || modifier === '*';
                var optional = modifier === '?' || modifier === '*';
                var delimiter = res[2] || defaultDelimiter;
                var pattern = capture || group;
                tokens.push({
                    name: name || key++,
                    prefix: prefix || '',
                    delimiter: delimiter,
                    optional: optional,
                    repeat: repeat,
                    partial: partial,
                    asterisk: !!asterisk,
                    pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
                });
            }
            if (index < str.length) {
                path += str.substr(index);
            }
            if (path) {
                tokens.push(path);
            }
            return tokens;
        }
        function compile(str, options) {
            return tokensToFunction(parse(str, options), options);
        }
        function encodeURIComponentPretty(str) {
            return encodeURI(str).replace(/[\/?#]/g, function (c) {
                return '%' + c.charCodeAt(0).toString(16).toUpperCase();
            });
        }
        function encodeAsterisk(str) {
            return encodeURI(str).replace(/[?#]/g, function (c) {
                return '%' + c.charCodeAt(0).toString(16).toUpperCase();
            });
        }
        function tokensToFunction(tokens, options) {
            var matches = new Array(tokens.length);
            for (var i = 0; i < tokens.length; i++) {
                if (_typeof(tokens[i]) === 'object') {
                    matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
                }
            }
            return function (obj, opts) {
                var path = '';
                var data = obj || {};
                var options = opts || {};
                var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;
                for (var i = 0; i < tokens.length; i++) {
                    var token = tokens[i];
                    if (typeof token === 'string') {
                        path += token;
                        continue;
                    }
                    var value = data[token.name];
                    var segment;
                    if (value == null) {
                        if (token.optional) {
                            if (token.partial) {
                                path += token.prefix;
                            }
                            continue;
                        }
                        else {
                            throw new TypeError('Expected "' + token.name + '" to be defined');
                        }
                    }
                    if (isarray(value)) {
                        if (!token.repeat) {
                            throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
                        }
                        if (value.length === 0) {
                            if (token.optional) {
                                continue;
                            }
                            else {
                                throw new TypeError('Expected "' + token.name + '" to not be empty');
                            }
                        }
                        for (var j = 0; j < value.length; j++) {
                            segment = encode(value[j]);
                            if (!matches[i].test(segment)) {
                                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
                            }
                            path += (j === 0 ? token.prefix : token.delimiter) + segment;
                        }
                        continue;
                    }
                    segment = token.asterisk ? encodeAsterisk(value) : encode(value);
                    if (!matches[i].test(segment)) {
                        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
                    }
                    path += token.prefix + segment;
                }
                return path;
            };
        }
        function escapeString(str) {
            return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
        }
        function escapeGroup(group) {
            return group.replace(/([=!:$\/()])/g, '\\$1');
        }
        function attachKeys(re, keys) {
            re.keys = keys;
            return re;
        }
        function flags(options) {
            return options && options.sensitive ? '' : 'i';
        }
        function regexpToRegexp(path, keys) {
            var groups = path.source.match(/\((?!\?)/g);
            if (groups) {
                for (var i = 0; i < groups.length; i++) {
                    keys.push({
                        name: i,
                        prefix: null,
                        delimiter: null,
                        optional: false,
                        repeat: false,
                        partial: false,
                        asterisk: false,
                        pattern: null
                    });
                }
            }
            return attachKeys(path, keys);
        }
        function arrayToRegexp(path, keys, options) {
            var parts = [];
            for (var i = 0; i < path.length; i++) {
                parts.push(pathToRegexp(path[i], keys, options).source);
            }
            var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
            return attachKeys(regexp, keys);
        }
        function stringToRegexp(path, keys, options) {
            return tokensToRegExp(parse(path, options), keys, options);
        }
        function tokensToRegExp(tokens, keys, options) {
            if (!isarray(keys)) {
                options = keys || options;
                keys = [];
            }
            options = options || {};
            var strict = options.strict;
            var end = options.end !== false;
            var route = '';
            for (var i = 0; i < tokens.length; i++) {
                var token = tokens[i];
                if (typeof token === 'string') {
                    route += escapeString(token);
                }
                else {
                    var prefix = escapeString(token.prefix);
                    var capture = '(?:' + token.pattern + ')';
                    keys.push(token);
                    if (token.repeat) {
                        capture += '(?:' + prefix + capture + ')*';
                    }
                    if (token.optional) {
                        if (!token.partial) {
                            capture = '(?:' + prefix + '(' + capture + '))?';
                        }
                        else {
                            capture = prefix + '(' + capture + ')?';
                        }
                    }
                    else {
                        capture = prefix + '(' + capture + ')';
                    }
                    route += capture;
                }
            }
            var delimiter = escapeString(options.delimiter || '/');
            var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
            if (!strict) {
                route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
            }
            if (end) {
                route += '$';
            }
            else {
                route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
            }
            return attachKeys(new RegExp('^' + route, flags(options)), keys);
        }
        function pathToRegexp(path, keys, options) {
            if (!isarray(keys)) {
                options = keys || options;
                keys = [];
            }
            options = options || {};
            if (path instanceof RegExp) {
                return regexpToRegexp(path, keys);
            }
            if (isarray(path)) {
                return arrayToRegexp(path, keys, options);
            }
            return stringToRegexp(path, keys, options);
        }
    }),
    "./node_modules/path-to-regexp/node_modules/isarray/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        module.exports = Array.isArray || function (arr) {
            return Object.prototype.toString.call(arr) == '[object Array]';
        };
    }),
    "./node_modules/prop-types/checkPropTypes.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var printWarning = function printWarning() { };
        if (true) {
            var ReactPropTypesSecret = __webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");
            var loggedTypeFailures = {};
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            printWarning = function printWarning(text) {
                var message = 'Warning: ' + text;
                if (typeof console !== 'undefined') {
                    console.error(message);
                }
                try {
                    throw new Error(message);
                }
                catch (x) { }
            };
        }
        function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
            if (true) {
                for (var typeSpecName in typeSpecs) {
                    if (has(typeSpecs, typeSpecName)) {
                        var error;
                        try {
                            if (typeof typeSpecs[typeSpecName] !== 'function') {
                                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof(typeSpecs[typeSpecName]) + '`.');
                                err.name = 'Invariant Violation';
                                throw err;
                            }
                            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                        }
                        catch (ex) {
                            error = ex;
                        }
                        if (error && !(error instanceof Error)) {
                            printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + (typeof error === 'undefined' ? 'undefined' : _typeof(error)) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
                        }
                        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                            loggedTypeFailures[error.message] = true;
                            var stack = getStack ? getStack() : '';
                            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
                        }
                    }
                }
            }
        }
        checkPropTypes.resetWarningCache = function () {
            if (true) {
                loggedTypeFailures = {};
            }
        };
        module.exports = checkPropTypes;
    }),
    "./node_modules/prop-types/factoryWithTypeCheckers.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var ReactIs = __webpack_require__("./node_modules/react-is/index.js");
        var assign = __webpack_require__("./node_modules/object-assign/index.js");
        var ReactPropTypesSecret = __webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");
        var checkPropTypes = __webpack_require__("./node_modules/prop-types/checkPropTypes.js");
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        var printWarning = function printWarning() { };
        if (true) {
            printWarning = function printWarning(text) {
                var message = 'Warning: ' + text;
                if (typeof console !== 'undefined') {
                    console.error(message);
                }
                try {
                    throw new Error(message);
                }
                catch (x) { }
            };
        }
        function emptyFunctionThatReturnsNull() {
            return null;
        }
        module.exports = function (isValidElement, throwOnDirectAccess) {
            var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = '@@iterator';
            function getIteratorFn(maybeIterable) {
                var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
                if (typeof iteratorFn === 'function') {
                    return iteratorFn;
                }
            }
            var ANONYMOUS = '<<anonymous>>';
            var ReactPropTypes = {
                array: createPrimitiveTypeChecker('array'),
                bool: createPrimitiveTypeChecker('boolean'),
                func: createPrimitiveTypeChecker('function'),
                number: createPrimitiveTypeChecker('number'),
                object: createPrimitiveTypeChecker('object'),
                string: createPrimitiveTypeChecker('string'),
                symbol: createPrimitiveTypeChecker('symbol'),
                any: createAnyTypeChecker(),
                arrayOf: createArrayOfTypeChecker,
                element: createElementTypeChecker(),
                elementType: createElementTypeTypeChecker(),
                instanceOf: createInstanceTypeChecker,
                node: createNodeChecker(),
                objectOf: createObjectOfTypeChecker,
                oneOf: createEnumTypeChecker,
                oneOfType: createUnionTypeChecker,
                shape: createShapeTypeChecker,
                exact: createStrictShapeTypeChecker
            };
            function is(x, y) {
                if (x === y) {
                    return x !== 0 || 1 / x === 1 / y;
                }
                else {
                    return x !== x && y !== y;
                }
            }
            function PropTypeError(message) {
                this.message = message;
                this.stack = '';
            }
            PropTypeError.prototype = Error.prototype;
            function createChainableTypeChecker(validate) {
                if (true) {
                    var manualPropTypeCallCache = {};
                    var manualPropTypeWarningCount = 0;
                }
                function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                    componentName = componentName || ANONYMOUS;
                    propFullName = propFullName || propName;
                    if (secret !== ReactPropTypesSecret) {
                        if (throwOnDirectAccess) {
                            var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
                            err.name = 'Invariant Violation';
                            throw err;
                        }
                        else if (true && typeof console !== 'undefined') {
                            var cacheKey = componentName + ':' + propName;
                            if (!manualPropTypeCallCache[cacheKey] &&
                                manualPropTypeWarningCount < 3) {
                                printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                                manualPropTypeCallCache[cacheKey] = true;
                                manualPropTypeWarningCount++;
                            }
                        }
                    }
                    if (props[propName] == null) {
                        if (isRequired) {
                            if (props[propName] === null) {
                                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                            }
                            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                        }
                        return null;
                    }
                    else {
                        return validate(props, propName, componentName, location, propFullName);
                    }
                }
                var chainedCheckType = checkType.bind(null, false);
                chainedCheckType.isRequired = checkType.bind(null, true);
                return chainedCheckType;
            }
            function createPrimitiveTypeChecker(expectedType) {
                function validate(props, propName, componentName, location, propFullName, secret) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== expectedType) {
                        var preciseType = getPreciseType(propValue);
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createAnyTypeChecker() {
                return createChainableTypeChecker(emptyFunctionThatReturnsNull);
            }
            function createArrayOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                    if (typeof typeChecker !== 'function') {
                        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
                    }
                    var propValue = props[propName];
                    if (!Array.isArray(propValue)) {
                        var propType = getPropType(propValue);
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
                    }
                    for (var i = 0; i < propValue.length; i++) {
                        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                        if (error instanceof Error) {
                            return error;
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createElementTypeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    if (!isValidElement(propValue)) {
                        var propType = getPropType(propValue);
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createElementTypeTypeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    if (!ReactIs.isValidElementType(propValue)) {
                        var propType = getPropType(propValue);
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createInstanceTypeChecker(expectedClass) {
                function validate(props, propName, componentName, location, propFullName) {
                    if (!(props[propName] instanceof expectedClass)) {
                        var expectedClassName = expectedClass.name || ANONYMOUS;
                        var actualClassName = getClassName(props[propName]);
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createEnumTypeChecker(expectedValues) {
                if (!Array.isArray(expectedValues)) {
                    if (true) {
                        if (arguments.length > 1) {
                            printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                        }
                        else {
                            printWarning('Invalid argument supplied to oneOf, expected an array.');
                        }
                    }
                    return emptyFunctionThatReturnsNull;
                }
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    for (var i = 0; i < expectedValues.length; i++) {
                        if (is(propValue, expectedValues[i])) {
                            return null;
                        }
                    }
                    var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                        var type = getPreciseType(value);
                        if (type === 'symbol') {
                            return String(value);
                        }
                        return value;
                    });
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
                }
                return createChainableTypeChecker(validate);
            }
            function createObjectOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                    if (typeof typeChecker !== 'function') {
                        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
                    }
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== 'object') {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
                    }
                    for (var key in propValue) {
                        if (has(propValue, key)) {
                            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                            if (error instanceof Error) {
                                return error;
                            }
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createUnionTypeChecker(arrayOfTypeCheckers) {
                if (!Array.isArray(arrayOfTypeCheckers)) {
                    true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;
                    return emptyFunctionThatReturnsNull;
                }
                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (typeof checker !== 'function') {
                        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                        return emptyFunctionThatReturnsNull;
                    }
                }
                function validate(props, propName, componentName, location, propFullName) {
                    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                        var checker = arrayOfTypeCheckers[i];
                        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                            return null;
                        }
                    }
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
                }
                return createChainableTypeChecker(validate);
            }
            function createNodeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                    if (!isNode(props[propName])) {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== 'object') {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                    }
                    for (var key in shapeTypes) {
                        var checker = shapeTypes[key];
                        if (!checker) {
                            continue;
                        }
                        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                        if (error) {
                            return error;
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createStrictShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== 'object') {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                    }
                    var allKeys = assign({}, props[propName], shapeTypes);
                    for (var key in allKeys) {
                        var checker = shapeTypes[key];
                        if (!checker) {
                            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                        }
                        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                        if (error) {
                            return error;
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function isNode(propValue) {
                switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
                    case 'number':
                    case 'string':
                    case 'undefined':
                        return true;
                    case 'boolean':
                        return !propValue;
                    case 'object':
                        if (Array.isArray(propValue)) {
                            return propValue.every(isNode);
                        }
                        if (propValue === null || isValidElement(propValue)) {
                            return true;
                        }
                        var iteratorFn = getIteratorFn(propValue);
                        if (iteratorFn) {
                            var iterator = iteratorFn.call(propValue);
                            var step;
                            if (iteratorFn !== propValue.entries) {
                                while (!(step = iterator.next()).done) {
                                    if (!isNode(step.value)) {
                                        return false;
                                    }
                                }
                            }
                            else {
                                while (!(step = iterator.next()).done) {
                                    var entry = step.value;
                                    if (entry) {
                                        if (!isNode(entry[1])) {
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            return false;
                        }
                        return true;
                    default:
                        return false;
                }
            }
            function isSymbol(propType, propValue) {
                if (propType === 'symbol') {
                    return true;
                }
                if (!propValue) {
                    return false;
                }
                if (propValue['@@toStringTag'] === 'Symbol') {
                    return true;
                }
                if (typeof Symbol === 'function' && propValue instanceof Symbol) {
                    return true;
                }
                return false;
            }
            function getPropType(propValue) {
                var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
                if (Array.isArray(propValue)) {
                    return 'array';
                }
                if (propValue instanceof RegExp) {
                    return 'object';
                }
                if (isSymbol(propType, propValue)) {
                    return 'symbol';
                }
                return propType;
            }
            function getPreciseType(propValue) {
                if (typeof propValue === 'undefined' || propValue === null) {
                    return '' + propValue;
                }
                var propType = getPropType(propValue);
                if (propType === 'object') {
                    if (propValue instanceof Date) {
                        return 'date';
                    }
                    else if (propValue instanceof RegExp) {
                        return 'regexp';
                    }
                }
                return propType;
            }
            function getPostfixForTypeWarning(value) {
                var type = getPreciseType(value);
                switch (type) {
                    case 'array':
                    case 'object':
                        return 'an ' + type;
                    case 'boolean':
                    case 'date':
                    case 'regexp':
                        return 'a ' + type;
                    default:
                        return type;
                }
            }
            function getClassName(propValue) {
                if (!propValue.constructor || !propValue.constructor.name) {
                    return ANONYMOUS;
                }
                return propValue.constructor.name;
            }
            ReactPropTypes.checkPropTypes = checkPropTypes;
            ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
            ReactPropTypes.PropTypes = ReactPropTypes;
            return ReactPropTypes;
        };
    }),
    "./node_modules/prop-types/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        if (true) {
            var ReactIs = __webpack_require__("./node_modules/react-is/index.js");
            var throwOnDirectAccess = true;
            module.exports = __webpack_require__("./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
        }
        else { }
    }),
    "./node_modules/prop-types/lib/ReactPropTypesSecret.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
        module.exports = ReactPropTypesSecret;
    }),
    "./node_modules/react-dom/cjs/react-dom.development.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        if (true) {
            (function () {
                'use strict';
                var React = __webpack_require__("./node_modules/react/index.js");
                var _assign = __webpack_require__("./node_modules/object-assign/index.js");
                var Scheduler = __webpack_require__("./node_modules/scheduler/index.js");
                var checkPropTypes = __webpack_require__("./node_modules/prop-types/checkPropTypes.js");
                var tracing = __webpack_require__("./node_modules/scheduler/tracing.js");
                var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
                if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
                    ReactSharedInternals.ReactCurrentDispatcher = { current: null };
                }
                if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
                    ReactSharedInternals.ReactCurrentBatchConfig = { suspense: null };
                }
                function warn(format) { {
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                    }
                    printWarning('warn', format, args);
                } }
                function error(format) { {
                    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                        args[_key2 - 1] = arguments[_key2];
                    }
                    printWarning('error', format, args);
                } }
                function printWarning(level, format, args) {
                    {
                        var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;
                        if (!hasExistingStack) {
                            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                            var stack = ReactDebugCurrentFrame.getStackAddendum();
                            if (stack !== '') {
                                format += '%s';
                                args = args.concat([stack]);
                            }
                        }
                        var argsWithFormat = args.map(function (item) { return '' + item; });
                        argsWithFormat.unshift('Warning: ' + format);
                        Function.prototype.apply.call(console[level], console, argsWithFormat);
                        try {
                            var argIndex = 0;
                            var message = 'Warning: ' + format.replace(/%s/g, function () { return args[argIndex++]; });
                            throw new Error(message);
                        }
                        catch (x) { }
                    }
                }
                if (!React) {
                    {
                        throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
                    }
                }
                var invokeGuardedCallbackImpl = function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) { var funcArgs = Array.prototype.slice.call(arguments, 3); try {
                    func.apply(context, funcArgs);
                }
                catch (error) {
                    this.onError(error);
                } };
                {
                    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
                        var fakeNode = document.createElement('react');
                        var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                            if (!(typeof document !== 'undefined')) {
                                {
                                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                                }
                            }
                            var evt = document.createEvent('Event');
                            var didError = true;
                            var windowEvent = window.event;
                            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
                            var funcArgs = Array.prototype.slice.call(arguments, 3);
                            function callCallback() {
                                fakeNode.removeEventListener(evtType, callCallback, false);
                                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                                    window.event = windowEvent;
                                }
                                func.apply(context, funcArgs);
                                didError = false;
                            }
                            var error;
                            var didSetError = false;
                            var isCrossOriginError = false;
                            function handleWindowError(event) {
                                error = event.error;
                                didSetError = true;
                                if (error === null && event.colno === 0 && event.lineno === 0) {
                                    isCrossOriginError = true;
                                }
                                if (event.defaultPrevented) {
                                    if (error != null && (typeof error === 'undefined' ? 'undefined' : _typeof(error)) === 'object') {
                                        try {
                                            error._suppressLogging = true;
                                        }
                                        catch (inner) {
                                        }
                                    }
                                }
                            }
                            var evtType = "react-" + (name ? name : 'invokeguardedcallback');
                            window.addEventListener('error', handleWindowError);
                            fakeNode.addEventListener(evtType, callCallback, false);
                            evt.initEvent(evtType, false, false);
                            fakeNode.dispatchEvent(evt);
                            if (windowEventDescriptor) {
                                Object.defineProperty(window, 'event', windowEventDescriptor);
                            }
                            if (didError) {
                                if (!didSetError) {
                                    error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
                                }
                                else if (isCrossOriginError) {
                                    error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
                                }
                                this.onError(error);
                            }
                            window.removeEventListener('error', handleWindowError);
                        };
                        invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
                    }
                }
                var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
                var hasError = false;
                var caughtError = null;
                var hasRethrowError = false;
                var rethrowError = null;
                var reporter = { onError: function onError(error) { hasError = true; caughtError = error; } };
                function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) { hasError = false; caughtError = null; invokeGuardedCallbackImpl$1.apply(reporter, arguments); }
                function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) { invokeGuardedCallback.apply(this, arguments); if (hasError) {
                    var error = clearCaughtError();
                    if (!hasRethrowError) {
                        hasRethrowError = true;
                        rethrowError = error;
                    }
                } }
                function rethrowCaughtError() { if (hasRethrowError) {
                    var error = rethrowError;
                    hasRethrowError = false;
                    rethrowError = null;
                    throw error;
                } }
                function hasCaughtError() { return hasError; }
                function clearCaughtError() { if (hasError) {
                    var error = caughtError;
                    hasError = false;
                    caughtError = null;
                    return error;
                }
                else {
                    {
                        {
                            throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                } }
                var getFiberCurrentPropsFromNode = null;
                var getInstanceFromNode = null;
                var getNodeFromInstance = null;
                function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) { getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl; getInstanceFromNode = getInstanceFromNodeImpl; getNodeFromInstance = getNodeFromInstanceImpl; {
                    if (!getNodeFromInstance || !getInstanceFromNode) {
                        error('EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
                    }
                } }
                var validateEventDispatches;
                {
                    validateEventDispatches = function validateEventDispatches(event) { var dispatchListeners = event._dispatchListeners; var dispatchInstances = event._dispatchInstances; var listenersIsArr = Array.isArray(dispatchListeners); var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0; var instancesIsArr = Array.isArray(dispatchInstances); var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0; if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
                        error('EventPluginUtils: Invalid `event`.');
                    } };
                }
                function executeDispatch(event, listener, inst) { var type = event.type || 'unknown-event'; event.currentTarget = getNodeFromInstance(inst); invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event); event.currentTarget = null; }
                function executeDispatchesInOrder(event) {
                    var dispatchListeners = event._dispatchListeners;
                    var dispatchInstances = event._dispatchInstances;
                    {
                        validateEventDispatches(event);
                    }
                    if (Array.isArray(dispatchListeners)) {
                        for (var i = 0; i < dispatchListeners.length; i++) {
                            if (event.isPropagationStopped()) {
                                break;
                            }
                            executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
                        }
                    }
                    else if (dispatchListeners) {
                        executeDispatch(event, dispatchListeners, dispatchInstances);
                    }
                    event._dispatchListeners = null;
                    event._dispatchInstances = null;
                }
                var FunctionComponent = 0;
                var ClassComponent = 1;
                var IndeterminateComponent = 2;
                var HostRoot = 3;
                var HostPortal = 4;
                var HostComponent = 5;
                var HostText = 6;
                var Fragment = 7;
                var Mode = 8;
                var ContextConsumer = 9;
                var ContextProvider = 10;
                var ForwardRef = 11;
                var Profiler = 12;
                var SuspenseComponent = 13;
                var MemoComponent = 14;
                var SimpleMemoComponent = 15;
                var LazyComponent = 16;
                var IncompleteClassComponent = 17;
                var DehydratedFragment = 18;
                var SuspenseListComponent = 19;
                var FundamentalComponent = 20;
                var ScopeComponent = 21;
                var Block = 22;
                var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
                function describeComponentFrame(name, source, ownerName) {
                    var sourceInfo = '';
                    if (source) {
                        var path = source.fileName;
                        var fileName = path.replace(BEFORE_SLASH_RE, '');
                        {
                            if (/^index\./.test(fileName)) {
                                var match = path.match(BEFORE_SLASH_RE);
                                if (match) {
                                    var pathBeforeSlash = match[1];
                                    if (pathBeforeSlash) {
                                        var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                                        fileName = folderName + '/' + fileName;
                                    }
                                }
                            }
                        }
                        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
                    }
                    else if (ownerName) {
                        sourceInfo = ' (created by ' + ownerName + ')';
                    }
                    return '\n    in ' + (name || 'Unknown') + sourceInfo;
                }
                var hasSymbol = typeof Symbol === 'function' && Symbol.for;
                var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
                var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
                var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
                var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
                var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
                var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
                var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
                var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
                var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
                var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
                var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
                var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
                var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
                var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
                var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = '@@iterator';
                function getIteratorFn(maybeIterable) { if (maybeIterable === null || (typeof maybeIterable === 'undefined' ? 'undefined' : _typeof(maybeIterable)) !== 'object') {
                    return null;
                } var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]; if (typeof maybeIterator === 'function') {
                    return maybeIterator;
                } return null; }
                var Uninitialized = -1;
                var Pending = 0;
                var Resolved = 1;
                var Rejected = 2;
                function refineResolvedLazyComponent(lazyComponent) { return lazyComponent._status === Resolved ? lazyComponent._result : null; }
                function initializeLazyComponentType(lazyComponent) { if (lazyComponent._status === Uninitialized) {
                    lazyComponent._status = Pending;
                    var ctor = lazyComponent._ctor;
                    var thenable = ctor();
                    lazyComponent._result = thenable;
                    thenable.then(function (moduleObject) { if (lazyComponent._status === Pending) {
                        var defaultExport = moduleObject.default;
                        {
                            if (defaultExport === undefined) {
                                error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                            }
                        }
                        lazyComponent._status = Resolved;
                        lazyComponent._result = defaultExport;
                    } }, function (error) { if (lazyComponent._status === Pending) {
                        lazyComponent._status = Rejected;
                        lazyComponent._result = error;
                    } });
                } }
                function getWrappedName(outerType, innerType, wrapperName) { var functionName = innerType.displayName || innerType.name || ''; return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName); }
                function getComponentName(type) {
                    if (type == null) {
                        return null;
                    }
                    {
                        if (typeof type.tag === 'number') {
                            error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
                        }
                    }
                    if (typeof type === 'function') {
                        return type.displayName || type.name || null;
                    }
                    if (typeof type === 'string') {
                        return type;
                    }
                    switch (type) {
                        case REACT_FRAGMENT_TYPE: return 'Fragment';
                        case REACT_PORTAL_TYPE: return 'Portal';
                        case REACT_PROFILER_TYPE: return "Profiler";
                        case REACT_STRICT_MODE_TYPE: return 'StrictMode';
                        case REACT_SUSPENSE_TYPE: return 'Suspense';
                        case REACT_SUSPENSE_LIST_TYPE: return 'SuspenseList';
                    }
                    if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {
                        switch (type.$$typeof) {
                            case REACT_CONTEXT_TYPE: return 'Context.Consumer';
                            case REACT_PROVIDER_TYPE: return 'Context.Provider';
                            case REACT_FORWARD_REF_TYPE: return getWrappedName(type, type.render, 'ForwardRef');
                            case REACT_MEMO_TYPE: return getComponentName(type.type);
                            case REACT_BLOCK_TYPE: return getComponentName(type.render);
                            case REACT_LAZY_TYPE: {
                                var thenable = type;
                                var resolvedThenable = refineResolvedLazyComponent(thenable);
                                if (resolvedThenable) {
                                    return getComponentName(resolvedThenable);
                                }
                                break;
                            }
                        }
                    }
                    return null;
                }
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                function describeFiber(fiber) { switch (fiber.tag) {
                    case HostRoot:
                    case HostPortal:
                    case HostText:
                    case Fragment:
                    case ContextProvider:
                    case ContextConsumer: return '';
                    default:
                        var owner = fiber._debugOwner;
                        var source = fiber._debugSource;
                        var name = getComponentName(fiber.type);
                        var ownerName = null;
                        if (owner) {
                            ownerName = getComponentName(owner.type);
                        }
                        return describeComponentFrame(name, source, ownerName);
                } }
                function getStackByFiberInDevAndProd(workInProgress) { var info = ''; var node = workInProgress; do {
                    info += describeFiber(node);
                    node = node.return;
                } while (node); return info; }
                var current = null;
                var phase = null;
                function getCurrentFiberOwnerNameInDevOrNull() { {
                    if (current === null) {
                        return null;
                    }
                    var owner = current._debugOwner;
                    if (owner !== null && typeof owner !== 'undefined') {
                        return getComponentName(owner.type);
                    }
                } return null; }
                function getCurrentFiberStackInDev() {
                    {
                        if (current === null) {
                            return '';
                        }
                        return getStackByFiberInDevAndProd(current);
                    }
                }
                function resetCurrentFiber() { {
                    ReactDebugCurrentFrame.getCurrentStack = null;
                    current = null;
                    phase = null;
                } }
                function setCurrentFiber(fiber) { {
                    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
                    current = fiber;
                    phase = null;
                } }
                function setCurrentPhase(lifeCyclePhase) { {
                    phase = lifeCyclePhase;
                } }
                var eventPluginOrder = null;
                var namesToPlugins = {};
                function recomputePluginOrdering() {
                    if (!eventPluginOrder) {
                        return;
                    }
                    for (var pluginName in namesToPlugins) {
                        var pluginModule = namesToPlugins[pluginName];
                        var pluginIndex = eventPluginOrder.indexOf(pluginName);
                        if (!(pluginIndex > -1)) {
                            {
                                throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
                            }
                        }
                        if (plugins[pluginIndex]) {
                            continue;
                        }
                        if (!pluginModule.extractEvents) {
                            {
                                throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
                            }
                        }
                        plugins[pluginIndex] = pluginModule;
                        var publishedEvents = pluginModule.eventTypes;
                        for (var eventName in publishedEvents) {
                            if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
                                {
                                    throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
                                }
                            }
                        }
                    }
                }
                function publishEventForPlugin(dispatchConfig, pluginModule, eventName) { if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
                    {
                        throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
                    }
                } eventNameDispatchConfigs[eventName] = dispatchConfig; var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames; if (phasedRegistrationNames) {
                    for (var phaseName in phasedRegistrationNames) {
                        if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                            var phasedRegistrationName = phasedRegistrationNames[phaseName];
                            publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
                        }
                    }
                    return true;
                }
                else if (dispatchConfig.registrationName) {
                    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
                    return true;
                } return false; }
                function publishRegistrationName(registrationName, pluginModule, eventName) { if (!!registrationNameModules[registrationName]) {
                    {
                        throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
                    }
                } registrationNameModules[registrationName] = pluginModule; registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies; {
                    var lowerCasedName = registrationName.toLowerCase();
                    possibleRegistrationNames[lowerCasedName] = registrationName;
                    if (registrationName === 'onDoubleClick') {
                        possibleRegistrationNames.ondblclick = registrationName;
                    }
                } }
                var plugins = [];
                var eventNameDispatchConfigs = {};
                var registrationNameModules = {};
                var registrationNameDependencies = {};
                var possibleRegistrationNames = {};
                function injectEventPluginOrder(injectedEventPluginOrder) {
                    if (!!eventPluginOrder) {
                        {
                            throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
                        }
                    }
                    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
                    recomputePluginOrdering();
                }
                function injectEventPluginsByName(injectedNamesToPlugins) { var isOrderingDirty = false; for (var pluginName in injectedNamesToPlugins) {
                    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                        continue;
                    }
                    var pluginModule = injectedNamesToPlugins[pluginName];
                    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
                        if (!!namesToPlugins[pluginName]) {
                            {
                                throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
                            }
                        }
                        namesToPlugins[pluginName] = pluginModule;
                        isOrderingDirty = true;
                    }
                } if (isOrderingDirty) {
                    recomputePluginOrdering();
                } }
                var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
                var PLUGIN_EVENT_SYSTEM = 1;
                var IS_REPLAYED = 1 << 5;
                var IS_FIRST_ANCESTOR = 1 << 6;
                var restoreImpl = null;
                var restoreTarget = null;
                var restoreQueue = null;
                function restoreStateOfTarget(target) {
                    var internalInstance = getInstanceFromNode(target);
                    if (!internalInstance) {
                        return;
                    }
                    if (!(typeof restoreImpl === 'function')) {
                        {
                            throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    var stateNode = internalInstance.stateNode;
                    if (stateNode) {
                        var _props = getFiberCurrentPropsFromNode(stateNode);
                        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
                    }
                }
                function setRestoreImplementation(impl) { restoreImpl = impl; }
                function enqueueStateRestore(target) { if (restoreTarget) {
                    if (restoreQueue) {
                        restoreQueue.push(target);
                    }
                    else {
                        restoreQueue = [target];
                    }
                }
                else {
                    restoreTarget = target;
                } }
                function needsStateRestore() { return restoreTarget !== null || restoreQueue !== null; }
                function restoreStateIfNeeded() { if (!restoreTarget) {
                    return;
                } var target = restoreTarget; var queuedTargets = restoreQueue; restoreTarget = null; restoreQueue = null; restoreStateOfTarget(target); if (queuedTargets) {
                    for (var i = 0; i < queuedTargets.length; i++) {
                        restoreStateOfTarget(queuedTargets[i]);
                    }
                } }
                var enableProfilerTimer = true;
                var enableDeprecatedFlareAPI = false;
                var enableFundamentalAPI = false;
                var warnAboutStringRefs = false;
                var batchedUpdatesImpl = function batchedUpdatesImpl(fn, bookkeeping) { return fn(bookkeeping); };
                var discreteUpdatesImpl = function discreteUpdatesImpl(fn, a, b, c, d) { return fn(a, b, c, d); };
                var flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() { };
                var batchedEventUpdatesImpl = batchedUpdatesImpl;
                var isInsideEventHandler = false;
                var isBatchingEventUpdates = false;
                function finishEventHandler() {
                    var controlledComponentsHavePendingUpdates = needsStateRestore();
                    if (controlledComponentsHavePendingUpdates) {
                        flushDiscreteUpdatesImpl();
                        restoreStateIfNeeded();
                    }
                }
                function batchedUpdates(fn, bookkeeping) {
                    if (isInsideEventHandler) {
                        return fn(bookkeeping);
                    }
                    isInsideEventHandler = true;
                    try {
                        return batchedUpdatesImpl(fn, bookkeeping);
                    }
                    finally {
                        isInsideEventHandler = false;
                        finishEventHandler();
                    }
                }
                function batchedEventUpdates(fn, a, b) {
                    if (isBatchingEventUpdates) {
                        return fn(a, b);
                    }
                    isBatchingEventUpdates = true;
                    try {
                        return batchedEventUpdatesImpl(fn, a, b);
                    }
                    finally {
                        isBatchingEventUpdates = false;
                        finishEventHandler();
                    }
                }
                function discreteUpdates(fn, a, b, c, d) { var prevIsInsideEventHandler = isInsideEventHandler; isInsideEventHandler = true; try {
                    return discreteUpdatesImpl(fn, a, b, c, d);
                }
                finally {
                    isInsideEventHandler = prevIsInsideEventHandler;
                    if (!isInsideEventHandler) {
                        finishEventHandler();
                    }
                } }
                function flushDiscreteUpdatesIfNeeded(timeStamp) {
                    if (!isInsideEventHandler && !enableDeprecatedFlareAPI) {
                        flushDiscreteUpdatesImpl();
                    }
                }
                function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) { batchedUpdatesImpl = _batchedUpdatesImpl; discreteUpdatesImpl = _discreteUpdatesImpl; flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl; batchedEventUpdatesImpl = _batchedEventUpdatesImpl; }
                var DiscreteEvent = 0;
                var UserBlockingEvent = 1;
                var ContinuousEvent = 2;
                var RESERVED = 0;
                var STRING = 1;
                var BOOLEANISH_STRING = 2;
                var BOOLEAN = 3;
                var OVERLOADED_BOOLEAN = 4;
                var NUMERIC = 5;
                var POSITIVE_NUMERIC = 6;
                var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
                var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
                var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
                var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var illegalAttributeNameCache = {};
                var validatedAttributeNameCache = {};
                function isAttributeNameSafe(attributeName) { if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
                    return true;
                } if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
                    return false;
                } if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                    validatedAttributeNameCache[attributeName] = true;
                    return true;
                } illegalAttributeNameCache[attributeName] = true; {
                    error('Invalid attribute name: `%s`', attributeName);
                } return false; }
                function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) { if (propertyInfo !== null) {
                    return propertyInfo.type === RESERVED;
                } if (isCustomComponentTag) {
                    return false;
                } if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
                    return true;
                } return false; }
                function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
                    if (propertyInfo !== null && propertyInfo.type === RESERVED) {
                        return false;
                    }
                    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
                        case 'function':
                        case 'symbol':
                            return true;
                        case 'boolean': {
                            if (isCustomComponentTag) {
                                return false;
                            }
                            if (propertyInfo !== null) {
                                return !propertyInfo.acceptsBooleans;
                            }
                            else {
                                var prefix = name.toLowerCase().slice(0, 5);
                                return prefix !== 'data-' && prefix !== 'aria-';
                            }
                        }
                        default: return false;
                    }
                }
                function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) { if (value === null || typeof value === 'undefined') {
                    return true;
                } if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
                    return true;
                } if (isCustomComponentTag) {
                    return false;
                } if (propertyInfo !== null) {
                    switch (propertyInfo.type) {
                        case BOOLEAN: return !value;
                        case OVERLOADED_BOOLEAN: return value === false;
                        case NUMERIC: return isNaN(value);
                        case POSITIVE_NUMERIC: return isNaN(value) || value < 1;
                    }
                } return false; }
                function getPropertyInfo(name) { return properties.hasOwnProperty(name) ? properties[name] : null; }
                function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) { this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN; this.attributeName = attributeName; this.attributeNamespace = attributeNamespace; this.mustUseProperty = mustUseProperty; this.propertyName = name; this.type = type; this.sanitizeURL = sanitizeURL; }
                var properties = {};
                var reservedProps = ['children', 'dangerouslySetInnerHTML',
                    'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
                reservedProps.forEach(function (name) {
                    properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false);
                });
                [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
                    var name = _ref[0], attributeName = _ref[1];
                    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
                });
                ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false);
                });
                ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false);
                });
                ['allowFullScreen', 'async',
                    'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
                    'itemScope'].forEach(function (name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false);
                });
                ['checked',
                    'multiple', 'muted', 'selected'
                ].forEach(function (name) {
                    properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false);
                });
                ['capture', 'download'
                ].forEach(function (name) {
                    properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false);
                });
                ['cols', 'rows', 'size', 'span'
                ].forEach(function (name) {
                    properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false);
                });
                ['rowSpan', 'start'].forEach(function (name) {
                    properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false);
                });
                var CAMELIZE = /[\-\:]([a-z])/g;
                var capitalize = function capitalize(token) { return token[1].toUpperCase(); };
                ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'
                ].forEach(function (attributeName) {
                    var name = attributeName.replace(CAMELIZE, capitalize);
                    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
                });
                ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'
                ].forEach(function (attributeName) {
                    var name = attributeName.replace(CAMELIZE, capitalize);
                    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false);
                });
                ['xml:base', 'xml:lang', 'xml:space'
                ].forEach(function (attributeName) {
                    var name = attributeName.replace(CAMELIZE, capitalize);
                    properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false);
                });
                ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
                    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false);
                });
                var xlinkHref = 'xlinkHref';
                properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true);
                ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
                    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true);
                });
                var ReactDebugCurrentFrame$1 = null;
                {
                    ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
                }
                var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
                var didWarn = false;
                function sanitizeURL(url) { {
                    if (!didWarn && isJavaScriptProtocol.test(url)) {
                        didWarn = true;
                        error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
                    }
                } }
                function getValueForProperty(node, name, expected, propertyInfo) {
                    {
                        if (propertyInfo.mustUseProperty) {
                            var propertyName = propertyInfo.propertyName;
                            return node[propertyName];
                        }
                        else {
                            if (propertyInfo.sanitizeURL) {
                                sanitizeURL('' + expected);
                            }
                            var attributeName = propertyInfo.attributeName;
                            var stringValue = null;
                            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                                if (node.hasAttribute(attributeName)) {
                                    var value = node.getAttribute(attributeName);
                                    if (value === '') {
                                        return true;
                                    }
                                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                                        return value;
                                    }
                                    if (value === '' + expected) {
                                        return expected;
                                    }
                                    return value;
                                }
                            }
                            else if (node.hasAttribute(attributeName)) {
                                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                                    return node.getAttribute(attributeName);
                                }
                                if (propertyInfo.type === BOOLEAN) {
                                    return expected;
                                }
                                stringValue = node.getAttribute(attributeName);
                            }
                            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                                return stringValue === null ? expected : stringValue;
                            }
                            else if (stringValue === '' + expected) {
                                return expected;
                            }
                            else {
                                return stringValue;
                            }
                        }
                    }
                }
                function getValueForAttribute(node, name, expected) { {
                    if (!isAttributeNameSafe(name)) {
                        return;
                    }
                    if (!node.hasAttribute(name)) {
                        return expected === undefined ? undefined : null;
                    }
                    var value = node.getAttribute(name);
                    if (value === '' + expected) {
                        return expected;
                    }
                    return value;
                } }
                function setValueForProperty(node, name, value, isCustomComponentTag) {
                    var propertyInfo = getPropertyInfo(name);
                    if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
                        return;
                    }
                    if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
                        value = null;
                    }
                    if (isCustomComponentTag || propertyInfo === null) {
                        if (isAttributeNameSafe(name)) {
                            var _attributeName = name;
                            if (value === null) {
                                node.removeAttribute(_attributeName);
                            }
                            else {
                                node.setAttribute(_attributeName, '' + value);
                            }
                        }
                        return;
                    }
                    var mustUseProperty = propertyInfo.mustUseProperty;
                    if (mustUseProperty) {
                        var propertyName = propertyInfo.propertyName;
                        if (value === null) {
                            var type = propertyInfo.type;
                            node[propertyName] = type === BOOLEAN ? false : '';
                        }
                        else {
                            node[propertyName] = value;
                        }
                        return;
                    }
                    var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
                    if (value === null) {
                        node.removeAttribute(attributeName);
                    }
                    else {
                        var _type = propertyInfo.type;
                        var attributeValue;
                        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                            attributeValue = '';
                        }
                        else {
                            {
                                attributeValue = '' + value;
                            }
                            if (propertyInfo.sanitizeURL) {
                                sanitizeURL(attributeValue.toString());
                            }
                        }
                        if (attributeNamespace) {
                            node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
                        }
                        else {
                            node.setAttribute(attributeName, attributeValue);
                        }
                    }
                }
                function toString(value) { return '' + value; }
                function getToStringValue(value) {
                    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
                        case 'boolean':
                        case 'number':
                        case 'object':
                        case 'string':
                        case 'undefined': return value;
                        default:
                            return '';
                    }
                }
                var ReactDebugCurrentFrame$2 = null;
                var ReactControlledValuePropTypes = { checkPropTypes: null };
                {
                    ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
                    var hasReadOnlyValue = { button: true, checkbox: true, image: true, hidden: true, radio: true, reset: true, submit: true };
                    var propTypes = { value: function value(props, propName, componentName) { if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                            return null;
                        } return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.'); }, checked: function checked(props, propName, componentName) { if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                            return null;
                        } return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.'); } };
                    ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) { checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum); };
                }
                function isCheckable(elem) { var type = elem.type; var nodeName = elem.nodeName; return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio'); }
                function getTracker(node) { return node._valueTracker; }
                function detachTracker(node) { node._valueTracker = null; }
                function getValueFromNode(node) { var value = ''; if (!node) {
                    return value;
                } if (isCheckable(node)) {
                    value = node.checked ? 'true' : 'false';
                }
                else {
                    value = node.value;
                } return value; }
                function trackValueOnNode(node) {
                    var valueField = isCheckable(node) ? 'checked' : 'value';
                    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
                    var currentValue = '' + node[valueField];
                    if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
                        return;
                    }
                    var _get = descriptor.get, _set = descriptor.set;
                    Object.defineProperty(node, valueField, { configurable: true, get: function get() { return _get.call(this); }, set: function set(value) { currentValue = '' + value; _set.call(this, value); } });
                    Object.defineProperty(node, valueField, { enumerable: descriptor.enumerable });
                    var tracker = { getValue: function getValue() { return currentValue; }, setValue: function setValue(value) { currentValue = '' + value; }, stopTracking: function stopTracking() { detachTracker(node); delete node[valueField]; } };
                    return tracker;
                }
                function track(node) {
                    if (getTracker(node)) {
                        return;
                    }
                    node._valueTracker = trackValueOnNode(node);
                }
                function updateValueIfChanged(node) {
                    if (!node) {
                        return false;
                    }
                    var tracker = getTracker(node);
                    if (!tracker) {
                        return true;
                    }
                    var lastValue = tracker.getValue();
                    var nextValue = getValueFromNode(node);
                    if (nextValue !== lastValue) {
                        tracker.setValue(nextValue);
                        return true;
                    }
                    return false;
                }
                var didWarnValueDefaultValue = false;
                var didWarnCheckedDefaultChecked = false;
                var didWarnControlledToUncontrolled = false;
                var didWarnUncontrolledToControlled = false;
                function isControlled(props) { var usesChecked = props.type === 'checkbox' || props.type === 'radio'; return usesChecked ? props.checked != null : props.value != null; }
                function getHostProps(element, props) { var node = element; var checked = props.checked; var hostProps = _assign({}, props, { defaultChecked: undefined, defaultValue: undefined, value: undefined, checked: checked != null ? checked : node._wrapperState.initialChecked }); return hostProps; }
                function initWrapperState(element, props) { {
                    ReactControlledValuePropTypes.checkPropTypes('input', props);
                    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
                        error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
                        didWarnCheckedDefaultChecked = true;
                    }
                    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
                        error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
                        didWarnValueDefaultValue = true;
                    }
                } var node = element; var defaultValue = props.defaultValue == null ? '' : props.defaultValue; node._wrapperState = { initialChecked: props.checked != null ? props.checked : props.defaultChecked, initialValue: getToStringValue(props.value != null ? props.value : defaultValue), controlled: isControlled(props) }; }
                function updateChecked(element, props) { var node = element; var checked = props.checked; if (checked != null) {
                    setValueForProperty(node, 'checked', checked, false);
                } }
                function updateWrapper(element, props) {
                    var node = element;
                    {
                        var controlled = isControlled(props);
                        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                            error('A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
                            didWarnUncontrolledToControlled = true;
                        }
                        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                            error('A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
                            didWarnControlledToUncontrolled = true;
                        }
                    }
                    updateChecked(element, props);
                    var value = getToStringValue(props.value);
                    var type = props.type;
                    if (value != null) {
                        if (type === 'number') {
                            if (value === 0 && node.value === '' ||
                                node.value != value) {
                                node.value = toString(value);
                            }
                        }
                        else if (node.value !== toString(value)) {
                            node.value = toString(value);
                        }
                    }
                    else if (type === 'submit' || type === 'reset') {
                        node.removeAttribute('value');
                        return;
                    }
                    {
                        if (props.hasOwnProperty('value')) {
                            setDefaultValue(node, props.type, value);
                        }
                        else if (props.hasOwnProperty('defaultValue')) {
                            setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
                        }
                    }
                    {
                        if (props.checked == null && props.defaultChecked != null) {
                            node.defaultChecked = !!props.defaultChecked;
                        }
                    }
                }
                function postMountWrapper(element, props, isHydrating) {
                    var node = element;
                    if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
                        var type = props.type;
                        var isButton = type === 'submit' || type === 'reset';
                        if (isButton && (props.value === undefined || props.value === null)) {
                            return;
                        }
                        var initialValue = toString(node._wrapperState.initialValue);
                        if (!isHydrating) {
                            {
                                if (initialValue !== node.value) {
                                    node.value = initialValue;
                                }
                            }
                        }
                        {
                            node.defaultValue = initialValue;
                        }
                    }
                    var name = node.name;
                    if (name !== '') {
                        node.name = '';
                    }
                    {
                        node.defaultChecked = !node.defaultChecked;
                        node.defaultChecked = !!node._wrapperState.initialChecked;
                    }
                    if (name !== '') {
                        node.name = name;
                    }
                }
                function restoreControlledState(element, props) { var node = element; updateWrapper(node, props); updateNamedCousins(node, props); }
                function updateNamedCousins(rootNode, props) {
                    var name = props.name;
                    if (props.type === 'radio' && name != null) {
                        var queryRoot = rootNode;
                        while (queryRoot.parentNode) {
                            queryRoot = queryRoot.parentNode;
                        }
                        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
                        for (var i = 0; i < group.length; i++) {
                            var otherNode = group[i];
                            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                                continue;
                            }
                            var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
                            if (!otherProps) {
                                {
                                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                                }
                            }
                            updateValueIfChanged(otherNode);
                            updateWrapper(otherNode, otherProps);
                        }
                    }
                }
                function setDefaultValue(node, type, value) {
                    if (type !== 'number' || node.ownerDocument.activeElement !== node) {
                        if (value == null) {
                            node.defaultValue = toString(node._wrapperState.initialValue);
                        }
                        else if (node.defaultValue !== toString(value)) {
                            node.defaultValue = toString(value);
                        }
                    }
                }
                var didWarnSelectedSetOnOption = false;
                var didWarnInvalidChild = false;
                function flattenChildren(children) {
                    var content = '';
                    React.Children.forEach(children, function (child) {
                        if (child == null) {
                            return;
                        }
                        content += child;
                    });
                    return content;
                }
                function validateProps(element, props) {
                    {
                        if (_typeof(props.children) === 'object' && props.children !== null) {
                            React.Children.forEach(props.children, function (child) { if (child == null) {
                                return;
                            } if (typeof child === 'string' || typeof child === 'number') {
                                return;
                            } if (typeof child.type !== 'string') {
                                return;
                            } if (!didWarnInvalidChild) {
                                didWarnInvalidChild = true;
                                error('Only strings and numbers are supported as <option> children.');
                            } });
                        }
                        if (props.selected != null && !didWarnSelectedSetOnOption) {
                            error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
                            didWarnSelectedSetOnOption = true;
                        }
                    }
                }
                function postMountWrapper$1(element, props) {
                    if (props.value != null) {
                        element.setAttribute('value', toString(getToStringValue(props.value)));
                    }
                }
                function getHostProps$1(element, props) { var hostProps = _assign({ children: undefined }, props); var content = flattenChildren(props.children); if (content) {
                    hostProps.children = content;
                } return hostProps; }
                var didWarnValueDefaultValue$1;
                {
                    didWarnValueDefaultValue$1 = false;
                }
                function getDeclarationErrorAddendum() { var ownerName = getCurrentFiberOwnerNameInDevOrNull(); if (ownerName) {
                    return '\n\nCheck the render method of `' + ownerName + '`.';
                } return ''; }
                var valuePropNames = ['value', 'defaultValue'];
                function checkSelectPropTypes(props) { {
                    ReactControlledValuePropTypes.checkPropTypes('select', props);
                    for (var i = 0; i < valuePropNames.length; i++) {
                        var propName = valuePropNames[i];
                        if (props[propName] == null) {
                            continue;
                        }
                        var isArray = Array.isArray(props[propName]);
                        if (props.multiple && !isArray) {
                            error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
                        }
                        else if (!props.multiple && isArray) {
                            error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
                        }
                    }
                } }
                function updateOptions(node, multiple, propValue, setDefaultSelected) {
                    var options = node.options;
                    if (multiple) {
                        var selectedValues = propValue;
                        var selectedValue = {};
                        for (var i = 0; i < selectedValues.length; i++) {
                            selectedValue['$' + selectedValues[i]] = true;
                        }
                        for (var _i = 0; _i < options.length; _i++) {
                            var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                            if (options[_i].selected !== selected) {
                                options[_i].selected = selected;
                            }
                            if (selected && setDefaultSelected) {
                                options[_i].defaultSelected = true;
                            }
                        }
                    }
                    else {
                        var _selectedValue = toString(getToStringValue(propValue));
                        var defaultSelected = null;
                        for (var _i2 = 0; _i2 < options.length; _i2++) {
                            if (options[_i2].value === _selectedValue) {
                                options[_i2].selected = true;
                                if (setDefaultSelected) {
                                    options[_i2].defaultSelected = true;
                                }
                                return;
                            }
                            if (defaultSelected === null && !options[_i2].disabled) {
                                defaultSelected = options[_i2];
                            }
                        }
                        if (defaultSelected !== null) {
                            defaultSelected.selected = true;
                        }
                    }
                }
                function getHostProps$2(element, props) { return _assign({}, props, { value: undefined }); }
                function initWrapperState$1(element, props) { var node = element; {
                    checkSelectPropTypes(props);
                } node._wrapperState = { wasMultiple: !!props.multiple }; {
                    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
                        error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
                        didWarnValueDefaultValue$1 = true;
                    }
                } }
                function postMountWrapper$2(element, props) { var node = element; node.multiple = !!props.multiple; var value = props.value; if (value != null) {
                    updateOptions(node, !!props.multiple, value, false);
                }
                else if (props.defaultValue != null) {
                    updateOptions(node, !!props.multiple, props.defaultValue, true);
                } }
                function postUpdateWrapper(element, props) {
                    var node = element;
                    var wasMultiple = node._wrapperState.wasMultiple;
                    node._wrapperState.wasMultiple = !!props.multiple;
                    var value = props.value;
                    if (value != null) {
                        updateOptions(node, !!props.multiple, value, false);
                    }
                    else if (wasMultiple !== !!props.multiple) {
                        if (props.defaultValue != null) {
                            updateOptions(node, !!props.multiple, props.defaultValue, true);
                        }
                        else {
                            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
                        }
                    }
                }
                function restoreControlledState$1(element, props) { var node = element; var value = props.value; if (value != null) {
                    updateOptions(node, !!props.multiple, value, false);
                } }
                var didWarnValDefaultVal = false;
                function getHostProps$3(element, props) {
                    var node = element;
                    if (!(props.dangerouslySetInnerHTML == null)) {
                        {
                            throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                        }
                    }
                    var hostProps = _assign({}, props, { value: undefined, defaultValue: undefined, children: toString(node._wrapperState.initialValue) });
                    return hostProps;
                }
                function initWrapperState$2(element, props) {
                    var node = element;
                    {
                        ReactControlledValuePropTypes.checkPropTypes('textarea', props);
                        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
                            error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
                            didWarnValDefaultVal = true;
                        }
                    }
                    var initialValue = props.value;
                    if (initialValue == null) {
                        var children = props.children, defaultValue = props.defaultValue;
                        if (children != null) {
                            {
                                error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
                            }
                            {
                                if (!(defaultValue == null)) {
                                    {
                                        throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                                    }
                                }
                                if (Array.isArray(children)) {
                                    if (!(children.length <= 1)) {
                                        {
                                            throw Error("<textarea> can only have at most one child.");
                                        }
                                    }
                                    children = children[0];
                                }
                                defaultValue = children;
                            }
                        }
                        if (defaultValue == null) {
                            defaultValue = '';
                        }
                        initialValue = defaultValue;
                    }
                    node._wrapperState = { initialValue: getToStringValue(initialValue) };
                }
                function updateWrapper$1(element, props) {
                    var node = element;
                    var value = getToStringValue(props.value);
                    var defaultValue = getToStringValue(props.defaultValue);
                    if (value != null) {
                        var newValue = toString(value);
                        if (newValue !== node.value) {
                            node.value = newValue;
                        }
                        if (props.defaultValue == null && node.defaultValue !== newValue) {
                            node.defaultValue = newValue;
                        }
                    }
                    if (defaultValue != null) {
                        node.defaultValue = toString(defaultValue);
                    }
                }
                function postMountWrapper$3(element, props) {
                    var node = element;
                    var textContent = node.textContent;
                    if (textContent === node._wrapperState.initialValue) {
                        if (textContent !== '' && textContent !== null) {
                            node.value = textContent;
                        }
                    }
                }
                function restoreControlledState$2(element, props) {
                    updateWrapper$1(element, props);
                }
                var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
                var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
                var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
                var Namespaces = { html: HTML_NAMESPACE, mathml: MATH_NAMESPACE, svg: SVG_NAMESPACE };
                function getIntrinsicNamespace(type) { switch (type) {
                    case 'svg': return SVG_NAMESPACE;
                    case 'math': return MATH_NAMESPACE;
                    default: return HTML_NAMESPACE;
                } }
                function getChildNamespace(parentNamespace, type) {
                    if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
                        return getIntrinsicNamespace(type);
                    }
                    if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
                        return HTML_NAMESPACE;
                    }
                    return parentNamespace;
                }
                var createMicrosoftUnsafeLocalFunction = function createMicrosoftUnsafeLocalFunction(func) { if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
                    return function (arg0, arg1, arg2, arg3) { MSApp.execUnsafeLocalFunction(function () { return func(arg0, arg1, arg2, arg3); }); };
                }
                else {
                    return func;
                } };
                var reusableSVGContainer;
                var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
                    if (node.namespaceURI === Namespaces.svg) {
                        if (!('innerHTML' in node)) {
                            reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                            reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                            var svgNode = reusableSVGContainer.firstChild;
                            while (node.firstChild) {
                                node.removeChild(node.firstChild);
                            }
                            while (svgNode.firstChild) {
                                node.appendChild(svgNode.firstChild);
                            }
                            return;
                        }
                    }
                    node.innerHTML = html;
                });
                var ELEMENT_NODE = 1;
                var TEXT_NODE = 3;
                var COMMENT_NODE = 8;
                var DOCUMENT_NODE = 9;
                var DOCUMENT_FRAGMENT_NODE = 11;
                var setTextContent = function setTextContent(node, text) { if (text) {
                    var firstChild = node.firstChild;
                    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                        firstChild.nodeValue = text;
                        return;
                    }
                } node.textContent = text; };
                function unsafeCastStringToDOMTopLevelType(topLevelType) { return topLevelType; }
                function unsafeCastDOMTopLevelTypeToString(topLevelType) { return topLevelType; }
                function makePrefixMap(styleProp, eventName) { var prefixes = {}; prefixes[styleProp.toLowerCase()] = eventName.toLowerCase(); prefixes['Webkit' + styleProp] = 'webkit' + eventName; prefixes['Moz' + styleProp] = 'moz' + eventName; return prefixes; }
                var vendorPrefixes = { animationend: makePrefixMap('Animation', 'AnimationEnd'), animationiteration: makePrefixMap('Animation', 'AnimationIteration'), animationstart: makePrefixMap('Animation', 'AnimationStart'), transitionend: makePrefixMap('Transition', 'TransitionEnd') };
                var prefixedEventNames = {};
                var style = {};
                if (canUseDOM) {
                    style = document.createElement('div').style;
                    if (!('AnimationEvent' in window)) {
                        delete vendorPrefixes.animationend.animation;
                        delete vendorPrefixes.animationiteration.animation;
                        delete vendorPrefixes.animationstart.animation;
                    }
                    if (!('TransitionEvent' in window)) {
                        delete vendorPrefixes.transitionend.transition;
                    }
                }
                function getVendorPrefixedEventName(eventName) { if (prefixedEventNames[eventName]) {
                    return prefixedEventNames[eventName];
                }
                else if (!vendorPrefixes[eventName]) {
                    return eventName;
                } var prefixMap = vendorPrefixes[eventName]; for (var styleProp in prefixMap) {
                    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                        return prefixedEventNames[eventName] = prefixMap[styleProp];
                    }
                } return eventName; }
                var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
                var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
                var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
                var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
                var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
                var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
                var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
                var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
                var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
                var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
                var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
                var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
                var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
                var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
                var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
                var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
                var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
                var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
                var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
                var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
                var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
                var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
                var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
                var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
                var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
                var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
                var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
                var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
                var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
                var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
                var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
                var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
                var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
                var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
                var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
                var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
                var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
                var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
                var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
                var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
                var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
                var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
                var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
                var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
                var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
                var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
                var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
                var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
                var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
                var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
                var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
                var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
                var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
                var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
                var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
                var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
                var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
                var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
                var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
                var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
                var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
                var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
                var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
                var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
                var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
                var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
                var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
                var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
                var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
                var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
                var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
                var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
                var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
                var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
                var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
                var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
                var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
                var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
                var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
                var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');
                var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
                function getRawEventName(topLevelType) { return unsafeCastDOMTopLevelTypeToString(topLevelType); }
                var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
                var elementListenerMap = new PossiblyWeakMap();
                function getListenerMapForElement(element) { var listenerMap = elementListenerMap.get(element); if (listenerMap === undefined) {
                    listenerMap = new Map();
                    elementListenerMap.set(element, listenerMap);
                } return listenerMap; }
                function get(key) { return key._reactInternalFiber; }
                function has(key) { return key._reactInternalFiber !== undefined; }
                function set(key, value) { key._reactInternalFiber = value; }
                var NoEffect = 0;
                var PerformedWork = 1;
                var Placement = 2;
                var Update = 4;
                var PlacementAndUpdate = 6;
                var Deletion = 8;
                var ContentReset = 16;
                var Callback = 32;
                var DidCapture = 64;
                var Ref = 128;
                var Snapshot = 256;
                var Passive = 512;
                var Hydrating = 1024;
                var HydratingAndUpdate = 1028;
                var LifecycleEffectMask = 932;
                var HostEffectMask = 2047;
                var Incomplete = 2048;
                var ShouldCapture = 4096;
                var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
                function getNearestMountedFiber(fiber) {
                    var node = fiber;
                    var nearestMounted = fiber;
                    if (!fiber.alternate) {
                        var nextNode = node;
                        do {
                            node = nextNode;
                            if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
                                nearestMounted = node.return;
                            }
                            nextNode = node.return;
                        } while (nextNode);
                    }
                    else {
                        while (node.return) {
                            node = node.return;
                        }
                    }
                    if (node.tag === HostRoot) {
                        return nearestMounted;
                    }
                    return null;
                }
                function getSuspenseInstanceFromFiber(fiber) { if (fiber.tag === SuspenseComponent) {
                    var suspenseState = fiber.memoizedState;
                    if (suspenseState === null) {
                        var current = fiber.alternate;
                        if (current !== null) {
                            suspenseState = current.memoizedState;
                        }
                    }
                    if (suspenseState !== null) {
                        return suspenseState.dehydrated;
                    }
                } return null; }
                function getContainerFromFiber(fiber) { return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null; }
                function isFiberMounted(fiber) { return getNearestMountedFiber(fiber) === fiber; }
                function isMounted(component) { {
                    var owner = ReactCurrentOwner.current;
                    if (owner !== null && owner.tag === ClassComponent) {
                        var ownerFiber = owner;
                        var instance = ownerFiber.stateNode;
                        if (!instance._warnedAboutRefsInRender) {
                            error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
                        }
                        instance._warnedAboutRefsInRender = true;
                    }
                } var fiber = get(component); if (!fiber) {
                    return false;
                } return getNearestMountedFiber(fiber) === fiber; }
                function assertIsMounted(fiber) { if (!(getNearestMountedFiber(fiber) === fiber)) {
                    {
                        throw Error("Unable to find node on an unmounted component.");
                    }
                } }
                function findCurrentFiberUsingSlowPath(fiber) {
                    var alternate = fiber.alternate;
                    if (!alternate) {
                        var nearestMounted = getNearestMountedFiber(fiber);
                        if (!(nearestMounted !== null)) {
                            {
                                throw Error("Unable to find node on an unmounted component.");
                            }
                        }
                        if (nearestMounted !== fiber) {
                            return null;
                        }
                        return fiber;
                    }
                    var a = fiber;
                    var b = alternate;
                    while (true) {
                        var parentA = a.return;
                        if (parentA === null) {
                            break;
                        }
                        var parentB = parentA.alternate;
                        if (parentB === null) {
                            var nextParent = parentA.return;
                            if (nextParent !== null) {
                                a = b = nextParent;
                                continue;
                            }
                            break;
                        }
                        if (parentA.child === parentB.child) {
                            var child = parentA.child;
                            while (child) {
                                if (child === a) {
                                    assertIsMounted(parentA);
                                    return fiber;
                                }
                                if (child === b) {
                                    assertIsMounted(parentA);
                                    return alternate;
                                }
                                child = child.sibling;
                            }
                            {
                                {
                                    throw Error("Unable to find node on an unmounted component.");
                                }
                            }
                        }
                        if (a.return !== b.return) {
                            a = parentA;
                            b = parentB;
                        }
                        else {
                            var didFindChild = false;
                            var _child = parentA.child;
                            while (_child) {
                                if (_child === a) {
                                    didFindChild = true;
                                    a = parentA;
                                    b = parentB;
                                    break;
                                }
                                if (_child === b) {
                                    didFindChild = true;
                                    b = parentA;
                                    a = parentB;
                                    break;
                                }
                                _child = _child.sibling;
                            }
                            if (!didFindChild) {
                                _child = parentB.child;
                                while (_child) {
                                    if (_child === a) {
                                        didFindChild = true;
                                        a = parentB;
                                        b = parentA;
                                        break;
                                    }
                                    if (_child === b) {
                                        didFindChild = true;
                                        b = parentB;
                                        a = parentA;
                                        break;
                                    }
                                    _child = _child.sibling;
                                }
                                if (!didFindChild) {
                                    {
                                        throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                                    }
                                }
                            }
                        }
                        if (!(a.alternate === b)) {
                            {
                                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                    }
                    if (!(a.tag === HostRoot)) {
                        {
                            throw Error("Unable to find node on an unmounted component.");
                        }
                    }
                    if (a.stateNode.current === a) {
                        return fiber;
                    }
                    return alternate;
                }
                function findCurrentHostFiber(parent) {
                    var currentParent = findCurrentFiberUsingSlowPath(parent);
                    if (!currentParent) {
                        return null;
                    }
                    var node = currentParent;
                    while (true) {
                        if (node.tag === HostComponent || node.tag === HostText) {
                            return node;
                        }
                        else if (node.child) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                        if (node === currentParent) {
                            return null;
                        }
                        while (!node.sibling) {
                            if (!node.return || node.return === currentParent) {
                                return null;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                    }
                    return null;
                }
                function findCurrentHostFiberWithNoPortals(parent) {
                    var currentParent = findCurrentFiberUsingSlowPath(parent);
                    if (!currentParent) {
                        return null;
                    }
                    var node = currentParent;
                    while (true) {
                        if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                            return node;
                        }
                        else if (node.child && node.tag !== HostPortal) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                        if (node === currentParent) {
                            return null;
                        }
                        while (!node.sibling) {
                            if (!node.return || node.return === currentParent) {
                                return null;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                    }
                    return null;
                }
                function accumulateInto(current, next) {
                    if (!(next != null)) {
                        {
                            throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
                        }
                    }
                    if (current == null) {
                        return next;
                    }
                    if (Array.isArray(current)) {
                        if (Array.isArray(next)) {
                            current.push.apply(current, next);
                            return current;
                        }
                        current.push(next);
                        return current;
                    }
                    if (Array.isArray(next)) {
                        return [current].concat(next);
                    }
                    return [current, next];
                }
                function forEachAccumulated(arr, cb, scope) { if (Array.isArray(arr)) {
                    arr.forEach(cb, scope);
                }
                else if (arr) {
                    cb.call(scope, arr);
                } }
                var eventQueue = null;
                var executeDispatchesAndRelease = function executeDispatchesAndRelease(event) { if (event) {
                    executeDispatchesInOrder(event);
                    if (!event.isPersistent()) {
                        event.constructor.release(event);
                    }
                } };
                var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) { return executeDispatchesAndRelease(e); };
                function runEventsInBatch(events) {
                    if (events !== null) {
                        eventQueue = accumulateInto(eventQueue, events);
                    }
                    var processingEventQueue = eventQueue;
                    eventQueue = null;
                    if (!processingEventQueue) {
                        return;
                    }
                    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
                    if (!!eventQueue) {
                        {
                            throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
                        }
                    }
                    rethrowCaughtError();
                }
                function getEventTarget(nativeEvent) {
                    var target = nativeEvent.target || nativeEvent.srcElement || window;
                    if (target.correspondingUseElement) {
                        target = target.correspondingUseElement;
                    }
                    return target.nodeType === TEXT_NODE ? target.parentNode : target;
                }
                function isEventSupported(eventNameSuffix) { if (!canUseDOM) {
                    return false;
                } var eventName = 'on' + eventNameSuffix; var isSupported = eventName in document; if (!isSupported) {
                    var element = document.createElement('div');
                    element.setAttribute(eventName, 'return;');
                    isSupported = typeof element[eventName] === 'function';
                } return isSupported; }
                var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
                var callbackBookkeepingPool = [];
                function releaseTopLevelCallbackBookKeeping(instance) { instance.topLevelType = null; instance.nativeEvent = null; instance.targetInst = null; instance.ancestors.length = 0; if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
                    callbackBookkeepingPool.push(instance);
                } }
                function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) { if (callbackBookkeepingPool.length) {
                    var instance = callbackBookkeepingPool.pop();
                    instance.topLevelType = topLevelType;
                    instance.eventSystemFlags = eventSystemFlags;
                    instance.nativeEvent = nativeEvent;
                    instance.targetInst = targetInst;
                    return instance;
                } return { topLevelType: topLevelType, eventSystemFlags: eventSystemFlags, nativeEvent: nativeEvent, targetInst: targetInst, ancestors: [] }; }
                function findRootContainerNode(inst) {
                    if (inst.tag === HostRoot) {
                        return inst.stateNode.containerInfo;
                    }
                    while (inst.return) {
                        inst = inst.return;
                    }
                    if (inst.tag !== HostRoot) {
                        return null;
                    }
                    return inst.stateNode.containerInfo;
                }
                function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
                    var events = null;
                    for (var i = 0; i < plugins.length; i++) {
                        var possiblePlugin = plugins[i];
                        if (possiblePlugin) {
                            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                            if (extractedEvents) {
                                events = accumulateInto(events, extractedEvents);
                            }
                        }
                    }
                    return events;
                }
                function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) { var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags); runEventsInBatch(events); }
                function handleTopLevel(bookKeeping) {
                    var targetInst = bookKeeping.targetInst;
                    var ancestor = targetInst;
                    do {
                        if (!ancestor) {
                            var ancestors = bookKeeping.ancestors;
                            ancestors.push(ancestor);
                            break;
                        }
                        var root = findRootContainerNode(ancestor);
                        if (!root) {
                            break;
                        }
                        var tag = ancestor.tag;
                        if (tag === HostComponent || tag === HostText) {
                            bookKeeping.ancestors.push(ancestor);
                        }
                        ancestor = getClosestInstanceFromNode(root);
                    } while (ancestor);
                    for (var i = 0; i < bookKeeping.ancestors.length; i++) {
                        targetInst = bookKeeping.ancestors[i];
                        var eventTarget = getEventTarget(bookKeeping.nativeEvent);
                        var topLevelType = bookKeeping.topLevelType;
                        var nativeEvent = bookKeeping.nativeEvent;
                        var eventSystemFlags = bookKeeping.eventSystemFlags;
                        if (i === 0) {
                            eventSystemFlags |= IS_FIRST_ANCESTOR;
                        }
                        runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
                    }
                }
                function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
                    var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
                    try {
                        batchedEventUpdates(handleTopLevel, bookKeeping);
                    }
                    finally {
                        releaseTopLevelCallbackBookKeeping(bookKeeping);
                    }
                }
                function legacyListenToEvent(registrationName, mountAt) { var listenerMap = getListenerMapForElement(mountAt); var dependencies = registrationNameDependencies[registrationName]; for (var i = 0; i < dependencies.length; i++) {
                    var dependency = dependencies[i];
                    legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
                } }
                function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
                    if (!listenerMap.has(topLevelType)) {
                        switch (topLevelType) {
                            case TOP_SCROLL:
                                trapCapturedEvent(TOP_SCROLL, mountAt);
                                break;
                            case TOP_FOCUS:
                            case TOP_BLUR:
                                trapCapturedEvent(TOP_FOCUS, mountAt);
                                trapCapturedEvent(TOP_BLUR, mountAt);
                                listenerMap.set(TOP_BLUR, null);
                                listenerMap.set(TOP_FOCUS, null);
                                break;
                            case TOP_CANCEL:
                            case TOP_CLOSE:
                                if (isEventSupported(getRawEventName(topLevelType))) {
                                    trapCapturedEvent(topLevelType, mountAt);
                                }
                                break;
                            case TOP_INVALID:
                            case TOP_SUBMIT:
                            case TOP_RESET:
                                break;
                            default:
                                var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
                                if (!isMediaEvent) {
                                    trapBubbledEvent(topLevelType, mountAt);
                                }
                                break;
                        }
                        listenerMap.set(topLevelType, null);
                    }
                }
                function isListeningToAllDependencies(registrationName, mountAt) { var listenerMap = getListenerMapForElement(mountAt); var dependencies = registrationNameDependencies[registrationName]; for (var i = 0; i < dependencies.length; i++) {
                    var dependency = dependencies[i];
                    if (!listenerMap.has(dependency)) {
                        return false;
                    }
                } return true; }
                var attemptUserBlockingHydration;
                function setAttemptUserBlockingHydration(fn) { attemptUserBlockingHydration = fn; }
                var attemptContinuousHydration;
                function setAttemptContinuousHydration(fn) { attemptContinuousHydration = fn; }
                var attemptHydrationAtCurrentPriority;
                function setAttemptHydrationAtCurrentPriority(fn) { attemptHydrationAtCurrentPriority = fn; }
                var hasScheduledReplayAttempt = false;
                var queuedDiscreteEvents = [];
                var queuedFocus = null;
                var queuedDrag = null;
                var queuedMouse = null;
                var queuedPointers = new Map();
                var queuedPointerCaptures = new Map();
                var queuedExplicitHydrationTargets = [];
                function hasQueuedDiscreteEvents() { return queuedDiscreteEvents.length > 0; }
                var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
                var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
                function isReplayableDiscreteEvent(eventType) { return discreteReplayableEvents.indexOf(eventType) > -1; }
                function trapReplayableEventForDocument(topLevelType, document, listenerMap) { legacyListenToTopLevelEvent(topLevelType, document, listenerMap); }
                function eagerlyTrapReplayableEvents(container, document) {
                    var listenerMapForDoc = getListenerMapForElement(document);
                    discreteReplayableEvents.forEach(function (topLevelType) { trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc); });
                    continuousReplayableEvents.forEach(function (topLevelType) { trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc); });
                }
                function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) { return { blockedOn: blockedOn, topLevelType: topLevelType, eventSystemFlags: eventSystemFlags | IS_REPLAYED, nativeEvent: nativeEvent, container: container }; }
                function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) { var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent); queuedDiscreteEvents.push(queuedEvent); }
                function clearIfContinuousEvent(topLevelType, nativeEvent) { switch (topLevelType) {
                    case TOP_FOCUS:
                    case TOP_BLUR:
                        queuedFocus = null;
                        break;
                    case TOP_DRAG_ENTER:
                    case TOP_DRAG_LEAVE:
                        queuedDrag = null;
                        break;
                    case TOP_MOUSE_OVER:
                    case TOP_MOUSE_OUT:
                        queuedMouse = null;
                        break;
                    case TOP_POINTER_OVER:
                    case TOP_POINTER_OUT: {
                        var pointerId = nativeEvent.pointerId;
                        queuedPointers.delete(pointerId);
                        break;
                    }
                    case TOP_GOT_POINTER_CAPTURE:
                    case TOP_LOST_POINTER_CAPTURE: {
                        var _pointerId = nativeEvent.pointerId;
                        queuedPointerCaptures.delete(_pointerId);
                        break;
                    }
                } }
                function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
                    if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
                        var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
                        if (blockedOn !== null) {
                            var _fiber2 = getInstanceFromNode$1(blockedOn);
                            if (_fiber2 !== null) {
                                attemptContinuousHydration(_fiber2);
                            }
                        }
                        return queuedEvent;
                    }
                    existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
                    return existingQueuedEvent;
                }
                function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
                    switch (topLevelType) {
                        case TOP_FOCUS: {
                            var focusEvent = nativeEvent;
                            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
                            return true;
                        }
                        case TOP_DRAG_ENTER: {
                            var dragEvent = nativeEvent;
                            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
                            return true;
                        }
                        case TOP_MOUSE_OVER: {
                            var mouseEvent = nativeEvent;
                            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
                            return true;
                        }
                        case TOP_POINTER_OVER: {
                            var pointerEvent = nativeEvent;
                            var pointerId = pointerEvent.pointerId;
                            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
                            return true;
                        }
                        case TOP_GOT_POINTER_CAPTURE: {
                            var _pointerEvent = nativeEvent;
                            var _pointerId2 = _pointerEvent.pointerId;
                            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
                            return true;
                        }
                    }
                    return false;
                }
                function attemptExplicitHydrationTarget(queuedTarget) {
                    var targetInst = getClosestInstanceFromNode(queuedTarget.target);
                    if (targetInst !== null) {
                        var nearestMounted = getNearestMountedFiber(targetInst);
                        if (nearestMounted !== null) {
                            var tag = nearestMounted.tag;
                            if (tag === SuspenseComponent) {
                                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                                if (instance !== null) {
                                    queuedTarget.blockedOn = instance;
                                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function () { attemptHydrationAtCurrentPriority(nearestMounted); });
                                    return;
                                }
                            }
                            else if (tag === HostRoot) {
                                var root = nearestMounted.stateNode;
                                if (root.hydrate) {
                                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                                    return;
                                }
                            }
                        }
                    }
                    queuedTarget.blockedOn = null;
                }
                function attemptReplayContinuousQueuedEvent(queuedEvent) {
                    if (queuedEvent.blockedOn !== null) {
                        return false;
                    }
                    var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
                    if (nextBlockedOn !== null) {
                        var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
                        if (_fiber3 !== null) {
                            attemptContinuousHydration(_fiber3);
                        }
                        queuedEvent.blockedOn = nextBlockedOn;
                        return false;
                    }
                    return true;
                }
                function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) { if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
                    map.delete(key);
                } }
                function replayUnblockedEvents() {
                    hasScheduledReplayAttempt = false;
                    while (queuedDiscreteEvents.length > 0) {
                        var nextDiscreteEvent = queuedDiscreteEvents[0];
                        if (nextDiscreteEvent.blockedOn !== null) {
                            var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
                            if (_fiber4 !== null) {
                                attemptUserBlockingHydration(_fiber4);
                            }
                            break;
                        }
                        var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
                        if (nextBlockedOn !== null) {
                            nextDiscreteEvent.blockedOn = nextBlockedOn;
                        }
                        else {
                            queuedDiscreteEvents.shift();
                        }
                    }
                    if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
                        queuedFocus = null;
                    }
                    if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
                        queuedDrag = null;
                    }
                    if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
                        queuedMouse = null;
                    }
                    queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
                    queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
                }
                function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
                    if (queuedEvent.blockedOn === unblocked) {
                        queuedEvent.blockedOn = null;
                        if (!hasScheduledReplayAttempt) {
                            hasScheduledReplayAttempt = true;
                            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
                        }
                    }
                }
                function retryIfBlockedOn(unblocked) {
                    if (queuedDiscreteEvents.length > 0) {
                        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
                        for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                            var queuedEvent = queuedDiscreteEvents[i];
                            if (queuedEvent.blockedOn === unblocked) {
                                queuedEvent.blockedOn = null;
                            }
                        }
                    }
                    if (queuedFocus !== null) {
                        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
                    }
                    if (queuedDrag !== null) {
                        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
                    }
                    if (queuedMouse !== null) {
                        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
                    }
                    var unblock = function unblock(queuedEvent) { return scheduleCallbackIfUnblocked(queuedEvent, unblocked); };
                    queuedPointers.forEach(unblock);
                    queuedPointerCaptures.forEach(unblock);
                    for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
                        var queuedTarget = queuedExplicitHydrationTargets[_i];
                        if (queuedTarget.blockedOn === unblocked) {
                            queuedTarget.blockedOn = null;
                        }
                    }
                    while (queuedExplicitHydrationTargets.length > 0) {
                        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
                        if (nextExplicitTarget.blockedOn !== null) {
                            break;
                        }
                        else {
                            attemptExplicitHydrationTarget(nextExplicitTarget);
                            if (nextExplicitTarget.blockedOn === null) {
                                queuedExplicitHydrationTargets.shift();
                            }
                        }
                    }
                }
                function addEventBubbleListener(element, eventType, listener) { element.addEventListener(eventType, listener, false); }
                function addEventCaptureListener(element, eventType, listener) { element.addEventListener(eventType, listener, true); }
                var simpleEventPluginEventTypes = {};
                var topLevelEventsToDispatchConfig = new Map();
                var eventPriorities = new Map();
                var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, 'blur', TOP_CANCEL, 'cancel', TOP_CLICK, 'click', TOP_CLOSE, 'close', TOP_CONTEXT_MENU, 'contextMenu', TOP_COPY, 'copy', TOP_CUT, 'cut', TOP_AUX_CLICK, 'auxClick', TOP_DOUBLE_CLICK, 'doubleClick', TOP_DRAG_END, 'dragEnd', TOP_DRAG_START, 'dragStart', TOP_DROP, 'drop', TOP_FOCUS, 'focus', TOP_INPUT, 'input', TOP_INVALID, 'invalid', TOP_KEY_DOWN, 'keyDown', TOP_KEY_PRESS, 'keyPress', TOP_KEY_UP, 'keyUp', TOP_MOUSE_DOWN, 'mouseDown', TOP_MOUSE_UP, 'mouseUp', TOP_PASTE, 'paste', TOP_PAUSE, 'pause', TOP_PLAY, 'play', TOP_POINTER_CANCEL, 'pointerCancel', TOP_POINTER_DOWN, 'pointerDown', TOP_POINTER_UP, 'pointerUp', TOP_RATE_CHANGE, 'rateChange', TOP_RESET, 'reset', TOP_SEEKED, 'seeked', TOP_SUBMIT, 'submit', TOP_TOUCH_CANCEL, 'touchCancel', TOP_TOUCH_END, 'touchEnd', TOP_TOUCH_START, 'touchStart', TOP_VOLUME_CHANGE, 'volumeChange'];
                var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE];
                var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, 'drag', TOP_DRAG_ENTER, 'dragEnter', TOP_DRAG_EXIT, 'dragExit', TOP_DRAG_LEAVE, 'dragLeave', TOP_DRAG_OVER, 'dragOver', TOP_MOUSE_MOVE, 'mouseMove', TOP_MOUSE_OUT, 'mouseOut', TOP_MOUSE_OVER, 'mouseOver', TOP_POINTER_MOVE, 'pointerMove', TOP_POINTER_OUT, 'pointerOut', TOP_POINTER_OVER, 'pointerOver', TOP_SCROLL, 'scroll', TOP_TOGGLE, 'toggle', TOP_TOUCH_MOVE, 'touchMove', TOP_WHEEL, 'wheel'];
                var continuousPairsForSimpleEventPlugin = [TOP_ABORT, 'abort', TOP_ANIMATION_END, 'animationEnd', TOP_ANIMATION_ITERATION, 'animationIteration', TOP_ANIMATION_START, 'animationStart', TOP_CAN_PLAY, 'canPlay', TOP_CAN_PLAY_THROUGH, 'canPlayThrough', TOP_DURATION_CHANGE, 'durationChange', TOP_EMPTIED, 'emptied', TOP_ENCRYPTED, 'encrypted', TOP_ENDED, 'ended', TOP_ERROR, 'error', TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', TOP_LOAD, 'load', TOP_LOADED_DATA, 'loadedData', TOP_LOADED_METADATA, 'loadedMetadata', TOP_LOAD_START, 'loadStart', TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', TOP_PLAYING, 'playing', TOP_PROGRESS, 'progress', TOP_SEEKING, 'seeking', TOP_STALLED, 'stalled', TOP_SUSPEND, 'suspend', TOP_TIME_UPDATE, 'timeUpdate', TOP_TRANSITION_END, 'transitionEnd', TOP_WAITING, 'waiting'];
                function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
                    for (var i = 0; i < eventTypes.length; i += 2) {
                        var topEvent = eventTypes[i];
                        var event = eventTypes[i + 1];
                        var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
                        var onEvent = 'on' + capitalizedEvent;
                        var config = { phasedRegistrationNames: { bubbled: onEvent, captured: onEvent + 'Capture' }, dependencies: [topEvent], eventPriority: priority };
                        eventPriorities.set(topEvent, priority);
                        topLevelEventsToDispatchConfig.set(topEvent, config);
                        simpleEventPluginEventTypes[event] = config;
                    }
                }
                function processTopEventPairsByPriority(eventTypes, priority) { for (var i = 0; i < eventTypes.length; i++) {
                    eventPriorities.set(eventTypes[i], priority);
                } }
                processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
                processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
                processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent);
                processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
                function getEventPriorityForPluginSystem(topLevelType) {
                    var priority = eventPriorities.get(topLevelType);
                    return priority === undefined ? ContinuousEvent : priority;
                }
                var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
                var _enabled = true;
                function setEnabled(enabled) { _enabled = !!enabled; }
                function isEnabled() { return _enabled; }
                function trapBubbledEvent(topLevelType, element) { trapEventForPluginEventSystem(element, topLevelType, false); }
                function trapCapturedEvent(topLevelType, element) { trapEventForPluginEventSystem(element, topLevelType, true); }
                function trapEventForPluginEventSystem(container, topLevelType, capture) { var listener; switch (getEventPriorityForPluginSystem(topLevelType)) {
                    case DiscreteEvent:
                        listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                        break;
                    case UserBlockingEvent:
                        listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                        break;
                    case ContinuousEvent:
                    default:
                        listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                        break;
                } var rawEventName = getRawEventName(topLevelType); if (capture) {
                    addEventCaptureListener(container, rawEventName, listener);
                }
                else {
                    addEventBubbleListener(container, rawEventName, listener);
                } }
                function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) { flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp); discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent); }
                function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) { runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent)); }
                function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
                    if (!_enabled) {
                        return;
                    }
                    if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
                        queueDiscreteEvent(null, topLevelType, eventSystemFlags, container, nativeEvent);
                        return;
                    }
                    var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
                    if (blockedOn === null) {
                        clearIfContinuousEvent(topLevelType, nativeEvent);
                        return;
                    }
                    if (isReplayableDiscreteEvent(topLevelType)) {
                        queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
                        return;
                    }
                    if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
                        return;
                    }
                    clearIfContinuousEvent(topLevelType, nativeEvent);
                    {
                        dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
                    }
                }
                function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
                    var nativeEventTarget = getEventTarget(nativeEvent);
                    var targetInst = getClosestInstanceFromNode(nativeEventTarget);
                    if (targetInst !== null) {
                        var nearestMounted = getNearestMountedFiber(targetInst);
                        if (nearestMounted === null) {
                            targetInst = null;
                        }
                        else {
                            var tag = nearestMounted.tag;
                            if (tag === SuspenseComponent) {
                                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                                if (instance !== null) {
                                    return instance;
                                }
                                targetInst = null;
                            }
                            else if (tag === HostRoot) {
                                var root = nearestMounted.stateNode;
                                if (root.hydrate) {
                                    return getContainerFromFiber(nearestMounted);
                                }
                                targetInst = null;
                            }
                            else if (nearestMounted !== targetInst) {
                                targetInst = null;
                            }
                        }
                    }
                    {
                        dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
                    }
                    return null;
                }
                var shorthandToLonghand = { animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'], background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'], backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'], border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'], borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'], borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'], borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'], borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'], borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'], borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'], borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'], borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'], borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'], borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'], borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'], borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'], borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'], columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'], columns: ['columnCount', 'columnWidth'], flex: ['flexBasis', 'flexGrow', 'flexShrink'], flexFlow: ['flexDirection', 'flexWrap'], font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'], fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'], gap: ['columnGap', 'rowGap'], grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'], gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'], gridColumn: ['gridColumnEnd', 'gridColumnStart'], gridColumnGap: ['columnGap'], gridGap: ['columnGap', 'rowGap'], gridRow: ['gridRowEnd', 'gridRowStart'], gridRowGap: ['rowGap'], gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'], listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'], margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'], marker: ['markerEnd', 'markerMid', 'markerStart'], mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'], maskPosition: ['maskPositionX', 'maskPositionY'], outline: ['outlineColor', 'outlineStyle', 'outlineWidth'], overflow: ['overflowX', 'overflowY'], padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'], placeContent: ['alignContent', 'justifyContent'], placeItems: ['alignItems', 'justifyItems'], placeSelf: ['alignSelf', 'justifySelf'], textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'], textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'], transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'], wordWrap: ['overflowWrap'] };
                var isUnitlessNumber = { animationIterationCount: true, borderImageOutset: true, borderImageSlice: true, borderImageWidth: true, boxFlex: true, boxFlexGroup: true, boxOrdinalGroup: true, columnCount: true, columns: true, flex: true, flexGrow: true, flexPositive: true, flexShrink: true, flexNegative: true, flexOrder: true, gridArea: true, gridRow: true, gridRowEnd: true, gridRowSpan: true, gridRowStart: true, gridColumn: true, gridColumnEnd: true, gridColumnSpan: true, gridColumnStart: true, fontWeight: true, lineClamp: true, lineHeight: true, opacity: true, order: true, orphans: true, tabSize: true, widows: true, zIndex: true, zoom: true,
                    fillOpacity: true, floodOpacity: true, stopOpacity: true, strokeDasharray: true, strokeDashoffset: true, strokeMiterlimit: true, strokeOpacity: true, strokeWidth: true };
                function prefixKey(prefix, key) { return prefix + key.charAt(0).toUpperCase() + key.substring(1); }
                var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
                Object.keys(isUnitlessNumber).forEach(function (prop) { prefixes.forEach(function (prefix) { isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop]; }); });
                function dangerousStyleValue(name, value, isCustomProperty) {
                    var isEmpty = value == null || typeof value === 'boolean' || value === '';
                    if (isEmpty) {
                        return '';
                    }
                    if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
                        return value + 'px';
                    }
                    return ('' + value).trim();
                }
                var uppercasePattern = /([A-Z])/g;
                var msPattern = /^ms-/;
                function hyphenateStyleName(name) { return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-'); }
                var warnValidStyle = function warnValidStyle() { };
                {
                    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
                    var msPattern$1 = /^-ms-/;
                    var hyphenPattern = /-(.)/g;
                    var badStyleValueWithSemicolonPattern = /;\s*$/;
                    var warnedStyleNames = {};
                    var warnedStyleValues = {};
                    var warnedForNaNValue = false;
                    var warnedForInfinityValue = false;
                    var camelize = function camelize(string) { return string.replace(hyphenPattern, function (_, character) { return character.toUpperCase(); }); };
                    var warnHyphenatedStyleName = function warnHyphenatedStyleName(name) {
                        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                            return;
                        }
                        warnedStyleNames[name] = true;
                        error('Unsupported style property %s. Did you mean %s?', name, camelize(name.replace(msPattern$1, 'ms-')));
                    };
                    var warnBadVendoredStyleName = function warnBadVendoredStyleName(name) { if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                        return;
                    } warnedStyleNames[name] = true; error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)); };
                    var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value) { if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                        return;
                    } warnedStyleValues[value] = true; error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')); };
                    var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value) { if (warnedForNaNValue) {
                        return;
                    } warnedForNaNValue = true; error('`NaN` is an invalid value for the `%s` css style property.', name); };
                    var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(name, value) { if (warnedForInfinityValue) {
                        return;
                    } warnedForInfinityValue = true; error('`Infinity` is an invalid value for the `%s` css style property.', name); };
                    warnValidStyle = function warnValidStyle(name, value) { if (name.indexOf('-') > -1) {
                        warnHyphenatedStyleName(name);
                    }
                    else if (badVendoredStyleNamePattern.test(name)) {
                        warnBadVendoredStyleName(name);
                    }
                    else if (badStyleValueWithSemicolonPattern.test(value)) {
                        warnStyleValueWithSemicolon(name, value);
                    } if (typeof value === 'number') {
                        if (isNaN(value)) {
                            warnStyleValueIsNaN(name, value);
                        }
                        else if (!isFinite(value)) {
                            warnStyleValueIsInfinity(name, value);
                        }
                    } };
                }
                var warnValidStyle$1 = warnValidStyle;
                function createDangerousStringForStyles(styles) { {
                    var serialized = '';
                    var delimiter = '';
                    for (var styleName in styles) {
                        if (!styles.hasOwnProperty(styleName)) {
                            continue;
                        }
                        var styleValue = styles[styleName];
                        if (styleValue != null) {
                            var isCustomProperty = styleName.indexOf('--') === 0;
                            serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                            delimiter = ';';
                        }
                    }
                    return serialized || null;
                } }
                function setValueForStyles(node, styles) { var style = node.style; for (var styleName in styles) {
                    if (!styles.hasOwnProperty(styleName)) {
                        continue;
                    }
                    var isCustomProperty = styleName.indexOf('--') === 0;
                    {
                        if (!isCustomProperty) {
                            warnValidStyle$1(styleName, styles[styleName]);
                        }
                    }
                    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
                    if (styleName === 'float') {
                        styleName = 'cssFloat';
                    }
                    if (isCustomProperty) {
                        style.setProperty(styleName, styleValue);
                    }
                    else {
                        style[styleName] = styleValue;
                    }
                } }
                function isValueEmpty(value) { return value == null || typeof value === 'boolean' || value === ''; }
                function expandShorthandMap(styles) { var expanded = {}; for (var key in styles) {
                    var longhands = shorthandToLonghand[key] || [key];
                    for (var i = 0; i < longhands.length; i++) {
                        expanded[longhands[i]] = key;
                    }
                } return expanded; }
                function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) { {
                    if (!nextStyles) {
                        return;
                    }
                    var expandedUpdates = expandShorthandMap(styleUpdates);
                    var expandedStyles = expandShorthandMap(nextStyles);
                    var warnedAbout = {};
                    for (var key in expandedUpdates) {
                        var originalKey = expandedUpdates[key];
                        var correctOriginalKey = expandedStyles[key];
                        if (correctOriginalKey && originalKey !== correctOriginalKey) {
                            var warningKey = originalKey + ',' + correctOriginalKey;
                            if (warnedAbout[warningKey]) {
                                continue;
                            }
                            warnedAbout[warningKey] = true;
                            error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
                        }
                    }
                } }
                var omittedCloseTags = { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true
                };
                var voidElementTags = _assign({ menuitem: true }, omittedCloseTags);
                var HTML = '__html';
                var ReactDebugCurrentFrame$3 = null;
                {
                    ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
                }
                function assertValidProps(tag, props) {
                    if (!props) {
                        return;
                    }
                    if (voidElementTags[tag]) {
                        if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                            {
                                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
                            }
                        }
                    }
                    if (props.dangerouslySetInnerHTML != null) {
                        if (!(props.children == null)) {
                            {
                                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                            }
                        }
                        if (!(_typeof(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML)) {
                            {
                                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
                            }
                        }
                    }
                    {
                        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                            error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
                        }
                    }
                    if (!(props.style == null || _typeof(props.style) === 'object')) {
                        {
                            throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
                        }
                    }
                }
                function isCustomComponent(tagName, props) {
                    if (tagName.indexOf('-') === -1) {
                        return typeof props.is === 'string';
                    }
                    switch (tagName) {
                        case 'annotation-xml':
                        case 'color-profile':
                        case 'font-face':
                        case 'font-face-src':
                        case 'font-face-uri':
                        case 'font-face-format':
                        case 'font-face-name':
                        case 'missing-glyph': return false;
                        default: return true;
                    }
                }
                var possibleStandardNames = {
                    accept: 'accept', acceptcharset: 'acceptCharset', 'accept-charset': 'acceptCharset', accesskey: 'accessKey', action: 'action', allowfullscreen: 'allowFullScreen', alt: 'alt', as: 'as', async: 'async', autocapitalize: 'autoCapitalize', autocomplete: 'autoComplete', autocorrect: 'autoCorrect', autofocus: 'autoFocus', autoplay: 'autoPlay', autosave: 'autoSave', capture: 'capture', cellpadding: 'cellPadding', cellspacing: 'cellSpacing', challenge: 'challenge', charset: 'charSet', checked: 'checked', children: 'children', cite: 'cite', class: 'className', classid: 'classID', classname: 'className', cols: 'cols', colspan: 'colSpan', content: 'content', contenteditable: 'contentEditable', contextmenu: 'contextMenu', controls: 'controls', controlslist: 'controlsList', coords: 'coords', crossorigin: 'crossOrigin', dangerouslysetinnerhtml: 'dangerouslySetInnerHTML', data: 'data', datetime: 'dateTime', default: 'default', defaultchecked: 'defaultChecked', defaultvalue: 'defaultValue', defer: 'defer', dir: 'dir', disabled: 'disabled', disablepictureinpicture: 'disablePictureInPicture', download: 'download', draggable: 'draggable', enctype: 'encType', for: 'htmlFor', form: 'form', formmethod: 'formMethod', formaction: 'formAction', formenctype: 'formEncType', formnovalidate: 'formNoValidate', formtarget: 'formTarget', frameborder: 'frameBorder', headers: 'headers', height: 'height', hidden: 'hidden', high: 'high', href: 'href', hreflang: 'hrefLang', htmlfor: 'htmlFor', httpequiv: 'httpEquiv', 'http-equiv': 'httpEquiv', icon: 'icon', id: 'id', innerhtml: 'innerHTML', inputmode: 'inputMode', integrity: 'integrity', is: 'is', itemid: 'itemID', itemprop: 'itemProp', itemref: 'itemRef', itemscope: 'itemScope', itemtype: 'itemType', keyparams: 'keyParams', keytype: 'keyType', kind: 'kind', label: 'label', lang: 'lang', list: 'list', loop: 'loop', low: 'low', manifest: 'manifest', marginwidth: 'marginWidth', marginheight: 'marginHeight', max: 'max', maxlength: 'maxLength', media: 'media', mediagroup: 'mediaGroup', method: 'method', min: 'min', minlength: 'minLength', multiple: 'multiple', muted: 'muted', name: 'name', nomodule: 'noModule', nonce: 'nonce', novalidate: 'noValidate', open: 'open', optimum: 'optimum', pattern: 'pattern', placeholder: 'placeholder', playsinline: 'playsInline', poster: 'poster', preload: 'preload', profile: 'profile', radiogroup: 'radioGroup', readonly: 'readOnly', referrerpolicy: 'referrerPolicy', rel: 'rel', required: 'required', reversed: 'reversed', role: 'role', rows: 'rows', rowspan: 'rowSpan', sandbox: 'sandbox', scope: 'scope', scoped: 'scoped', scrolling: 'scrolling', seamless: 'seamless', selected: 'selected', shape: 'shape', size: 'size', sizes: 'sizes', span: 'span', spellcheck: 'spellCheck', src: 'src', srcdoc: 'srcDoc', srclang: 'srcLang', srcset: 'srcSet', start: 'start', step: 'step', style: 'style', summary: 'summary', tabindex: 'tabIndex', target: 'target', title: 'title', type: 'type', usemap: 'useMap', value: 'value', width: 'width', wmode: 'wmode', wrap: 'wrap',
                    about: 'about', accentheight: 'accentHeight', 'accent-height': 'accentHeight', accumulate: 'accumulate', additive: 'additive', alignmentbaseline: 'alignmentBaseline', 'alignment-baseline': 'alignmentBaseline', allowreorder: 'allowReorder', alphabetic: 'alphabetic', amplitude: 'amplitude', arabicform: 'arabicForm', 'arabic-form': 'arabicForm', ascent: 'ascent', attributename: 'attributeName', attributetype: 'attributeType', autoreverse: 'autoReverse', azimuth: 'azimuth', basefrequency: 'baseFrequency', baselineshift: 'baselineShift', 'baseline-shift': 'baselineShift', baseprofile: 'baseProfile', bbox: 'bbox', begin: 'begin', bias: 'bias', by: 'by', calcmode: 'calcMode', capheight: 'capHeight', 'cap-height': 'capHeight', clip: 'clip', clippath: 'clipPath', 'clip-path': 'clipPath', clippathunits: 'clipPathUnits', cliprule: 'clipRule', 'clip-rule': 'clipRule', color: 'color', colorinterpolation: 'colorInterpolation', 'color-interpolation': 'colorInterpolation', colorinterpolationfilters: 'colorInterpolationFilters', 'color-interpolation-filters': 'colorInterpolationFilters', colorprofile: 'colorProfile', 'color-profile': 'colorProfile', colorrendering: 'colorRendering', 'color-rendering': 'colorRendering', contentscripttype: 'contentScriptType', contentstyletype: 'contentStyleType', cursor: 'cursor', cx: 'cx', cy: 'cy', d: 'd', datatype: 'datatype', decelerate: 'decelerate', descent: 'descent', diffuseconstant: 'diffuseConstant', direction: 'direction', display: 'display', divisor: 'divisor', dominantbaseline: 'dominantBaseline', 'dominant-baseline': 'dominantBaseline', dur: 'dur', dx: 'dx', dy: 'dy', edgemode: 'edgeMode', elevation: 'elevation', enablebackground: 'enableBackground', 'enable-background': 'enableBackground', end: 'end', exponent: 'exponent', externalresourcesrequired: 'externalResourcesRequired', fill: 'fill', fillopacity: 'fillOpacity', 'fill-opacity': 'fillOpacity', fillrule: 'fillRule', 'fill-rule': 'fillRule', filter: 'filter', filterres: 'filterRes', filterunits: 'filterUnits', floodopacity: 'floodOpacity', 'flood-opacity': 'floodOpacity', floodcolor: 'floodColor', 'flood-color': 'floodColor', focusable: 'focusable', fontfamily: 'fontFamily', 'font-family': 'fontFamily', fontsize: 'fontSize', 'font-size': 'fontSize', fontsizeadjust: 'fontSizeAdjust', 'font-size-adjust': 'fontSizeAdjust', fontstretch: 'fontStretch', 'font-stretch': 'fontStretch', fontstyle: 'fontStyle', 'font-style': 'fontStyle', fontvariant: 'fontVariant', 'font-variant': 'fontVariant', fontweight: 'fontWeight', 'font-weight': 'fontWeight', format: 'format', from: 'from', fx: 'fx', fy: 'fy', g1: 'g1', g2: 'g2', glyphname: 'glyphName', 'glyph-name': 'glyphName', glyphorientationhorizontal: 'glyphOrientationHorizontal', 'glyph-orientation-horizontal': 'glyphOrientationHorizontal', glyphorientationvertical: 'glyphOrientationVertical', 'glyph-orientation-vertical': 'glyphOrientationVertical', glyphref: 'glyphRef', gradienttransform: 'gradientTransform', gradientunits: 'gradientUnits', hanging: 'hanging', horizadvx: 'horizAdvX', 'horiz-adv-x': 'horizAdvX', horizoriginx: 'horizOriginX', 'horiz-origin-x': 'horizOriginX', ideographic: 'ideographic', imagerendering: 'imageRendering', 'image-rendering': 'imageRendering', in2: 'in2', in: 'in', inlist: 'inlist', intercept: 'intercept', k1: 'k1', k2: 'k2', k3: 'k3', k4: 'k4', k: 'k', kernelmatrix: 'kernelMatrix', kernelunitlength: 'kernelUnitLength', kerning: 'kerning', keypoints: 'keyPoints', keysplines: 'keySplines', keytimes: 'keyTimes', lengthadjust: 'lengthAdjust', letterspacing: 'letterSpacing', 'letter-spacing': 'letterSpacing', lightingcolor: 'lightingColor', 'lighting-color': 'lightingColor', limitingconeangle: 'limitingConeAngle', local: 'local', markerend: 'markerEnd', 'marker-end': 'markerEnd', markerheight: 'markerHeight', markermid: 'markerMid', 'marker-mid': 'markerMid', markerstart: 'markerStart', 'marker-start': 'markerStart', markerunits: 'markerUnits', markerwidth: 'markerWidth', mask: 'mask', maskcontentunits: 'maskContentUnits', maskunits: 'maskUnits', mathematical: 'mathematical', mode: 'mode', numoctaves: 'numOctaves', offset: 'offset', opacity: 'opacity', operator: 'operator', order: 'order', orient: 'orient', orientation: 'orientation', origin: 'origin', overflow: 'overflow', overlineposition: 'overlinePosition', 'overline-position': 'overlinePosition', overlinethickness: 'overlineThickness', 'overline-thickness': 'overlineThickness', paintorder: 'paintOrder', 'paint-order': 'paintOrder', panose1: 'panose1', 'panose-1': 'panose1', pathlength: 'pathLength', patterncontentunits: 'patternContentUnits', patterntransform: 'patternTransform', patternunits: 'patternUnits', pointerevents: 'pointerEvents', 'pointer-events': 'pointerEvents', points: 'points', pointsatx: 'pointsAtX', pointsaty: 'pointsAtY', pointsatz: 'pointsAtZ', prefix: 'prefix', preservealpha: 'preserveAlpha', preserveaspectratio: 'preserveAspectRatio', primitiveunits: 'primitiveUnits', property: 'property', r: 'r', radius: 'radius', refx: 'refX', refy: 'refY', renderingintent: 'renderingIntent', 'rendering-intent': 'renderingIntent', repeatcount: 'repeatCount', repeatdur: 'repeatDur', requiredextensions: 'requiredExtensions', requiredfeatures: 'requiredFeatures', resource: 'resource', restart: 'restart', result: 'result', results: 'results', rotate: 'rotate', rx: 'rx', ry: 'ry', scale: 'scale', security: 'security', seed: 'seed', shaperendering: 'shapeRendering', 'shape-rendering': 'shapeRendering', slope: 'slope', spacing: 'spacing', specularconstant: 'specularConstant', specularexponent: 'specularExponent', speed: 'speed', spreadmethod: 'spreadMethod', startoffset: 'startOffset', stddeviation: 'stdDeviation', stemh: 'stemh', stemv: 'stemv', stitchtiles: 'stitchTiles', stopcolor: 'stopColor', 'stop-color': 'stopColor', stopopacity: 'stopOpacity', 'stop-opacity': 'stopOpacity', strikethroughposition: 'strikethroughPosition', 'strikethrough-position': 'strikethroughPosition', strikethroughthickness: 'strikethroughThickness', 'strikethrough-thickness': 'strikethroughThickness', string: 'string', stroke: 'stroke', strokedasharray: 'strokeDasharray', 'stroke-dasharray': 'strokeDasharray', strokedashoffset: 'strokeDashoffset', 'stroke-dashoffset': 'strokeDashoffset', strokelinecap: 'strokeLinecap', 'stroke-linecap': 'strokeLinecap', strokelinejoin: 'strokeLinejoin', 'stroke-linejoin': 'strokeLinejoin', strokemiterlimit: 'strokeMiterlimit', 'stroke-miterlimit': 'strokeMiterlimit', strokewidth: 'strokeWidth', 'stroke-width': 'strokeWidth', strokeopacity: 'strokeOpacity', 'stroke-opacity': 'strokeOpacity', suppresscontenteditablewarning: 'suppressContentEditableWarning', suppresshydrationwarning: 'suppressHydrationWarning', surfacescale: 'surfaceScale', systemlanguage: 'systemLanguage', tablevalues: 'tableValues', targetx: 'targetX', targety: 'targetY', textanchor: 'textAnchor', 'text-anchor': 'textAnchor', textdecoration: 'textDecoration', 'text-decoration': 'textDecoration', textlength: 'textLength', textrendering: 'textRendering', 'text-rendering': 'textRendering', to: 'to', transform: 'transform', typeof: 'typeof', u1: 'u1', u2: 'u2', underlineposition: 'underlinePosition', 'underline-position': 'underlinePosition', underlinethickness: 'underlineThickness', 'underline-thickness': 'underlineThickness', unicode: 'unicode', unicodebidi: 'unicodeBidi', 'unicode-bidi': 'unicodeBidi', unicoderange: 'unicodeRange', 'unicode-range': 'unicodeRange', unitsperem: 'unitsPerEm', 'units-per-em': 'unitsPerEm', unselectable: 'unselectable', valphabetic: 'vAlphabetic', 'v-alphabetic': 'vAlphabetic', values: 'values', vectoreffect: 'vectorEffect', 'vector-effect': 'vectorEffect', version: 'version', vertadvy: 'vertAdvY', 'vert-adv-y': 'vertAdvY', vertoriginx: 'vertOriginX', 'vert-origin-x': 'vertOriginX', vertoriginy: 'vertOriginY', 'vert-origin-y': 'vertOriginY', vhanging: 'vHanging', 'v-hanging': 'vHanging', videographic: 'vIdeographic', 'v-ideographic': 'vIdeographic', viewbox: 'viewBox', viewtarget: 'viewTarget', visibility: 'visibility', vmathematical: 'vMathematical', 'v-mathematical': 'vMathematical', vocab: 'vocab', widths: 'widths', wordspacing: 'wordSpacing', 'word-spacing': 'wordSpacing', writingmode: 'writingMode', 'writing-mode': 'writingMode', x1: 'x1', x2: 'x2', x: 'x', xchannelselector: 'xChannelSelector', xheight: 'xHeight', 'x-height': 'xHeight', xlinkactuate: 'xlinkActuate', 'xlink:actuate': 'xlinkActuate', xlinkarcrole: 'xlinkArcrole', 'xlink:arcrole': 'xlinkArcrole', xlinkhref: 'xlinkHref', 'xlink:href': 'xlinkHref', xlinkrole: 'xlinkRole', 'xlink:role': 'xlinkRole', xlinkshow: 'xlinkShow', 'xlink:show': 'xlinkShow', xlinktitle: 'xlinkTitle', 'xlink:title': 'xlinkTitle', xlinktype: 'xlinkType', 'xlink:type': 'xlinkType', xmlbase: 'xmlBase', 'xml:base': 'xmlBase', xmllang: 'xmlLang', 'xml:lang': 'xmlLang', xmlns: 'xmlns', 'xml:space': 'xmlSpace', xmlnsxlink: 'xmlnsXlink', 'xmlns:xlink': 'xmlnsXlink', xmlspace: 'xmlSpace', y1: 'y1', y2: 'y2', y: 'y', ychannelselector: 'yChannelSelector', z: 'z', zoomandpan: 'zoomAndPan'
                };
                var ariaProperties = { 'aria-current': 0,
                    'aria-details': 0, 'aria-disabled': 0,
                    'aria-hidden': 0,
                    'aria-invalid': 0,
                    'aria-keyshortcuts': 0, 'aria-label': 0, 'aria-roledescription': 0,
                    'aria-autocomplete': 0, 'aria-checked': 0, 'aria-expanded': 0, 'aria-haspopup': 0, 'aria-level': 0, 'aria-modal': 0, 'aria-multiline': 0, 'aria-multiselectable': 0, 'aria-orientation': 0, 'aria-placeholder': 0, 'aria-pressed': 0, 'aria-readonly': 0, 'aria-required': 0, 'aria-selected': 0, 'aria-sort': 0, 'aria-valuemax': 0, 'aria-valuemin': 0, 'aria-valuenow': 0, 'aria-valuetext': 0,
                    'aria-atomic': 0, 'aria-busy': 0, 'aria-live': 0, 'aria-relevant': 0,
                    'aria-dropeffect': 0, 'aria-grabbed': 0,
                    'aria-activedescendant': 0, 'aria-colcount': 0, 'aria-colindex': 0, 'aria-colspan': 0, 'aria-controls': 0, 'aria-describedby': 0, 'aria-errormessage': 0, 'aria-flowto': 0, 'aria-labelledby': 0, 'aria-owns': 0, 'aria-posinset': 0, 'aria-rowcount': 0, 'aria-rowindex': 0, 'aria-rowspan': 0, 'aria-setsize': 0 };
                var warnedProperties = {};
                var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
                var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
                var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
                function validateProperty(tagName, name) {
                    {
                        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                            return true;
                        }
                        if (rARIACamel.test(name)) {
                            var ariaName = 'aria-' + name.slice(4).toLowerCase();
                            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                            if (correctName == null) {
                                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                                warnedProperties[name] = true;
                                return true;
                            }
                            if (name !== correctName) {
                                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                                warnedProperties[name] = true;
                                return true;
                            }
                        }
                        if (rARIA.test(name)) {
                            var lowerCasedName = name.toLowerCase();
                            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                            if (standardName == null) {
                                warnedProperties[name] = true;
                                return false;
                            }
                            if (name !== standardName) {
                                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                                warnedProperties[name] = true;
                                return true;
                            }
                        }
                    }
                    return true;
                }
                function warnInvalidARIAProps(type, props) { {
                    var invalidProps = [];
                    for (var key in props) {
                        var isValid = validateProperty(type, key);
                        if (!isValid) {
                            invalidProps.push(key);
                        }
                    }
                    var unknownPropString = invalidProps.map(function (prop) { return '`' + prop + '`'; }).join(', ');
                    if (invalidProps.length === 1) {
                        error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
                    }
                    else if (invalidProps.length > 1) {
                        error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
                    }
                } }
                function validateProperties(type, props) { if (isCustomComponent(type, props)) {
                    return;
                } warnInvalidARIAProps(type, props); }
                var didWarnValueNull = false;
                function validateProperties$1(type, props) { {
                    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
                        return;
                    }
                    if (props != null && props.value === null && !didWarnValueNull) {
                        didWarnValueNull = true;
                        if (type === 'select' && props.multiple) {
                            error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
                        }
                        else {
                            error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
                        }
                    }
                } }
                var validateProperty$1 = function validateProperty$1() { };
                {
                    var warnedProperties$1 = {};
                    var _hasOwnProperty = Object.prototype.hasOwnProperty;
                    var EVENT_NAME_REGEX = /^on./;
                    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
                    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
                    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
                    validateProperty$1 = function validateProperty$1(tagName, name, value, canUseEventSystem) {
                        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                            return true;
                        }
                        var lowerCasedName = name.toLowerCase();
                        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
                            error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (canUseEventSystem) {
                            if (registrationNameModules.hasOwnProperty(name)) {
                                return true;
                            }
                            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                            if (registrationName != null) {
                                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                                warnedProperties$1[name] = true;
                                return true;
                            }
                            if (EVENT_NAME_REGEX.test(name)) {
                                error('Unknown event handler property `%s`. It will be ignored.', name);
                                warnedProperties$1[name] = true;
                                return true;
                            }
                        }
                        else if (EVENT_NAME_REGEX.test(name)) {
                            if (INVALID_EVENT_NAME_REGEX.test(name)) {
                                error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
                            }
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                            return true;
                        }
                        if (lowerCasedName === 'innerhtml') {
                            error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName === 'aria') {
                            error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
                            error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value === 'undefined' ? 'undefined' : _typeof(value));
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (typeof value === 'number' && isNaN(value)) {
                            error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        var propertyInfo = getPropertyInfo(name);
                        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
                        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                            var standardName = possibleStandardNames[lowerCasedName];
                            if (standardName !== name) {
                                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                                warnedProperties$1[name] = true;
                                return true;
                            }
                        }
                        else if (!isReserved && name !== lowerCasedName) {
                            error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                            if (value) {
                                error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
                            }
                            else {
                                error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                            }
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (isReserved) {
                            return true;
                        }
                        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                            warnedProperties$1[name] = true;
                            return false;
                        }
                        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                            error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        return true;
                    };
                }
                var warnUnknownProperties = function warnUnknownProperties(type, props, canUseEventSystem) { {
                    var unknownProps = [];
                    for (var key in props) {
                        var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
                        if (!isValid) {
                            unknownProps.push(key);
                        }
                    }
                    var unknownPropString = unknownProps.map(function (prop) { return '`' + prop + '`'; }).join(', ');
                    if (unknownProps.length === 1) {
                        error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
                    }
                    else if (unknownProps.length > 1) {
                        error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
                    }
                } };
                function validateProperties$2(type, props, canUseEventSystem) { if (isCustomComponent(type, props)) {
                    return;
                } warnUnknownProperties(type, props, canUseEventSystem); }
                var didWarnInvalidHydration = false;
                var didWarnShadyDOM = false;
                var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
                var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
                var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
                var AUTOFOCUS = 'autoFocus';
                var CHILDREN = 'children';
                var STYLE = 'style';
                var HTML$1 = '__html';
                var HTML_NAMESPACE$1 = Namespaces.html;
                var warnedUnknownTags;
                var suppressHydrationWarning;
                var validatePropertiesInDevelopment;
                var warnForTextDifference;
                var warnForPropDifference;
                var warnForExtraAttributes;
                var warnForInvalidEventListener;
                var canDiffStyleForHydrationWarning;
                var normalizeMarkupForTextOrAttribute;
                var normalizeHTML;
                {
                    warnedUnknownTags = {
                        time: true,
                        dialog: true,
                        webview: true
                    };
                    validatePropertiesInDevelopment = function validatePropertiesInDevelopment(type, props) { validateProperties(type, props); validateProperties$1(type, props); validateProperties$2(type, props, true); };
                    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
                    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
                    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
                    normalizeMarkupForTextOrAttribute = function normalizeMarkupForTextOrAttribute(markup) { var markupString = typeof markup === 'string' ? markup : '' + markup; return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, ''); };
                    warnForTextDifference = function warnForTextDifference(serverText, clientText) { if (didWarnInvalidHydration) {
                        return;
                    } var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText); var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText); if (normalizedServerText === normalizedClientText) {
                        return;
                    } didWarnInvalidHydration = true; error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText); };
                    warnForPropDifference = function warnForPropDifference(propName, serverValue, clientValue) { if (didWarnInvalidHydration) {
                        return;
                    } var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue); var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue); if (normalizedServerValue === normalizedClientValue) {
                        return;
                    } didWarnInvalidHydration = true; error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue)); };
                    warnForExtraAttributes = function warnForExtraAttributes(attributeNames) { if (didWarnInvalidHydration) {
                        return;
                    } didWarnInvalidHydration = true; var names = []; attributeNames.forEach(function (name) { names.push(name); }); error('Extra attributes from the server: %s', names); };
                    warnForInvalidEventListener = function warnForInvalidEventListener(registrationName, listener) { if (listener === false) {
                        error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
                    }
                    else {
                        error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener));
                    } };
                    normalizeHTML = function normalizeHTML(parent, html) {
                        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
                        testElement.innerHTML = html;
                        return testElement.innerHTML;
                    };
                }
                function ensureListeningTo(rootContainerElement, registrationName) { var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE; var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument; legacyListenToEvent(registrationName, doc); }
                function getOwnerDocumentFromRootContainer(rootContainerElement) { return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument; }
                function noop() { }
                function trapClickOnNonInteractiveElement(node) {
                    node.onclick = noop;
                }
                function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
                    for (var propKey in nextProps) {
                        if (!nextProps.hasOwnProperty(propKey)) {
                            continue;
                        }
                        var nextProp = nextProps[propKey];
                        if (propKey === STYLE) {
                            {
                                if (nextProp) {
                                    Object.freeze(nextProp);
                                }
                            }
                            setValueForStyles(domElement, nextProp);
                        }
                        else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                            if (nextHtml != null) {
                                setInnerHTML(domElement, nextHtml);
                            }
                        }
                        else if (propKey === CHILDREN) {
                            if (typeof nextProp === 'string') {
                                var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                                if (canSetTextContent) {
                                    setTextContent(domElement, nextProp);
                                }
                            }
                            else if (typeof nextProp === 'number') {
                                setTextContent(domElement, '' + nextProp);
                            }
                        }
                        else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                            ;
                        else if (propKey === AUTOFOCUS)
                            ;
                        else if (registrationNameModules.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (typeof nextProp !== 'function') {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                ensureListeningTo(rootContainerElement, propKey);
                            }
                        }
                        else if (nextProp != null) {
                            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
                        }
                    }
                }
                function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
                    for (var i = 0; i < updatePayload.length; i += 2) {
                        var propKey = updatePayload[i];
                        var propValue = updatePayload[i + 1];
                        if (propKey === STYLE) {
                            setValueForStyles(domElement, propValue);
                        }
                        else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            setInnerHTML(domElement, propValue);
                        }
                        else if (propKey === CHILDREN) {
                            setTextContent(domElement, propValue);
                        }
                        else {
                            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
                        }
                    }
                }
                function createElement(type, props, rootContainerElement, parentNamespace) {
                    var isCustomComponentTag;
                    var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
                    var domElement;
                    var namespaceURI = parentNamespace;
                    if (namespaceURI === HTML_NAMESPACE$1) {
                        namespaceURI = getIntrinsicNamespace(type);
                    }
                    if (namespaceURI === HTML_NAMESPACE$1) {
                        {
                            isCustomComponentTag = isCustomComponent(type, props);
                            if (!isCustomComponentTag && type !== type.toLowerCase()) {
                                error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
                            }
                        }
                        if (type === 'script') {
                            var div = ownerDocument.createElement('div');
                            div.innerHTML = '<script><' + '/script>';
                            var firstChild = div.firstChild;
                            domElement = div.removeChild(firstChild);
                        }
                        else if (typeof props.is === 'string') {
                            domElement = ownerDocument.createElement(type, { is: props.is });
                        }
                        else {
                            domElement = ownerDocument.createElement(type);
                            if (type === 'select') {
                                var node = domElement;
                                if (props.multiple) {
                                    node.multiple = true;
                                }
                                else if (props.size) {
                                    node.size = props.size;
                                }
                            }
                        }
                    }
                    else {
                        domElement = ownerDocument.createElementNS(namespaceURI, type);
                    }
                    {
                        if (namespaceURI === HTML_NAMESPACE$1) {
                            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                                warnedUnknownTags[type] = true;
                                error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
                            }
                        }
                    }
                    return domElement;
                }
                function createTextNode(text, rootContainerElement) { return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text); }
                function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
                    var isCustomComponentTag = isCustomComponent(tag, rawProps);
                    {
                        validatePropertiesInDevelopment(tag, rawProps);
                        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                            error('%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
                            didWarnShadyDOM = true;
                        }
                    }
                    var props;
                    switch (tag) {
                        case 'iframe':
                        case 'object':
                        case 'embed':
                            trapBubbledEvent(TOP_LOAD, domElement);
                            props = rawProps;
                            break;
                        case 'video':
                        case 'audio':
                            for (var i = 0; i < mediaEventTypes.length; i++) {
                                trapBubbledEvent(mediaEventTypes[i], domElement);
                            }
                            props = rawProps;
                            break;
                        case 'source':
                            trapBubbledEvent(TOP_ERROR, domElement);
                            props = rawProps;
                            break;
                        case 'img':
                        case 'image':
                        case 'link':
                            trapBubbledEvent(TOP_ERROR, domElement);
                            trapBubbledEvent(TOP_LOAD, domElement);
                            props = rawProps;
                            break;
                        case 'form':
                            trapBubbledEvent(TOP_RESET, domElement);
                            trapBubbledEvent(TOP_SUBMIT, domElement);
                            props = rawProps;
                            break;
                        case 'details':
                            trapBubbledEvent(TOP_TOGGLE, domElement);
                            props = rawProps;
                            break;
                        case 'input':
                            initWrapperState(domElement, rawProps);
                            props = getHostProps(domElement, rawProps);
                            trapBubbledEvent(TOP_INVALID, domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        case 'option':
                            validateProps(domElement, rawProps);
                            props = getHostProps$1(domElement, rawProps);
                            break;
                        case 'select':
                            initWrapperState$1(domElement, rawProps);
                            props = getHostProps$2(domElement, rawProps);
                            trapBubbledEvent(TOP_INVALID, domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        case 'textarea':
                            initWrapperState$2(domElement, rawProps);
                            props = getHostProps$3(domElement, rawProps);
                            trapBubbledEvent(TOP_INVALID, domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        default: props = rawProps;
                    }
                    assertValidProps(tag, props);
                    setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
                    switch (tag) {
                        case 'input':
                            track(domElement);
                            postMountWrapper(domElement, rawProps, false);
                            break;
                        case 'textarea':
                            track(domElement);
                            postMountWrapper$3(domElement);
                            break;
                        case 'option':
                            postMountWrapper$1(domElement, rawProps);
                            break;
                        case 'select':
                            postMountWrapper$2(domElement, rawProps);
                            break;
                        default:
                            if (typeof props.onClick === 'function') {
                                trapClickOnNonInteractiveElement(domElement);
                            }
                            break;
                    }
                }
                function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
                    {
                        validatePropertiesInDevelopment(tag, nextRawProps);
                    }
                    var updatePayload = null;
                    var lastProps;
                    var nextProps;
                    switch (tag) {
                        case 'input':
                            lastProps = getHostProps(domElement, lastRawProps);
                            nextProps = getHostProps(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        case 'option':
                            lastProps = getHostProps$1(domElement, lastRawProps);
                            nextProps = getHostProps$1(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        case 'select':
                            lastProps = getHostProps$2(domElement, lastRawProps);
                            nextProps = getHostProps$2(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        case 'textarea':
                            lastProps = getHostProps$3(domElement, lastRawProps);
                            nextProps = getHostProps$3(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        default:
                            lastProps = lastRawProps;
                            nextProps = nextRawProps;
                            if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
                                trapClickOnNonInteractiveElement(domElement);
                            }
                            break;
                    }
                    assertValidProps(tag, nextProps);
                    var propKey;
                    var styleName;
                    var styleUpdates = null;
                    for (propKey in lastProps) {
                        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                            continue;
                        }
                        if (propKey === STYLE) {
                            var lastStyle = lastProps[propKey];
                            for (styleName in lastStyle) {
                                if (lastStyle.hasOwnProperty(styleName)) {
                                    if (!styleUpdates) {
                                        styleUpdates = {};
                                    }
                                    styleUpdates[styleName] = '';
                                }
                            }
                        }
                        else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                            ;
                        else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                            ;
                        else if (propKey === AUTOFOCUS)
                            ;
                        else if (registrationNameModules.hasOwnProperty(propKey)) {
                            if (!updatePayload) {
                                updatePayload = [];
                            }
                        }
                        else {
                            (updatePayload = updatePayload || []).push(propKey, null);
                        }
                    }
                    for (propKey in nextProps) {
                        var nextProp = nextProps[propKey];
                        var lastProp = lastProps != null ? lastProps[propKey] : undefined;
                        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                            continue;
                        }
                        if (propKey === STYLE) {
                            {
                                if (nextProp) {
                                    Object.freeze(nextProp);
                                }
                            }
                            if (lastProp) {
                                for (styleName in lastProp) {
                                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                                        if (!styleUpdates) {
                                            styleUpdates = {};
                                        }
                                        styleUpdates[styleName] = '';
                                    }
                                }
                                for (styleName in nextProp) {
                                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                                        if (!styleUpdates) {
                                            styleUpdates = {};
                                        }
                                        styleUpdates[styleName] = nextProp[styleName];
                                    }
                                }
                            }
                            else {
                                if (!styleUpdates) {
                                    if (!updatePayload) {
                                        updatePayload = [];
                                    }
                                    updatePayload.push(propKey, styleUpdates);
                                }
                                styleUpdates = nextProp;
                            }
                        }
                        else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                            var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                            if (nextHtml != null) {
                                if (lastHtml !== nextHtml) {
                                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                                }
                            }
                        }
                        else if (propKey === CHILDREN) {
                            if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
                                (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
                            }
                        }
                        else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                            ;
                        else if (registrationNameModules.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (typeof nextProp !== 'function') {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                ensureListeningTo(rootContainerElement, propKey);
                            }
                            if (!updatePayload && lastProp !== nextProp) {
                                updatePayload = [];
                            }
                        }
                        else {
                            (updatePayload = updatePayload || []).push(propKey, nextProp);
                        }
                    }
                    if (styleUpdates) {
                        {
                            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
                        }
                        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
                    }
                    return updatePayload;
                }
                function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
                    if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
                        updateChecked(domElement, nextRawProps);
                    }
                    var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
                    var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
                    updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
                    switch (tag) {
                        case 'input':
                            updateWrapper(domElement, nextRawProps);
                            break;
                        case 'textarea':
                            updateWrapper$1(domElement, nextRawProps);
                            break;
                        case 'select':
                            postUpdateWrapper(domElement, nextRawProps);
                            break;
                    }
                }
                function getPossibleStandardName(propName) { {
                    var lowerCasedName = propName.toLowerCase();
                    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                        return null;
                    }
                    return possibleStandardNames[lowerCasedName] || null;
                } }
                function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
                    var isCustomComponentTag;
                    var extraAttributeNames;
                    {
                        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
                        isCustomComponentTag = isCustomComponent(tag, rawProps);
                        validatePropertiesInDevelopment(tag, rawProps);
                        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                            error('%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
                            didWarnShadyDOM = true;
                        }
                    }
                    switch (tag) {
                        case 'iframe':
                        case 'object':
                        case 'embed':
                            trapBubbledEvent(TOP_LOAD, domElement);
                            break;
                        case 'video':
                        case 'audio':
                            for (var i = 0; i < mediaEventTypes.length; i++) {
                                trapBubbledEvent(mediaEventTypes[i], domElement);
                            }
                            break;
                        case 'source':
                            trapBubbledEvent(TOP_ERROR, domElement);
                            break;
                        case 'img':
                        case 'image':
                        case 'link':
                            trapBubbledEvent(TOP_ERROR, domElement);
                            trapBubbledEvent(TOP_LOAD, domElement);
                            break;
                        case 'form':
                            trapBubbledEvent(TOP_RESET, domElement);
                            trapBubbledEvent(TOP_SUBMIT, domElement);
                            break;
                        case 'details':
                            trapBubbledEvent(TOP_TOGGLE, domElement);
                            break;
                        case 'input':
                            initWrapperState(domElement, rawProps);
                            trapBubbledEvent(TOP_INVALID, domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        case 'option':
                            validateProps(domElement, rawProps);
                            break;
                        case 'select':
                            initWrapperState$1(domElement, rawProps);
                            trapBubbledEvent(TOP_INVALID, domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        case 'textarea':
                            initWrapperState$2(domElement, rawProps);
                            trapBubbledEvent(TOP_INVALID, domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                    }
                    assertValidProps(tag, rawProps);
                    {
                        extraAttributeNames = new Set();
                        var attributes = domElement.attributes;
                        for (var _i = 0; _i < attributes.length; _i++) {
                            var name = attributes[_i].name.toLowerCase();
                            switch (name) {
                                case 'data-reactroot': break;
                                case 'value': break;
                                case 'checked': break;
                                case 'selected': break;
                                default:
                                    extraAttributeNames.add(attributes[_i].name);
                            }
                        }
                    }
                    var updatePayload = null;
                    for (var propKey in rawProps) {
                        if (!rawProps.hasOwnProperty(propKey)) {
                            continue;
                        }
                        var nextProp = rawProps[propKey];
                        if (propKey === CHILDREN) {
                            if (typeof nextProp === 'string') {
                                if (domElement.textContent !== nextProp) {
                                    if (!suppressHydrationWarning) {
                                        warnForTextDifference(domElement.textContent, nextProp);
                                    }
                                    updatePayload = [CHILDREN, nextProp];
                                }
                            }
                            else if (typeof nextProp === 'number') {
                                if (domElement.textContent !== '' + nextProp) {
                                    if (!suppressHydrationWarning) {
                                        warnForTextDifference(domElement.textContent, nextProp);
                                    }
                                    updatePayload = [CHILDREN, '' + nextProp];
                                }
                            }
                        }
                        else if (registrationNameModules.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (typeof nextProp !== 'function') {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                ensureListeningTo(rootContainerElement, propKey);
                            }
                        }
                        else if (typeof isCustomComponentTag === 'boolean') {
                            var serverValue = void 0;
                            var propertyInfo = getPropertyInfo(propKey);
                            if (suppressHydrationWarning)
                                ;
                            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING ||
                                propKey === 'value' || propKey === 'checked' || propKey === 'selected')
                                ;
                            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                                var serverHTML = domElement.innerHTML;
                                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                                var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
                                if (expectedHTML !== serverHTML) {
                                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                                }
                            }
                            else if (propKey === STYLE) {
                                extraAttributeNames.delete(propKey);
                                if (canDiffStyleForHydrationWarning) {
                                    var expectedStyle = createDangerousStringForStyles(nextProp);
                                    serverValue = domElement.getAttribute('style');
                                    if (expectedStyle !== serverValue) {
                                        warnForPropDifference(propKey, serverValue, expectedStyle);
                                    }
                                }
                            }
                            else if (isCustomComponentTag) {
                                extraAttributeNames.delete(propKey.toLowerCase());
                                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                                if (nextProp !== serverValue) {
                                    warnForPropDifference(propKey, serverValue, nextProp);
                                }
                            }
                            else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                                var isMismatchDueToBadCasing = false;
                                if (propertyInfo !== null) {
                                    extraAttributeNames.delete(propertyInfo.attributeName);
                                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                                }
                                else {
                                    var ownNamespace = parentNamespace;
                                    if (ownNamespace === HTML_NAMESPACE$1) {
                                        ownNamespace = getIntrinsicNamespace(tag);
                                    }
                                    if (ownNamespace === HTML_NAMESPACE$1) {
                                        extraAttributeNames.delete(propKey.toLowerCase());
                                    }
                                    else {
                                        var standardName = getPossibleStandardName(propKey);
                                        if (standardName !== null && standardName !== propKey) {
                                            isMismatchDueToBadCasing = true;
                                            extraAttributeNames.delete(standardName);
                                        }
                                        extraAttributeNames.delete(propKey);
                                    }
                                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                                }
                                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                                    warnForPropDifference(propKey, serverValue, nextProp);
                                }
                            }
                        }
                    }
                    {
                        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                            warnForExtraAttributes(extraAttributeNames);
                        }
                    }
                    switch (tag) {
                        case 'input':
                            track(domElement);
                            postMountWrapper(domElement, rawProps, true);
                            break;
                        case 'textarea':
                            track(domElement);
                            postMountWrapper$3(domElement);
                            break;
                        case 'select':
                        case 'option':
                            break;
                        default:
                            if (typeof rawProps.onClick === 'function') {
                                trapClickOnNonInteractiveElement(domElement);
                            }
                            break;
                    }
                    return updatePayload;
                }
                function diffHydratedText(textNode, text) { var isDifferent = textNode.nodeValue !== text; return isDifferent; }
                function warnForUnmatchedText(textNode, text) { {
                    warnForTextDifference(textNode.nodeValue, text);
                } }
                function warnForDeletedHydratableElement(parentNode, child) { {
                    if (didWarnInvalidHydration) {
                        return;
                    }
                    didWarnInvalidHydration = true;
                    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
                } }
                function warnForDeletedHydratableText(parentNode, child) { {
                    if (didWarnInvalidHydration) {
                        return;
                    }
                    didWarnInvalidHydration = true;
                    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
                } }
                function warnForInsertedHydratedElement(parentNode, tag, props) { {
                    if (didWarnInvalidHydration) {
                        return;
                    }
                    didWarnInvalidHydration = true;
                    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
                } }
                function warnForInsertedHydratedText(parentNode, text) {
                    {
                        if (text === '') {
                            return;
                        }
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
                    }
                }
                function restoreControlledState$3(domElement, tag, props) { switch (tag) {
                    case 'input':
                        restoreControlledState(domElement, props);
                        return;
                    case 'textarea':
                        restoreControlledState$2(domElement, props);
                        return;
                    case 'select':
                        restoreControlledState$1(domElement, props);
                        return;
                } }
                function getActiveElement(doc) { doc = doc || (typeof document !== 'undefined' ? document : undefined); if (typeof doc === 'undefined') {
                    return null;
                } try {
                    return doc.activeElement || doc.body;
                }
                catch (e) {
                    return doc.body;
                } }
                function getLeafNode(node) { while (node && node.firstChild) {
                    node = node.firstChild;
                } return node; }
                function getSiblingNode(node) { while (node) {
                    if (node.nextSibling) {
                        return node.nextSibling;
                    }
                    node = node.parentNode;
                } }
                function getNodeForCharacterOffset(root, offset) { var node = getLeafNode(root); var nodeStart = 0; var nodeEnd = 0; while (node) {
                    if (node.nodeType === TEXT_NODE) {
                        nodeEnd = nodeStart + node.textContent.length;
                        if (nodeStart <= offset && nodeEnd >= offset) {
                            return { node: node, offset: offset - nodeStart };
                        }
                        nodeStart = nodeEnd;
                    }
                    node = getLeafNode(getSiblingNode(node));
                } }
                function getOffsets(outerNode) {
                    var ownerDocument = outerNode.ownerDocument;
                    var win = ownerDocument && ownerDocument.defaultView || window;
                    var selection = win.getSelection && win.getSelection();
                    if (!selection || selection.rangeCount === 0) {
                        return null;
                    }
                    var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
                    try {
                        anchorNode.nodeType;
                        focusNode.nodeType;
                    }
                    catch (e) {
                        return null;
                    }
                    return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
                }
                function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
                    var length = 0;
                    var start = -1;
                    var end = -1;
                    var indexWithinAnchor = 0;
                    var indexWithinFocus = 0;
                    var node = outerNode;
                    var parentNode = null;
                    outer: while (true) {
                        var next = null;
                        while (true) {
                            if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                                start = length + anchorOffset;
                            }
                            if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                                end = length + focusOffset;
                            }
                            if (node.nodeType === TEXT_NODE) {
                                length += node.nodeValue.length;
                            }
                            if ((next = node.firstChild) === null) {
                                break;
                            }
                            parentNode = node;
                            node = next;
                        }
                        while (true) {
                            if (node === outerNode) {
                                break outer;
                            }
                            if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                                start = length;
                            }
                            if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                                end = length;
                            }
                            if ((next = node.nextSibling) !== null) {
                                break;
                            }
                            node = parentNode;
                            parentNode = node.parentNode;
                        }
                        node = next;
                    }
                    if (start === -1 || end === -1) {
                        return null;
                    }
                    return { start: start, end: end };
                }
                function setOffsets(node, offsets) {
                    var doc = node.ownerDocument || document;
                    var win = doc && doc.defaultView || window;
                    if (!win.getSelection) {
                        return;
                    }
                    var selection = win.getSelection();
                    var length = node.textContent.length;
                    var start = Math.min(offsets.start, length);
                    var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
                    if (!selection.extend && start > end) {
                        var temp = end;
                        end = start;
                        start = temp;
                    }
                    var startMarker = getNodeForCharacterOffset(node, start);
                    var endMarker = getNodeForCharacterOffset(node, end);
                    if (startMarker && endMarker) {
                        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                            return;
                        }
                        var range = doc.createRange();
                        range.setStart(startMarker.node, startMarker.offset);
                        selection.removeAllRanges();
                        if (start > end) {
                            selection.addRange(range);
                            selection.extend(endMarker.node, endMarker.offset);
                        }
                        else {
                            range.setEnd(endMarker.node, endMarker.offset);
                            selection.addRange(range);
                        }
                    }
                }
                function isTextNode(node) { return node && node.nodeType === TEXT_NODE; }
                function containsNode(outerNode, innerNode) { if (!outerNode || !innerNode) {
                    return false;
                }
                else if (outerNode === innerNode) {
                    return true;
                }
                else if (isTextNode(outerNode)) {
                    return false;
                }
                else if (isTextNode(innerNode)) {
                    return containsNode(outerNode, innerNode.parentNode);
                }
                else if ('contains' in outerNode) {
                    return outerNode.contains(innerNode);
                }
                else if (outerNode.compareDocumentPosition) {
                    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
                }
                else {
                    return false;
                } }
                function isInDocument(node) { return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node); }
                function isSameOriginFrame(iframe) {
                    try {
                        return typeof iframe.contentWindow.location.href === 'string';
                    }
                    catch (err) {
                        return false;
                    }
                }
                function getActiveElementDeep() { var win = window; var element = getActiveElement(); while (element instanceof win.HTMLIFrameElement) {
                    if (isSameOriginFrame(element)) {
                        win = element.contentWindow;
                    }
                    else {
                        return element;
                    }
                    element = getActiveElement(win.document);
                } return element; }
                function hasSelectionCapabilities(elem) { var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase(); return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true'); }
                function getSelectionInformation() {
                    var focusedElem = getActiveElementDeep();
                    return {
                        activeElementDetached: null, focusedElem: focusedElem, selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
                    };
                }
                function restoreSelection(priorSelectionInformation) {
                    var curFocusedElem = getActiveElementDeep();
                    var priorFocusedElem = priorSelectionInformation.focusedElem;
                    var priorSelectionRange = priorSelectionInformation.selectionRange;
                    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
                        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                            setSelection(priorFocusedElem, priorSelectionRange);
                        }
                        var ancestors = [];
                        var ancestor = priorFocusedElem;
                        while (ancestor = ancestor.parentNode) {
                            if (ancestor.nodeType === ELEMENT_NODE) {
                                ancestors.push({ element: ancestor, left: ancestor.scrollLeft, top: ancestor.scrollTop });
                            }
                        }
                        if (typeof priorFocusedElem.focus === 'function') {
                            priorFocusedElem.focus();
                        }
                        for (var i = 0; i < ancestors.length; i++) {
                            var info = ancestors[i];
                            info.element.scrollLeft = info.left;
                            info.element.scrollTop = info.top;
                        }
                    }
                }
                function getSelection(input) {
                    var selection;
                    if ('selectionStart' in input) {
                        selection = { start: input.selectionStart, end: input.selectionEnd };
                    }
                    else {
                        selection = getOffsets(input);
                    }
                    return selection || { start: 0, end: 0 };
                }
                function setSelection(input, offsets) { var start = offsets.start, end = offsets.end; if (end === undefined) {
                    end = start;
                } if ('selectionStart' in input) {
                    input.selectionStart = start;
                    input.selectionEnd = Math.min(end, input.value.length);
                }
                else {
                    setOffsets(input, offsets);
                } }
                var validateDOMNesting = function validateDOMNesting() { };
                var updatedAncestorInfo = function updatedAncestorInfo() { };
                {
                    var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
                    var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
                        'foreignObject', 'desc', 'title'];
                    var buttonScopeTags = inScopeTags.concat(['button']);
                    var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
                    var emptyAncestorInfo = { current: null, formTag: null, aTagInScope: null, buttonTagInScope: null, nobrTagInScope: null, pTagInButtonScope: null, listItemTagAutoclosing: null, dlItemTagAutoclosing: null };
                    updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag) {
                        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
                        var info = { tag: tag };
                        if (inScopeTags.indexOf(tag) !== -1) {
                            ancestorInfo.aTagInScope = null;
                            ancestorInfo.buttonTagInScope = null;
                            ancestorInfo.nobrTagInScope = null;
                        }
                        if (buttonScopeTags.indexOf(tag) !== -1) {
                            ancestorInfo.pTagInButtonScope = null;
                        }
                        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
                            ancestorInfo.listItemTagAutoclosing = null;
                            ancestorInfo.dlItemTagAutoclosing = null;
                        }
                        ancestorInfo.current = info;
                        if (tag === 'form') {
                            ancestorInfo.formTag = info;
                        }
                        if (tag === 'a') {
                            ancestorInfo.aTagInScope = info;
                        }
                        if (tag === 'button') {
                            ancestorInfo.buttonTagInScope = info;
                        }
                        if (tag === 'nobr') {
                            ancestorInfo.nobrTagInScope = info;
                        }
                        if (tag === 'p') {
                            ancestorInfo.pTagInButtonScope = info;
                        }
                        if (tag === 'li') {
                            ancestorInfo.listItemTagAutoclosing = info;
                        }
                        if (tag === 'dd' || tag === 'dt') {
                            ancestorInfo.dlItemTagAutoclosing = info;
                        }
                        return ancestorInfo;
                    };
                    var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
                        switch (parentTag) {
                            case 'select': return tag === 'option' || tag === 'optgroup' || tag === '#text';
                            case 'optgroup': return tag === 'option' || tag === '#text';
                            case 'option': return tag === '#text';
                            case 'tr': return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
                            case 'tbody':
                            case 'thead':
                            case 'tfoot': return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
                            case 'colgroup': return tag === 'col' || tag === 'template';
                            case 'table': return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
                            case 'head': return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
                            case 'html': return tag === 'head' || tag === 'body' || tag === 'frameset';
                            case 'frameset': return tag === 'frame';
                            case '#document': return tag === 'html';
                        }
                        switch (tag) {
                            case 'h1':
                            case 'h2':
                            case 'h3':
                            case 'h4':
                            case 'h5':
                            case 'h6': return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
                            case 'rp':
                            case 'rt': return impliedEndTags.indexOf(parentTag) === -1;
                            case 'body':
                            case 'caption':
                            case 'col':
                            case 'colgroup':
                            case 'frameset':
                            case 'frame':
                            case 'head':
                            case 'html':
                            case 'tbody':
                            case 'td':
                            case 'tfoot':
                            case 'th':
                            case 'thead':
                            case 'tr':
                                return parentTag == null;
                        }
                        return true;
                    };
                    var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
                        switch (tag) {
                            case 'address':
                            case 'article':
                            case 'aside':
                            case 'blockquote':
                            case 'center':
                            case 'details':
                            case 'dialog':
                            case 'dir':
                            case 'div':
                            case 'dl':
                            case 'fieldset':
                            case 'figcaption':
                            case 'figure':
                            case 'footer':
                            case 'header':
                            case 'hgroup':
                            case 'main':
                            case 'menu':
                            case 'nav':
                            case 'ol':
                            case 'p':
                            case 'section':
                            case 'summary':
                            case 'ul':
                            case 'pre':
                            case 'listing':
                            case 'table':
                            case 'hr':
                            case 'xmp':
                            case 'h1':
                            case 'h2':
                            case 'h3':
                            case 'h4':
                            case 'h5':
                            case 'h6': return ancestorInfo.pTagInButtonScope;
                            case 'form': return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                            case 'li': return ancestorInfo.listItemTagAutoclosing;
                            case 'dd':
                            case 'dt': return ancestorInfo.dlItemTagAutoclosing;
                            case 'button': return ancestorInfo.buttonTagInScope;
                            case 'a':
                                return ancestorInfo.aTagInScope;
                            case 'nobr': return ancestorInfo.nobrTagInScope;
                        }
                        return null;
                    };
                    var didWarn$1 = {};
                    validateDOMNesting = function validateDOMNesting(childTag, childText, ancestorInfo) { ancestorInfo = ancestorInfo || emptyAncestorInfo; var parentInfo = ancestorInfo.current; var parentTag = parentInfo && parentInfo.tag; if (childText != null) {
                        if (childTag != null) {
                            error('validateDOMNesting: when childText is passed, childTag should be null');
                        }
                        childTag = '#text';
                    } var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo; var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo); var invalidParentOrAncestor = invalidParent || invalidAncestor; if (!invalidParentOrAncestor) {
                        return;
                    } var ancestorTag = invalidParentOrAncestor.tag; var addendum = getCurrentFiberStackInDev(); var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum; if (didWarn$1[warnKey]) {
                        return;
                    } didWarn$1[warnKey] = true; var tagDisplayName = childTag; var whitespaceInfo = ''; if (childTag === '#text') {
                        if (/\S/.test(childText)) {
                            tagDisplayName = 'Text nodes';
                        }
                        else {
                            tagDisplayName = 'Whitespace text nodes';
                            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
                        }
                    }
                    else {
                        tagDisplayName = '<' + childTag + '>';
                    } if (invalidParent) {
                        var info = '';
                        if (ancestorTag === 'table' && childTag === 'tr') {
                            info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
                        }
                        error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
                    }
                    else {
                        error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
                    } };
                }
                var SUPPRESS_HYDRATION_WARNING$1;
                {
                    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
                }
                var SUSPENSE_START_DATA = '$';
                var SUSPENSE_END_DATA = '/$';
                var SUSPENSE_PENDING_START_DATA = '$?';
                var SUSPENSE_FALLBACK_START_DATA = '$!';
                var STYLE$1 = 'style';
                var eventsEnabled = null;
                var selectionInformation = null;
                function shouldAutoFocusHostComponent(type, props) { switch (type) {
                    case 'button':
                    case 'input':
                    case 'select':
                    case 'textarea': return !!props.autoFocus;
                } return false; }
                function getRootHostContext(rootContainerInstance) { var type; var namespace; var nodeType = rootContainerInstance.nodeType; switch (nodeType) {
                    case DOCUMENT_NODE:
                    case DOCUMENT_FRAGMENT_NODE: {
                        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                        var root = rootContainerInstance.documentElement;
                        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                        break;
                    }
                    default: {
                        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                        var ownNamespace = container.namespaceURI || null;
                        type = container.tagName;
                        namespace = getChildNamespace(ownNamespace, type);
                        break;
                    }
                } {
                    var validatedTag = type.toLowerCase();
                    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
                    return { namespace: namespace, ancestorInfo: ancestorInfo };
                } }
                function getChildHostContext(parentHostContext, type, rootContainerInstance) { {
                    var parentHostContextDev = parentHostContext;
                    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
                    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
                    return { namespace: namespace, ancestorInfo: ancestorInfo };
                } }
                function getPublicInstance(instance) { return instance; }
                function prepareForCommit(containerInfo) { eventsEnabled = isEnabled(); selectionInformation = getSelectionInformation(); setEnabled(false); }
                function resetAfterCommit(containerInfo) { restoreSelection(selectionInformation); setEnabled(eventsEnabled); eventsEnabled = null; selectionInformation = null; }
                function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                    var parentNamespace;
                    {
                        var hostContextDev = hostContext;
                        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
                        if (typeof props.children === 'string' || typeof props.children === 'number') {
                            var string = '' + props.children;
                            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                            validateDOMNesting(null, string, ownAncestorInfo);
                        }
                        parentNamespace = hostContextDev.namespace;
                    }
                    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
                    precacheFiberNode(internalInstanceHandle, domElement);
                    updateFiberProps(domElement, props);
                    return domElement;
                }
                function appendInitialChild(parentInstance, child) { parentInstance.appendChild(child); }
                function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) { setInitialProperties(domElement, type, props, rootContainerInstance); return shouldAutoFocusHostComponent(type, props); }
                function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) { {
                    var hostContextDev = hostContext;
                    if (_typeof(newProps.children) !== _typeof(oldProps.children) && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
                        var string = '' + newProps.children;
                        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                        validateDOMNesting(null, string, ownAncestorInfo);
                    }
                } return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance); }
                function shouldSetTextContent(type, props) { return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || _typeof(props.dangerouslySetInnerHTML) === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null; }
                function shouldDeprioritizeSubtree(type, props) { return !!props.hidden; }
                function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) { {
                    var hostContextDev = hostContext;
                    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
                } var textNode = createTextNode(text, rootContainerInstance); precacheFiberNode(internalInstanceHandle, textNode); return textNode; }
                var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
                var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
                var noTimeout = -1;
                function commitMount(domElement, type, newProps, internalInstanceHandle) {
                    if (shouldAutoFocusHostComponent(type, newProps)) {
                        domElement.focus();
                    }
                }
                function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
                    updateFiberProps(domElement, newProps);
                    updateProperties(domElement, updatePayload, type, oldProps, newProps);
                }
                function resetTextContent(domElement) { setTextContent(domElement, ''); }
                function commitTextUpdate(textInstance, oldText, newText) { textInstance.nodeValue = newText; }
                function appendChild(parentInstance, child) { parentInstance.appendChild(child); }
                function appendChildToContainer(container, child) {
                    var parentNode;
                    if (container.nodeType === COMMENT_NODE) {
                        parentNode = container.parentNode;
                        parentNode.insertBefore(child, container);
                    }
                    else {
                        parentNode = container;
                        parentNode.appendChild(child);
                    }
                    var reactRootContainer = container._reactRootContainer;
                    if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
                        trapClickOnNonInteractiveElement(parentNode);
                    }
                }
                function insertBefore(parentInstance, child, beforeChild) { parentInstance.insertBefore(child, beforeChild); }
                function insertInContainerBefore(container, child, beforeChild) { if (container.nodeType === COMMENT_NODE) {
                    container.parentNode.insertBefore(child, beforeChild);
                }
                else {
                    container.insertBefore(child, beforeChild);
                } }
                function removeChild(parentInstance, child) { parentInstance.removeChild(child); }
                function removeChildFromContainer(container, child) { if (container.nodeType === COMMENT_NODE) {
                    container.parentNode.removeChild(child);
                }
                else {
                    container.removeChild(child);
                } }
                function hideInstance(instance) {
                    instance = instance;
                    var style = instance.style;
                    if (typeof style.setProperty === 'function') {
                        style.setProperty('display', 'none', 'important');
                    }
                    else {
                        style.display = 'none';
                    }
                }
                function hideTextInstance(textInstance) { textInstance.nodeValue = ''; }
                function unhideInstance(instance, props) { instance = instance; var styleProp = props[STYLE$1]; var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null; instance.style.display = dangerousStyleValue('display', display); }
                function unhideTextInstance(textInstance, text) { textInstance.nodeValue = text; }
                function canHydrateInstance(instance, type, props) {
                    if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
                        return null;
                    }
                    return instance;
                }
                function canHydrateTextInstance(instance, text) {
                    if (text === '' || instance.nodeType !== TEXT_NODE) {
                        return null;
                    }
                    return instance;
                }
                function isSuspenseInstancePending(instance) { return instance.data === SUSPENSE_PENDING_START_DATA; }
                function isSuspenseInstanceFallback(instance) { return instance.data === SUSPENSE_FALLBACK_START_DATA; }
                function getNextHydratable(node) {
                    for (; node != null; node = node.nextSibling) {
                        var nodeType = node.nodeType;
                        if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                            break;
                        }
                    }
                    return node;
                }
                function getNextHydratableSibling(instance) { return getNextHydratable(instance.nextSibling); }
                function getFirstHydratableChild(parentInstance) { return getNextHydratable(parentInstance.firstChild); }
                function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                    precacheFiberNode(internalInstanceHandle, instance);
                    updateFiberProps(instance, props);
                    var parentNamespace;
                    {
                        var hostContextDev = hostContext;
                        parentNamespace = hostContextDev.namespace;
                    }
                    return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
                }
                function hydrateTextInstance(textInstance, text, internalInstanceHandle) { precacheFiberNode(internalInstanceHandle, textInstance); return diffHydratedText(textInstance, text); }
                function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
                    var node = suspenseInstance.nextSibling;
                    var depth = 0;
                    while (node) {
                        if (node.nodeType === COMMENT_NODE) {
                            var data = node.data;
                            if (data === SUSPENSE_END_DATA) {
                                if (depth === 0) {
                                    return getNextHydratableSibling(node);
                                }
                                else {
                                    depth--;
                                }
                            }
                            else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                                depth++;
                            }
                        }
                        node = node.nextSibling;
                    }
                    return null;
                }
                function getParentSuspenseInstance(targetInstance) {
                    var node = targetInstance.previousSibling;
                    var depth = 0;
                    while (node) {
                        if (node.nodeType === COMMENT_NODE) {
                            var data = node.data;
                            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                                if (depth === 0) {
                                    return node;
                                }
                                else {
                                    depth--;
                                }
                            }
                            else if (data === SUSPENSE_END_DATA) {
                                depth++;
                            }
                        }
                        node = node.previousSibling;
                    }
                    return null;
                }
                function commitHydratedContainer(container) {
                    retryIfBlockedOn(container);
                }
                function commitHydratedSuspenseInstance(suspenseInstance) {
                    retryIfBlockedOn(suspenseInstance);
                }
                function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) { {
                    warnForUnmatchedText(textInstance, text);
                } }
                function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) { if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                    warnForUnmatchedText(textInstance, text);
                } }
                function didNotHydrateContainerInstance(parentContainer, instance) { {
                    if (instance.nodeType === ELEMENT_NODE) {
                        warnForDeletedHydratableElement(parentContainer, instance);
                    }
                    else if (instance.nodeType === COMMENT_NODE)
                        ;
                    else {
                        warnForDeletedHydratableText(parentContainer, instance);
                    }
                } }
                function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) { if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                    if (instance.nodeType === ELEMENT_NODE) {
                        warnForDeletedHydratableElement(parentInstance, instance);
                    }
                    else if (instance.nodeType === COMMENT_NODE)
                        ;
                    else {
                        warnForDeletedHydratableText(parentInstance, instance);
                    }
                } }
                function didNotFindHydratableContainerInstance(parentContainer, type, props) { {
                    warnForInsertedHydratedElement(parentContainer, type);
                } }
                function didNotFindHydratableContainerTextInstance(parentContainer, text) { {
                    warnForInsertedHydratedText(parentContainer, text);
                } }
                function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) { if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                    warnForInsertedHydratedElement(parentInstance, type);
                } }
                function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) { if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                    warnForInsertedHydratedText(parentInstance, text);
                } }
                function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) { if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
                    ; }
                var randomKey = Math.random().toString(36).slice(2);
                var internalInstanceKey = '__reactInternalInstance$' + randomKey;
                var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
                var internalContainerInstanceKey = '__reactContainere$' + randomKey;
                function precacheFiberNode(hostInst, node) { node[internalInstanceKey] = hostInst; }
                function markContainerAsRoot(hostRoot, node) { node[internalContainerInstanceKey] = hostRoot; }
                function unmarkContainerAsRoot(node) { node[internalContainerInstanceKey] = null; }
                function isContainerMarkedAsRoot(node) { return !!node[internalContainerInstanceKey]; }
                function getClosestInstanceFromNode(targetNode) {
                    var targetInst = targetNode[internalInstanceKey];
                    if (targetInst) {
                        return targetInst;
                    }
                    var parentNode = targetNode.parentNode;
                    while (parentNode) {
                        targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
                        if (targetInst) {
                            var alternate = targetInst.alternate;
                            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                                var suspenseInstance = getParentSuspenseInstance(targetNode);
                                while (suspenseInstance !== null) {
                                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                                    if (targetSuspenseInst) {
                                        return targetSuspenseInst;
                                    }
                                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                                }
                            }
                            return targetInst;
                        }
                        targetNode = parentNode;
                        parentNode = targetNode.parentNode;
                    }
                    return null;
                }
                function getInstanceFromNode$1(node) { var inst = node[internalInstanceKey] || node[internalContainerInstanceKey]; if (inst) {
                    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                        return inst;
                    }
                    else {
                        return null;
                    }
                } return null; }
                function getNodeFromInstance$1(inst) {
                    if (inst.tag === HostComponent || inst.tag === HostText) {
                        return inst.stateNode;
                    }
                    {
                        {
                            throw Error("getNodeFromInstance: Invalid argument.");
                        }
                    }
                }
                function getFiberCurrentPropsFromNode$1(node) { return node[internalEventHandlersKey] || null; }
                function updateFiberProps(node, props) { node[internalEventHandlersKey] = props; }
                function getParent(inst) {
                    do {
                        inst = inst.return;
                    } while (inst && inst.tag !== HostComponent);
                    if (inst) {
                        return inst;
                    }
                    return null;
                }
                function getLowestCommonAncestor(instA, instB) {
                    var depthA = 0;
                    for (var tempA = instA; tempA; tempA = getParent(tempA)) {
                        depthA++;
                    }
                    var depthB = 0;
                    for (var tempB = instB; tempB; tempB = getParent(tempB)) {
                        depthB++;
                    }
                    while (depthA - depthB > 0) {
                        instA = getParent(instA);
                        depthA--;
                    }
                    while (depthB - depthA > 0) {
                        instB = getParent(instB);
                        depthB--;
                    }
                    var depth = depthA;
                    while (depth--) {
                        if (instA === instB || instA === instB.alternate) {
                            return instA;
                        }
                        instA = getParent(instA);
                        instB = getParent(instB);
                    }
                    return null;
                }
                function traverseTwoPhase(inst, fn, arg) { var path = []; while (inst) {
                    path.push(inst);
                    inst = getParent(inst);
                } var i; for (i = path.length; i-- > 0;) {
                    fn(path[i], 'captured', arg);
                } for (i = 0; i < path.length; i++) {
                    fn(path[i], 'bubbled', arg);
                } }
                function traverseEnterLeave(from, to, fn, argFrom, argTo) { var common = from && to ? getLowestCommonAncestor(from, to) : null; var pathFrom = []; while (true) {
                    if (!from) {
                        break;
                    }
                    if (from === common) {
                        break;
                    }
                    var alternate = from.alternate;
                    if (alternate !== null && alternate === common) {
                        break;
                    }
                    pathFrom.push(from);
                    from = getParent(from);
                } var pathTo = []; while (true) {
                    if (!to) {
                        break;
                    }
                    if (to === common) {
                        break;
                    }
                    var _alternate = to.alternate;
                    if (_alternate !== null && _alternate === common) {
                        break;
                    }
                    pathTo.push(to);
                    to = getParent(to);
                } for (var i = 0; i < pathFrom.length; i++) {
                    fn(pathFrom[i], 'bubbled', argFrom);
                } for (var _i = pathTo.length; _i-- > 0;) {
                    fn(pathTo[_i], 'captured', argTo);
                } }
                function isInteractive(tag) { return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea'; }
                function shouldPreventMouseEvent(name, type, props) { switch (name) {
                    case 'onClick':
                    case 'onClickCapture':
                    case 'onDoubleClick':
                    case 'onDoubleClickCapture':
                    case 'onMouseDown':
                    case 'onMouseDownCapture':
                    case 'onMouseMove':
                    case 'onMouseMoveCapture':
                    case 'onMouseUp':
                    case 'onMouseUpCapture':
                    case 'onMouseEnter': return !!(props.disabled && isInteractive(type));
                    default: return false;
                } }
                function getListener(inst, registrationName) {
                    var listener;
                    var stateNode = inst.stateNode;
                    if (!stateNode) {
                        return null;
                    }
                    var props = getFiberCurrentPropsFromNode(stateNode);
                    if (!props) {
                        return null;
                    }
                    listener = props[registrationName];
                    if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                        return null;
                    }
                    if (!(!listener || typeof listener === 'function')) {
                        {
                            throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) + "` type.");
                        }
                    }
                    return listener;
                }
                function listenerAtPhase(inst, event, propagationPhase) { var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase]; return getListener(inst, registrationName); }
                function accumulateDirectionalDispatches(inst, phase, event) { {
                    if (!inst) {
                        error('Dispatching inst must not be null');
                    }
                } var listener = listenerAtPhase(inst, event, phase); if (listener) {
                    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
                } }
                function accumulateTwoPhaseDispatchesSingle(event) { if (event && event.dispatchConfig.phasedRegistrationNames) {
                    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
                } }
                function accumulateDispatches(inst, ignoredDirection, event) { if (inst && event && event.dispatchConfig.registrationName) {
                    var registrationName = event.dispatchConfig.registrationName;
                    var listener = getListener(inst, registrationName);
                    if (listener) {
                        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
                    }
                } }
                function accumulateDirectDispatchesSingle(event) { if (event && event.dispatchConfig.registrationName) {
                    accumulateDispatches(event._targetInst, null, event);
                } }
                function accumulateTwoPhaseDispatches(events) { forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle); }
                function accumulateEnterLeaveDispatches(leave, enter, from, to) { traverseEnterLeave(from, to, accumulateDispatches, leave, enter); }
                function accumulateDirectDispatches(events) { forEachAccumulated(events, accumulateDirectDispatchesSingle); }
                var root = null;
                var startText = null;
                var fallbackText = null;
                function initialize(nativeEventTarget) { root = nativeEventTarget; startText = getText(); return true; }
                function reset() { root = null; startText = null; fallbackText = null; }
                function getData() { if (fallbackText) {
                    return fallbackText;
                } var start; var startValue = startText; var startLength = startValue.length; var end; var endValue = getText(); var endLength = endValue.length; for (start = 0; start < startLength; start++) {
                    if (startValue[start] !== endValue[start]) {
                        break;
                    }
                } var minEnd = startLength - start; for (end = 1; end <= minEnd; end++) {
                    if (startValue[startLength - end] !== endValue[endLength - end]) {
                        break;
                    }
                } var sliceTail = end > 1 ? 1 - end : undefined; fallbackText = endValue.slice(start, sliceTail); return fallbackText; }
                function getText() { if ('value' in root) {
                    return root.value;
                } return root.textContent; }
                var EVENT_POOL_SIZE = 10;
                var EventInterface = { type: null, target: null,
                    currentTarget: function currentTarget() { return null; }, eventPhase: null, bubbles: null, cancelable: null, timeStamp: function timeStamp(event) { return event.timeStamp || Date.now(); }, defaultPrevented: null, isTrusted: null };
                function functionThatReturnsTrue() { return true; }
                function functionThatReturnsFalse() { return false; }
                function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
                    {
                        delete this.nativeEvent;
                        delete this.preventDefault;
                        delete this.stopPropagation;
                        delete this.isDefaultPrevented;
                        delete this.isPropagationStopped;
                    }
                    this.dispatchConfig = dispatchConfig;
                    this._targetInst = targetInst;
                    this.nativeEvent = nativeEvent;
                    var Interface = this.constructor.Interface;
                    for (var propName in Interface) {
                        if (!Interface.hasOwnProperty(propName)) {
                            continue;
                        }
                        {
                            delete this[propName];
                        }
                        var normalize = Interface[propName];
                        if (normalize) {
                            this[propName] = normalize(nativeEvent);
                        }
                        else {
                            if (propName === 'target') {
                                this.target = nativeEventTarget;
                            }
                            else {
                                this[propName] = nativeEvent[propName];
                            }
                        }
                    }
                    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
                    if (defaultPrevented) {
                        this.isDefaultPrevented = functionThatReturnsTrue;
                    }
                    else {
                        this.isDefaultPrevented = functionThatReturnsFalse;
                    }
                    this.isPropagationStopped = functionThatReturnsFalse;
                    return this;
                }
                _assign(SyntheticEvent.prototype, { preventDefault: function preventDefault() { this.defaultPrevented = true; var event = this.nativeEvent; if (!event) {
                        return;
                    } if (event.preventDefault) {
                        event.preventDefault();
                    }
                    else if (typeof event.returnValue !== 'unknown') {
                        event.returnValue = false;
                    } this.isDefaultPrevented = functionThatReturnsTrue; }, stopPropagation: function stopPropagation() {
                        var event = this.nativeEvent;
                        if (!event) {
                            return;
                        }
                        if (event.stopPropagation) {
                            event.stopPropagation();
                        }
                        else if (typeof event.cancelBubble !== 'unknown') {
                            event.cancelBubble = true;
                        }
                        this.isPropagationStopped = functionThatReturnsTrue;
                    }, persist: function persist() { this.isPersistent = functionThatReturnsTrue; },
                    isPersistent: functionThatReturnsFalse, destructor: function destructor() { var Interface = this.constructor.Interface; for (var propName in Interface) {
                        {
                            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
                        }
                    } this.dispatchConfig = null; this._targetInst = null; this.nativeEvent = null; this.isDefaultPrevented = functionThatReturnsFalse; this.isPropagationStopped = functionThatReturnsFalse; this._dispatchListeners = null; this._dispatchInstances = null; {
                        Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
                        Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
                        Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
                        Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () { }));
                        Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () { }));
                    } } });
                SyntheticEvent.Interface = EventInterface;
                SyntheticEvent.extend = function (Interface) { var Super = this; var E = function E() { }; E.prototype = Super.prototype; var prototype = new E(); function Class() { return Super.apply(this, arguments); } _assign(prototype, Class.prototype); Class.prototype = prototype; Class.prototype.constructor = Class; Class.Interface = _assign({}, Super.Interface, Interface); Class.extend = Super.extend; addEventPoolingTo(Class); return Class; };
                addEventPoolingTo(SyntheticEvent);
                function getPooledWarningPropertyDefinition(propName, getVal) { var isFunction = typeof getVal === 'function'; return { configurable: true, set: set, get: get }; function set(val) { var action = isFunction ? 'setting the method' : 'setting the property'; warn(action, 'This is effectively a no-op'); return val; } function get() { var action = isFunction ? 'accessing the method' : 'accessing the property'; var result = isFunction ? 'This is a no-op function' : 'This is set to null'; warn(action, result); return getVal; } function warn(action, result) { {
                    error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
                } } }
                function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) { var EventConstructor = this; if (EventConstructor.eventPool.length) {
                    var instance = EventConstructor.eventPool.pop();
                    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
                    return instance;
                } return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst); }
                function releasePooledEvent(event) { var EventConstructor = this; if (!(event instanceof EventConstructor)) {
                    {
                        throw Error("Trying to release an event instance into a pool of a different type.");
                    }
                } event.destructor(); if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
                    EventConstructor.eventPool.push(event);
                } }
                function addEventPoolingTo(EventConstructor) { EventConstructor.eventPool = []; EventConstructor.getPooled = getPooledEvent; EventConstructor.release = releasePooledEvent; }
                var SyntheticCompositionEvent = SyntheticEvent.extend({ data: null });
                var SyntheticInputEvent = SyntheticEvent.extend({ data: null });
                var END_KEYCODES = [9, 13, 27, 32];
                var START_KEYCODE = 229;
                var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
                var documentMode = null;
                if (canUseDOM && 'documentMode' in document) {
                    documentMode = document.documentMode;
                }
                var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;
                var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
                var SPACEBAR_CODE = 32;
                var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
                var eventTypes = { beforeInput: { phasedRegistrationNames: { bubbled: 'onBeforeInput', captured: 'onBeforeInputCapture' }, dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE] }, compositionEnd: { phasedRegistrationNames: { bubbled: 'onCompositionEnd', captured: 'onCompositionEndCapture' }, dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN] }, compositionStart: { phasedRegistrationNames: { bubbled: 'onCompositionStart', captured: 'onCompositionStartCapture' }, dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN] }, compositionUpdate: { phasedRegistrationNames: { bubbled: 'onCompositionUpdate', captured: 'onCompositionUpdateCapture' }, dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN] } };
                var hasSpaceKeypress = false;
                function isKeypressCommand(nativeEvent) {
                    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
                        !(nativeEvent.ctrlKey && nativeEvent.altKey);
                }
                function getCompositionEventType(topLevelType) { switch (topLevelType) {
                    case TOP_COMPOSITION_START: return eventTypes.compositionStart;
                    case TOP_COMPOSITION_END: return eventTypes.compositionEnd;
                    case TOP_COMPOSITION_UPDATE: return eventTypes.compositionUpdate;
                } }
                function isFallbackCompositionStart(topLevelType, nativeEvent) { return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE; }
                function isFallbackCompositionEnd(topLevelType, nativeEvent) {
                    switch (topLevelType) {
                        case TOP_KEY_UP:
                            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
                        case TOP_KEY_DOWN:
                            return nativeEvent.keyCode !== START_KEYCODE;
                        case TOP_KEY_PRESS:
                        case TOP_MOUSE_DOWN:
                        case TOP_BLUR:
                            return true;
                        default: return false;
                    }
                }
                function getDataFromCustomEvent(nativeEvent) { var detail = nativeEvent.detail; if ((typeof detail === 'undefined' ? 'undefined' : _typeof(detail)) === 'object' && 'data' in detail) {
                    return detail.data;
                } return null; }
                function isUsingKoreanIME(nativeEvent) { return nativeEvent.locale === 'ko'; }
                var isComposing = false;
                function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                    var eventType;
                    var fallbackData;
                    if (canUseCompositionEvent) {
                        eventType = getCompositionEventType(topLevelType);
                    }
                    else if (!isComposing) {
                        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                            eventType = eventTypes.compositionStart;
                        }
                    }
                    else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                        eventType = eventTypes.compositionEnd;
                    }
                    if (!eventType) {
                        return null;
                    }
                    if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
                        if (!isComposing && eventType === eventTypes.compositionStart) {
                            isComposing = initialize(nativeEventTarget);
                        }
                        else if (eventType === eventTypes.compositionEnd) {
                            if (isComposing) {
                                fallbackData = getData();
                            }
                        }
                    }
                    var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
                    if (fallbackData) {
                        event.data = fallbackData;
                    }
                    else {
                        var customData = getDataFromCustomEvent(nativeEvent);
                        if (customData !== null) {
                            event.data = customData;
                        }
                    }
                    accumulateTwoPhaseDispatches(event);
                    return event;
                }
                function getNativeBeforeInputChars(topLevelType, nativeEvent) {
                    switch (topLevelType) {
                        case TOP_COMPOSITION_END: return getDataFromCustomEvent(nativeEvent);
                        case TOP_KEY_PRESS:
                            var which = nativeEvent.which;
                            if (which !== SPACEBAR_CODE) {
                                return null;
                            }
                            hasSpaceKeypress = true;
                            return SPACEBAR_CHAR;
                        case TOP_TEXT_INPUT:
                            var chars = nativeEvent.data;
                            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                                return null;
                            }
                            return chars;
                        default:
                            return null;
                    }
                }
                function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
                    if (isComposing) {
                        if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                            var chars = getData();
                            reset();
                            isComposing = false;
                            return chars;
                        }
                        return null;
                    }
                    switch (topLevelType) {
                        case TOP_PASTE:
                            return null;
                        case TOP_KEY_PRESS:
                            if (!isKeypressCommand(nativeEvent)) {
                                if (nativeEvent.char && nativeEvent.char.length > 1) {
                                    return nativeEvent.char;
                                }
                                else if (nativeEvent.which) {
                                    return String.fromCharCode(nativeEvent.which);
                                }
                            }
                            return null;
                        case TOP_COMPOSITION_END: return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
                        default: return null;
                    }
                }
                function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                    var chars;
                    if (canUseTextInputEvent) {
                        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
                    }
                    else {
                        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
                    }
                    if (!chars) {
                        return null;
                    }
                    var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
                    event.data = chars;
                    accumulateTwoPhaseDispatches(event);
                    return event;
                }
                var BeforeInputEventPlugin = { eventTypes: eventTypes, extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) { var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget); var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget); if (composition === null) {
                        return beforeInput;
                    } if (beforeInput === null) {
                        return composition;
                    } return [composition, beforeInput]; } };
                var supportedInputTypes = { color: true, date: true, datetime: true, 'datetime-local': true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
                function isTextInputElement(elem) { var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase(); if (nodeName === 'input') {
                    return !!supportedInputTypes[elem.type];
                } if (nodeName === 'textarea') {
                    return true;
                } return false; }
                var eventTypes$1 = { change: { phasedRegistrationNames: { bubbled: 'onChange', captured: 'onChangeCapture' }, dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE] } };
                function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
                    var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
                    event.type = 'change';
                    enqueueStateRestore(target);
                    accumulateTwoPhaseDispatches(event);
                    return event;
                }
                var activeElement = null;
                var activeElementInst = null;
                function shouldUseChangeEvent(elem) { var nodeName = elem.nodeName && elem.nodeName.toLowerCase(); return nodeName === 'select' || nodeName === 'input' && elem.type === 'file'; }
                function manualDispatchChangeEvent(nativeEvent) {
                    var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
                    batchedUpdates(runEventInBatch, event);
                }
                function runEventInBatch(event) { runEventsInBatch(event); }
                function getInstIfValueChanged(targetInst) { var targetNode = getNodeFromInstance$1(targetInst); if (updateValueIfChanged(targetNode)) {
                    return targetInst;
                } }
                function getTargetInstForChangeEvent(topLevelType, targetInst) { if (topLevelType === TOP_CHANGE) {
                    return targetInst;
                } }
                var isInputEventSupported = false;
                if (canUseDOM) {
                    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
                }
                function startWatchingForValueChange(target, targetInst) { activeElement = target; activeElementInst = targetInst; activeElement.attachEvent('onpropertychange', handlePropertyChange); }
                function stopWatchingForValueChange() { if (!activeElement) {
                    return;
                } activeElement.detachEvent('onpropertychange', handlePropertyChange); activeElement = null; activeElementInst = null; }
                function handlePropertyChange(nativeEvent) { if (nativeEvent.propertyName !== 'value') {
                    return;
                } if (getInstIfValueChanged(activeElementInst)) {
                    manualDispatchChangeEvent(nativeEvent);
                } }
                function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
                    if (topLevelType === TOP_FOCUS) {
                        stopWatchingForValueChange();
                        startWatchingForValueChange(target, targetInst);
                    }
                    else if (topLevelType === TOP_BLUR) {
                        stopWatchingForValueChange();
                    }
                }
                function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
                    if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
                        return getInstIfValueChanged(activeElementInst);
                    }
                }
                function shouldUseClickEvent(elem) {
                    var nodeName = elem.nodeName;
                    return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
                }
                function getTargetInstForClickEvent(topLevelType, targetInst) { if (topLevelType === TOP_CLICK) {
                    return getInstIfValueChanged(targetInst);
                } }
                function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) { if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
                    return getInstIfValueChanged(targetInst);
                } }
                function handleControlledInputBlur(node) {
                    var state = node._wrapperState;
                    if (!state || !state.controlled || node.type !== 'number') {
                        return;
                    }
                    {
                        setDefaultValue(node, 'number', node.value);
                    }
                }
                var ChangeEventPlugin = { eventTypes: eventTypes$1, _isInputEventSupported: isInputEventSupported, extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
                        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
                        var getTargetInstFunc, handleEventFunc;
                        if (shouldUseChangeEvent(targetNode)) {
                            getTargetInstFunc = getTargetInstForChangeEvent;
                        }
                        else if (isTextInputElement(targetNode)) {
                            if (isInputEventSupported) {
                                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                            }
                            else {
                                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                                handleEventFunc = handleEventsForInputEventPolyfill;
                            }
                        }
                        else if (shouldUseClickEvent(targetNode)) {
                            getTargetInstFunc = getTargetInstForClickEvent;
                        }
                        if (getTargetInstFunc) {
                            var inst = getTargetInstFunc(topLevelType, targetInst);
                            if (inst) {
                                var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                                return event;
                            }
                        }
                        if (handleEventFunc) {
                            handleEventFunc(topLevelType, targetNode, targetInst);
                        }
                        if (topLevelType === TOP_BLUR) {
                            handleControlledInputBlur(targetNode);
                        }
                    } };
                var SyntheticUIEvent = SyntheticEvent.extend({ view: null, detail: null });
                var modifierKeyToProp = { Alt: 'altKey', Control: 'ctrlKey', Meta: 'metaKey', Shift: 'shiftKey' };
                function modifierStateGetter(keyArg) { var syntheticEvent = this; var nativeEvent = syntheticEvent.nativeEvent; if (nativeEvent.getModifierState) {
                    return nativeEvent.getModifierState(keyArg);
                } var keyProp = modifierKeyToProp[keyArg]; return keyProp ? !!nativeEvent[keyProp] : false; }
                function getEventModifierState(nativeEvent) { return modifierStateGetter; }
                var previousScreenX = 0;
                var previousScreenY = 0;
                var isMovementXSet = false;
                var isMovementYSet = false;
                var SyntheticMouseEvent = SyntheticUIEvent.extend({ screenX: null, screenY: null, clientX: null, clientY: null, pageX: null, pageY: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, getModifierState: getEventModifierState, button: null, buttons: null, relatedTarget: function relatedTarget(event) { return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement); }, movementX: function movementX(event) { if ('movementX' in event) {
                        return event.movementX;
                    } var screenX = previousScreenX; previousScreenX = event.screenX; if (!isMovementXSet) {
                        isMovementXSet = true;
                        return 0;
                    } return event.type === 'mousemove' ? event.screenX - screenX : 0; }, movementY: function movementY(event) { if ('movementY' in event) {
                        return event.movementY;
                    } var screenY = previousScreenY; previousScreenY = event.screenY; if (!isMovementYSet) {
                        isMovementYSet = true;
                        return 0;
                    } return event.type === 'mousemove' ? event.screenY - screenY : 0; } });
                var SyntheticPointerEvent = SyntheticMouseEvent.extend({ pointerId: null, width: null, height: null, pressure: null, tangentialPressure: null, tiltX: null, tiltY: null, twist: null, pointerType: null, isPrimary: null });
                var eventTypes$2 = { mouseEnter: { registrationName: 'onMouseEnter', dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER] }, mouseLeave: { registrationName: 'onMouseLeave', dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER] }, pointerEnter: { registrationName: 'onPointerEnter', dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER] }, pointerLeave: { registrationName: 'onPointerLeave', dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER] } };
                var EnterLeaveEventPlugin = { eventTypes: eventTypes$2, extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
                        var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
                        var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
                        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
                            return null;
                        }
                        if (!isOutEvent && !isOverEvent) {
                            return null;
                        }
                        var win;
                        if (nativeEventTarget.window === nativeEventTarget) {
                            win = nativeEventTarget;
                        }
                        else {
                            var doc = nativeEventTarget.ownerDocument;
                            if (doc) {
                                win = doc.defaultView || doc.parentWindow;
                            }
                            else {
                                win = window;
                            }
                        }
                        var from;
                        var to;
                        if (isOutEvent) {
                            from = targetInst;
                            var related = nativeEvent.relatedTarget || nativeEvent.toElement;
                            to = related ? getClosestInstanceFromNode(related) : null;
                            if (to !== null) {
                                var nearestMounted = getNearestMountedFiber(to);
                                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                                    to = null;
                                }
                            }
                        }
                        else {
                            from = null;
                            to = targetInst;
                        }
                        if (from === to) {
                            return null;
                        }
                        var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
                        if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
                            eventInterface = SyntheticMouseEvent;
                            leaveEventType = eventTypes$2.mouseLeave;
                            enterEventType = eventTypes$2.mouseEnter;
                            eventTypePrefix = 'mouse';
                        }
                        else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
                            eventInterface = SyntheticPointerEvent;
                            leaveEventType = eventTypes$2.pointerLeave;
                            enterEventType = eventTypes$2.pointerEnter;
                            eventTypePrefix = 'pointer';
                        }
                        var fromNode = from == null ? win : getNodeFromInstance$1(from);
                        var toNode = to == null ? win : getNodeFromInstance$1(to);
                        var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
                        leave.type = eventTypePrefix + 'leave';
                        leave.target = fromNode;
                        leave.relatedTarget = toNode;
                        var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
                        enter.type = eventTypePrefix + 'enter';
                        enter.target = toNode;
                        enter.relatedTarget = fromNode;
                        accumulateEnterLeaveDispatches(leave, enter, from, to);
                        if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
                            return [leave];
                        }
                        return [leave, enter];
                    } };
                function is(x, y) {
                    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
                }
                var objectIs = typeof Object.is === 'function' ? Object.is : is;
                var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
                function shallowEqual(objA, objB) {
                    if (objectIs(objA, objB)) {
                        return true;
                    }
                    if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
                        return false;
                    }
                    var keysA = Object.keys(objA);
                    var keysB = Object.keys(objB);
                    if (keysA.length !== keysB.length) {
                        return false;
                    }
                    for (var i = 0; i < keysA.length; i++) {
                        if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                            return false;
                        }
                    }
                    return true;
                }
                var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
                var eventTypes$3 = { select: { phasedRegistrationNames: { bubbled: 'onSelect', captured: 'onSelectCapture' }, dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE] } };
                var activeElement$1 = null;
                var activeElementInst$1 = null;
                var lastSelection = null;
                var mouseDown = false;
                function getSelection$1(node) { if ('selectionStart' in node && hasSelectionCapabilities(node)) {
                    return { start: node.selectionStart, end: node.selectionEnd };
                }
                else {
                    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
                    var selection = win.getSelection();
                    return { anchorNode: selection.anchorNode, anchorOffset: selection.anchorOffset, focusNode: selection.focusNode, focusOffset: selection.focusOffset };
                } }
                function getEventTargetDocument(eventTarget) { return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument; }
                function constructSelectEvent(nativeEvent, nativeEventTarget) {
                    var doc = getEventTargetDocument(nativeEventTarget);
                    if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
                        return null;
                    }
                    var currentSelection = getSelection$1(activeElement$1);
                    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
                        lastSelection = currentSelection;
                        var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
                        syntheticEvent.type = 'select';
                        syntheticEvent.target = activeElement$1;
                        accumulateTwoPhaseDispatches(syntheticEvent);
                        return syntheticEvent;
                    }
                    return null;
                }
                var SelectEventPlugin = { eventTypes: eventTypes$3, extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
                        var containerOrDoc = container || getEventTargetDocument(nativeEventTarget);
                        if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) {
                            return null;
                        }
                        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
                        switch (topLevelType) {
                            case TOP_FOCUS:
                                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                                    activeElement$1 = targetNode;
                                    activeElementInst$1 = targetInst;
                                    lastSelection = null;
                                }
                                break;
                            case TOP_BLUR:
                                activeElement$1 = null;
                                activeElementInst$1 = null;
                                lastSelection = null;
                                break;
                            case TOP_MOUSE_DOWN:
                                mouseDown = true;
                                break;
                            case TOP_CONTEXT_MENU:
                            case TOP_MOUSE_UP:
                            case TOP_DRAG_END:
                                mouseDown = false;
                                return constructSelectEvent(nativeEvent, nativeEventTarget);
                            case TOP_SELECTION_CHANGE: if (skipSelectionChangeEvent) {
                                break;
                            }
                            case TOP_KEY_DOWN:
                            case TOP_KEY_UP: return constructSelectEvent(nativeEvent, nativeEventTarget);
                        }
                        return null;
                    } };
                var SyntheticAnimationEvent = SyntheticEvent.extend({ animationName: null, elapsedTime: null, pseudoElement: null });
                var SyntheticClipboardEvent = SyntheticEvent.extend({ clipboardData: function clipboardData(event) { return 'clipboardData' in event ? event.clipboardData : window.clipboardData; } });
                var SyntheticFocusEvent = SyntheticUIEvent.extend({ relatedTarget: null });
                function getEventCharCode(nativeEvent) {
                    var charCode;
                    var keyCode = nativeEvent.keyCode;
                    if ('charCode' in nativeEvent) {
                        charCode = nativeEvent.charCode;
                        if (charCode === 0 && keyCode === 13) {
                            charCode = 13;
                        }
                    }
                    else {
                        charCode = keyCode;
                    }
                    if (charCode === 10) {
                        charCode = 13;
                    }
                    if (charCode >= 32 || charCode === 13) {
                        return charCode;
                    }
                    return 0;
                }
                var normalizeKey = { Esc: 'Escape', Spacebar: ' ', Left: 'ArrowLeft', Up: 'ArrowUp', Right: 'ArrowRight', Down: 'ArrowDown', Del: 'Delete', Win: 'OS', Menu: 'ContextMenu', Apps: 'ContextMenu', Scroll: 'ScrollLock', MozPrintableKey: 'Unidentified' };
                var translateToKey = { '8': 'Backspace', '9': 'Tab', '12': 'Clear', '13': 'Enter', '16': 'Shift', '17': 'Control', '18': 'Alt', '19': 'Pause', '20': 'CapsLock', '27': 'Escape', '32': ' ', '33': 'PageUp', '34': 'PageDown', '35': 'End', '36': 'Home', '37': 'ArrowLeft', '38': 'ArrowUp', '39': 'ArrowRight', '40': 'ArrowDown', '45': 'Insert', '46': 'Delete', '112': 'F1', '113': 'F2', '114': 'F3', '115': 'F4', '116': 'F5', '117': 'F6', '118': 'F7', '119': 'F8', '120': 'F9', '121': 'F10', '122': 'F11', '123': 'F12', '144': 'NumLock', '145': 'ScrollLock', '224': 'Meta' };
                function getEventKey(nativeEvent) {
                    if (nativeEvent.key) {
                        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
                        if (key !== 'Unidentified') {
                            return key;
                        }
                    }
                    if (nativeEvent.type === 'keypress') {
                        var charCode = getEventCharCode(nativeEvent);
                        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
                    }
                    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
                        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
                    }
                    return '';
                }
                var SyntheticKeyboardEvent = SyntheticUIEvent.extend({ key: getEventKey, location: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, repeat: null, locale: null, getModifierState: getEventModifierState,
                    charCode: function charCode(event) {
                        if (event.type === 'keypress') {
                            return getEventCharCode(event);
                        }
                        return 0;
                    }, keyCode: function keyCode(event) {
                        if (event.type === 'keydown' || event.type === 'keyup') {
                            return event.keyCode;
                        }
                        return 0;
                    }, which: function which(event) {
                        if (event.type === 'keypress') {
                            return getEventCharCode(event);
                        }
                        if (event.type === 'keydown' || event.type === 'keyup') {
                            return event.keyCode;
                        }
                        return 0;
                    } });
                var SyntheticDragEvent = SyntheticMouseEvent.extend({ dataTransfer: null });
                var SyntheticTouchEvent = SyntheticUIEvent.extend({ touches: null, targetTouches: null, changedTouches: null, altKey: null, metaKey: null, ctrlKey: null, shiftKey: null, getModifierState: getEventModifierState });
                var SyntheticTransitionEvent = SyntheticEvent.extend({ propertyName: null, elapsedTime: null, pseudoElement: null });
                var SyntheticWheelEvent = SyntheticMouseEvent.extend({ deltaX: function deltaX(event) {
                        return 'deltaX' in event ? event.deltaX :
                            'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
                    }, deltaY: function deltaY(event) {
                        return 'deltaY' in event ? event.deltaY :
                            'wheelDeltaY' in event ? -event.wheelDeltaY :
                                'wheelDelta' in event ? -event.wheelDelta : 0;
                    }, deltaZ: null,
                    deltaMode: null });
                var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
                var SimpleEventPlugin = {
                    eventTypes: simpleEventPluginEventTypes,
                    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
                        var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
                        if (!dispatchConfig) {
                            return null;
                        }
                        var EventConstructor;
                        switch (topLevelType) {
                            case TOP_KEY_PRESS:
                                if (getEventCharCode(nativeEvent) === 0) {
                                    return null;
                                }
                            case TOP_KEY_DOWN:
                            case TOP_KEY_UP:
                                EventConstructor = SyntheticKeyboardEvent;
                                break;
                            case TOP_BLUR:
                            case TOP_FOCUS:
                                EventConstructor = SyntheticFocusEvent;
                                break;
                            case TOP_CLICK:
                                if (nativeEvent.button === 2) {
                                    return null;
                                }
                            case TOP_AUX_CLICK:
                            case TOP_DOUBLE_CLICK:
                            case TOP_MOUSE_DOWN:
                            case TOP_MOUSE_MOVE:
                            case TOP_MOUSE_UP:
                            case TOP_MOUSE_OUT:
                            case TOP_MOUSE_OVER:
                            case TOP_CONTEXT_MENU:
                                EventConstructor = SyntheticMouseEvent;
                                break;
                            case TOP_DRAG:
                            case TOP_DRAG_END:
                            case TOP_DRAG_ENTER:
                            case TOP_DRAG_EXIT:
                            case TOP_DRAG_LEAVE:
                            case TOP_DRAG_OVER:
                            case TOP_DRAG_START:
                            case TOP_DROP:
                                EventConstructor = SyntheticDragEvent;
                                break;
                            case TOP_TOUCH_CANCEL:
                            case TOP_TOUCH_END:
                            case TOP_TOUCH_MOVE:
                            case TOP_TOUCH_START:
                                EventConstructor = SyntheticTouchEvent;
                                break;
                            case TOP_ANIMATION_END:
                            case TOP_ANIMATION_ITERATION:
                            case TOP_ANIMATION_START:
                                EventConstructor = SyntheticAnimationEvent;
                                break;
                            case TOP_TRANSITION_END:
                                EventConstructor = SyntheticTransitionEvent;
                                break;
                            case TOP_SCROLL:
                                EventConstructor = SyntheticUIEvent;
                                break;
                            case TOP_WHEEL:
                                EventConstructor = SyntheticWheelEvent;
                                break;
                            case TOP_COPY:
                            case TOP_CUT:
                            case TOP_PASTE:
                                EventConstructor = SyntheticClipboardEvent;
                                break;
                            case TOP_GOT_POINTER_CAPTURE:
                            case TOP_LOST_POINTER_CAPTURE:
                            case TOP_POINTER_CANCEL:
                            case TOP_POINTER_DOWN:
                            case TOP_POINTER_MOVE:
                            case TOP_POINTER_OUT:
                            case TOP_POINTER_OVER:
                            case TOP_POINTER_UP:
                                EventConstructor = SyntheticPointerEvent;
                                break;
                            default:
                                {
                                    if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                                        error('SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
                                    }
                                }
                                EventConstructor = SyntheticEvent;
                                break;
                        }
                        var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
                        accumulateTwoPhaseDispatches(event);
                        return event;
                    }
                };
                var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
                injectEventPluginOrder(DOMEventPluginOrder);
                setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
                injectEventPluginsByName({ SimpleEventPlugin: SimpleEventPlugin, EnterLeaveEventPlugin: EnterLeaveEventPlugin, ChangeEventPlugin: ChangeEventPlugin, SelectEventPlugin: SelectEventPlugin, BeforeInputEventPlugin: BeforeInputEventPlugin });
                var reactEmoji = '\u269B';
                var warningEmoji = '\u26D4';
                var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
                var currentFiber = null;
                var currentPhase = null;
                var currentPhaseFiber = null;
                var isCommitting = false;
                var hasScheduledUpdateInCurrentCommit = false;
                var hasScheduledUpdateInCurrentPhase = false;
                var commitCountInCurrentWorkLoop = 0;
                var effectCountInCurrentCommit = 0;
                var labelsInCurrentCommit = new Set();
                var formatMarkName = function formatMarkName(markName) { return reactEmoji + " " + markName; };
                var formatLabel = function formatLabel(label, warning) { var prefix = warning ? warningEmoji + " " : reactEmoji + " "; var suffix = warning ? " Warning: " + warning : ''; return "" + prefix + label + suffix; };
                var beginMark = function beginMark(markName) { performance.mark(formatMarkName(markName)); };
                var clearMark = function clearMark(markName) { performance.clearMarks(formatMarkName(markName)); };
                var endMark = function endMark(label, markName, warning) {
                    var formattedMarkName = formatMarkName(markName);
                    var formattedLabel = formatLabel(label, warning);
                    try {
                        performance.measure(formattedLabel, formattedMarkName);
                    }
                    catch (err) { }
                    performance.clearMarks(formattedMarkName);
                    performance.clearMeasures(formattedLabel);
                };
                var getFiberMarkName = function getFiberMarkName(label, debugID) { return label + " (#" + debugID + ")"; };
                var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
                    if (phase === null) {
                        return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
                    }
                    else {
                        return componentName + "." + phase;
                    }
                };
                var beginFiberMark = function beginFiberMark(fiber, phase) {
                    var componentName = getComponentName(fiber.type) || 'Unknown';
                    var debugID = fiber._debugID;
                    var isMounted = fiber.alternate !== null;
                    var label = getFiberLabel(componentName, isMounted, phase);
                    if (isCommitting && labelsInCurrentCommit.has(label)) {
                        return false;
                    }
                    labelsInCurrentCommit.add(label);
                    var markName = getFiberMarkName(label, debugID);
                    beginMark(markName);
                    return true;
                };
                var clearFiberMark = function clearFiberMark(fiber, phase) { var componentName = getComponentName(fiber.type) || 'Unknown'; var debugID = fiber._debugID; var isMounted = fiber.alternate !== null; var label = getFiberLabel(componentName, isMounted, phase); var markName = getFiberMarkName(label, debugID); clearMark(markName); };
                var endFiberMark = function endFiberMark(fiber, phase, warning) { var componentName = getComponentName(fiber.type) || 'Unknown'; var debugID = fiber._debugID; var isMounted = fiber.alternate !== null; var label = getFiberLabel(componentName, isMounted, phase); var markName = getFiberMarkName(label, debugID); endMark(label, markName, warning); };
                var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
                    switch (fiber.tag) {
                        case HostRoot:
                        case HostComponent:
                        case HostText:
                        case HostPortal:
                        case Fragment:
                        case ContextProvider:
                        case ContextConsumer:
                        case Mode: return true;
                        default: return false;
                    }
                };
                var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() { if (currentPhase !== null && currentPhaseFiber !== null) {
                    clearFiberMark(currentPhaseFiber, currentPhase);
                } currentPhaseFiber = null; currentPhase = null; hasScheduledUpdateInCurrentPhase = false; };
                var pauseTimers = function pauseTimers() {
                    var fiber = currentFiber;
                    while (fiber) {
                        if (fiber._debugIsCurrentlyTiming) {
                            endFiberMark(fiber, null, null);
                        }
                        fiber = fiber.return;
                    }
                };
                var resumeTimersRecursively = function resumeTimersRecursively(fiber) { if (fiber.return !== null) {
                    resumeTimersRecursively(fiber.return);
                } if (fiber._debugIsCurrentlyTiming) {
                    beginFiberMark(fiber, null);
                } };
                var resumeTimers = function resumeTimers() {
                    if (currentFiber !== null) {
                        resumeTimersRecursively(currentFiber);
                    }
                };
                function recordEffect() { {
                    effectCountInCurrentCommit++;
                } }
                function recordScheduleUpdate() { {
                    if (isCommitting) {
                        hasScheduledUpdateInCurrentCommit = true;
                    }
                    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
                        hasScheduledUpdateInCurrentPhase = true;
                    }
                } }
                function startWorkTimer(fiber) {
                    {
                        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                            return;
                        }
                        currentFiber = fiber;
                        if (!beginFiberMark(fiber, null)) {
                            return;
                        }
                        fiber._debugIsCurrentlyTiming = true;
                    }
                }
                function cancelWorkTimer(fiber) {
                    {
                        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                            return;
                        }
                        fiber._debugIsCurrentlyTiming = false;
                        clearFiberMark(fiber, null);
                    }
                }
                function stopWorkTimer(fiber) {
                    {
                        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                            return;
                        }
                        currentFiber = fiber.return;
                        if (!fiber._debugIsCurrentlyTiming) {
                            return;
                        }
                        fiber._debugIsCurrentlyTiming = false;
                        endFiberMark(fiber, null, null);
                    }
                }
                function stopFailedWorkTimer(fiber) {
                    {
                        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                            return;
                        }
                        currentFiber = fiber.return;
                        if (!fiber._debugIsCurrentlyTiming) {
                            return;
                        }
                        fiber._debugIsCurrentlyTiming = false;
                        var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
                        endFiberMark(fiber, null, warning);
                    }
                }
                function startPhaseTimer(fiber, phase) { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    clearPendingPhaseMeasurement();
                    if (!beginFiberMark(fiber, phase)) {
                        return;
                    }
                    currentPhaseFiber = fiber;
                    currentPhase = phase;
                } }
                function stopPhaseTimer() { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    if (currentPhase !== null && currentPhaseFiber !== null) {
                        var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
                        endFiberMark(currentPhaseFiber, currentPhase, warning);
                    }
                    currentPhase = null;
                    currentPhaseFiber = null;
                } }
                function startWorkLoopTimer(nextUnitOfWork) {
                    {
                        currentFiber = nextUnitOfWork;
                        if (!supportsUserTiming) {
                            return;
                        }
                        commitCountInCurrentWorkLoop = 0;
                        beginMark('(React Tree Reconciliation)');
                        resumeTimers();
                    }
                }
                function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
                    {
                        if (!supportsUserTiming) {
                            return;
                        }
                        var warning = null;
                        if (interruptedBy !== null) {
                            if (interruptedBy.tag === HostRoot) {
                                warning = 'A top-level update interrupted the previous render';
                            }
                            else {
                                var componentName = getComponentName(interruptedBy.type) || 'Unknown';
                                warning = "An update to " + componentName + " interrupted the previous render";
                            }
                        }
                        else if (commitCountInCurrentWorkLoop > 1) {
                            warning = 'There were cascading updates';
                        }
                        commitCountInCurrentWorkLoop = 0;
                        var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
                        pauseTimers();
                        endMark(label, '(React Tree Reconciliation)', warning);
                    }
                }
                function startCommitTimer() { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    isCommitting = true;
                    hasScheduledUpdateInCurrentCommit = false;
                    labelsInCurrentCommit.clear();
                    beginMark('(Committing Changes)');
                } }
                function stopCommitTimer() { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    var warning = null;
                    if (hasScheduledUpdateInCurrentCommit) {
                        warning = 'Lifecycle hook scheduled a cascading update';
                    }
                    else if (commitCountInCurrentWorkLoop > 0) {
                        warning = 'Caused by a cascading update in earlier commit';
                    }
                    hasScheduledUpdateInCurrentCommit = false;
                    commitCountInCurrentWorkLoop++;
                    isCommitting = false;
                    labelsInCurrentCommit.clear();
                    endMark('(Committing Changes)', '(Committing Changes)', warning);
                } }
                function startCommitSnapshotEffectsTimer() { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    effectCountInCurrentCommit = 0;
                    beginMark('(Committing Snapshot Effects)');
                } }
                function stopCommitSnapshotEffectsTimer() { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    var count = effectCountInCurrentCommit;
                    effectCountInCurrentCommit = 0;
                    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
                } }
                function startCommitHostEffectsTimer() { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    effectCountInCurrentCommit = 0;
                    beginMark('(Committing Host Effects)');
                } }
                function stopCommitHostEffectsTimer() { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    var count = effectCountInCurrentCommit;
                    effectCountInCurrentCommit = 0;
                    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
                } }
                function startCommitLifeCyclesTimer() { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    effectCountInCurrentCommit = 0;
                    beginMark('(Calling Lifecycle Methods)');
                } }
                function stopCommitLifeCyclesTimer() { {
                    if (!supportsUserTiming) {
                        return;
                    }
                    var count = effectCountInCurrentCommit;
                    effectCountInCurrentCommit = 0;
                    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
                } }
                var valueStack = [];
                var fiberStack;
                {
                    fiberStack = [];
                }
                var index = -1;
                function createCursor(defaultValue) { return { current: defaultValue }; }
                function pop(cursor, fiber) { if (index < 0) {
                    {
                        error('Unexpected pop.');
                    }
                    return;
                } {
                    if (fiber !== fiberStack[index]) {
                        error('Unexpected Fiber popped.');
                    }
                } cursor.current = valueStack[index]; valueStack[index] = null; {
                    fiberStack[index] = null;
                } index--; }
                function push(cursor, value, fiber) { index++; valueStack[index] = cursor.current; {
                    fiberStack[index] = fiber;
                } cursor.current = value; }
                var warnedAboutMissingGetChildContext;
                {
                    warnedAboutMissingGetChildContext = {};
                }
                var emptyContextObject = {};
                {
                    Object.freeze(emptyContextObject);
                }
                var contextStackCursor = createCursor(emptyContextObject);
                var didPerformWorkStackCursor = createCursor(false);
                var previousContext = emptyContextObject;
                function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
                    {
                        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                            return previousContext;
                        }
                        return contextStackCursor.current;
                    }
                }
                function cacheContext(workInProgress, unmaskedContext, maskedContext) { {
                    var instance = workInProgress.stateNode;
                    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
                    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
                } }
                function getMaskedContext(workInProgress, unmaskedContext) {
                    {
                        var type = workInProgress.type;
                        var contextTypes = type.contextTypes;
                        if (!contextTypes) {
                            return emptyContextObject;
                        }
                        var instance = workInProgress.stateNode;
                        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                            return instance.__reactInternalMemoizedMaskedChildContext;
                        }
                        var context = {};
                        for (var key in contextTypes) {
                            context[key] = unmaskedContext[key];
                        }
                        {
                            var name = getComponentName(type) || 'Unknown';
                            checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
                        }
                        if (instance) {
                            cacheContext(workInProgress, unmaskedContext, context);
                        }
                        return context;
                    }
                }
                function hasContextChanged() { {
                    return didPerformWorkStackCursor.current;
                } }
                function isContextProvider(type) { {
                    var childContextTypes = type.childContextTypes;
                    return childContextTypes !== null && childContextTypes !== undefined;
                } }
                function popContext(fiber) { {
                    pop(didPerformWorkStackCursor, fiber);
                    pop(contextStackCursor, fiber);
                } }
                function popTopLevelContextObject(fiber) { {
                    pop(didPerformWorkStackCursor, fiber);
                    pop(contextStackCursor, fiber);
                } }
                function pushTopLevelContextObject(fiber, context, didChange) { {
                    if (!(contextStackCursor.current === emptyContextObject)) {
                        {
                            throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    push(contextStackCursor, context, fiber);
                    push(didPerformWorkStackCursor, didChange, fiber);
                } }
                function processChildContext(fiber, type, parentContext) {
                    {
                        var instance = fiber.stateNode;
                        var childContextTypes = type.childContextTypes;
                        if (typeof instance.getChildContext !== 'function') {
                            {
                                var componentName = getComponentName(type) || 'Unknown';
                                if (!warnedAboutMissingGetChildContext[componentName]) {
                                    warnedAboutMissingGetChildContext[componentName] = true;
                                    error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
                                }
                            }
                            return parentContext;
                        }
                        var childContext;
                        {
                            setCurrentPhase('getChildContext');
                        }
                        startPhaseTimer(fiber, 'getChildContext');
                        childContext = instance.getChildContext();
                        stopPhaseTimer();
                        {
                            setCurrentPhase(null);
                        }
                        for (var contextKey in childContext) {
                            if (!(contextKey in childContextTypes)) {
                                {
                                    throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
                                }
                            }
                        }
                        {
                            var name = getComponentName(type) || 'Unknown';
                            checkPropTypes(childContextTypes, childContext, 'child context', name, getCurrentFiberStackInDev);
                        }
                        return _assign({}, parentContext, {}, childContext);
                    }
                }
                function pushContextProvider(workInProgress) {
                    {
                        var instance = workInProgress.stateNode;
                        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
                        previousContext = contextStackCursor.current;
                        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
                        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
                        return true;
                    }
                }
                function invalidateContextProvider(workInProgress, type, didChange) {
                    {
                        var instance = workInProgress.stateNode;
                        if (!instance) {
                            {
                                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                        if (didChange) {
                            var mergedContext = processChildContext(workInProgress, type, previousContext);
                            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                            pop(didPerformWorkStackCursor, workInProgress);
                            pop(contextStackCursor, workInProgress);
                            push(contextStackCursor, mergedContext, workInProgress);
                            push(didPerformWorkStackCursor, didChange, workInProgress);
                        }
                        else {
                            pop(didPerformWorkStackCursor, workInProgress);
                            push(didPerformWorkStackCursor, didChange, workInProgress);
                        }
                    }
                }
                function findCurrentUnmaskedContext(fiber) {
                    {
                        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                            {
                                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                        var node = fiber;
                        do {
                            switch (node.tag) {
                                case HostRoot: return node.stateNode.context;
                                case ClassComponent: {
                                    var Component = node.type;
                                    if (isContextProvider(Component)) {
                                        return node.stateNode.__reactInternalMemoizedMergedChildContext;
                                    }
                                    break;
                                }
                            }
                            node = node.return;
                        } while (node !== null);
                        {
                            {
                                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                    }
                }
                var LegacyRoot = 0;
                var BlockingRoot = 1;
                var ConcurrentRoot = 2;
                var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
                {
                    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
                        {
                            throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
                        }
                    }
                }
                var fakeCallbackNode = {};
                var ImmediatePriority = 99;
                var UserBlockingPriority$1 = 98;
                var NormalPriority = 97;
                var LowPriority = 96;
                var IdlePriority = 95;
                var NoPriority = 90;
                var shouldYield = Scheduler_shouldYield;
                var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () { };
                var syncQueue = null;
                var immediateQueueCallbackNode = null;
                var isFlushingSyncQueue = false;
                var initialTimeMs = Scheduler_now();
                var now = initialTimeMs < 10000 ? Scheduler_now : function () { return Scheduler_now() - initialTimeMs; };
                function getCurrentPriorityLevel() { switch (Scheduler_getCurrentPriorityLevel()) {
                    case Scheduler_ImmediatePriority: return ImmediatePriority;
                    case Scheduler_UserBlockingPriority: return UserBlockingPriority$1;
                    case Scheduler_NormalPriority: return NormalPriority;
                    case Scheduler_LowPriority: return LowPriority;
                    case Scheduler_IdlePriority: return IdlePriority;
                    default: {
                        {
                            throw Error("Unknown priority level.");
                        }
                    }
                } }
                function reactPriorityToSchedulerPriority(reactPriorityLevel) { switch (reactPriorityLevel) {
                    case ImmediatePriority: return Scheduler_ImmediatePriority;
                    case UserBlockingPriority$1: return Scheduler_UserBlockingPriority;
                    case NormalPriority: return Scheduler_NormalPriority;
                    case LowPriority: return Scheduler_LowPriority;
                    case IdlePriority: return Scheduler_IdlePriority;
                    default: {
                        {
                            throw Error("Unknown priority level.");
                        }
                    }
                } }
                function runWithPriority$1(reactPriorityLevel, fn) { var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel); return Scheduler_runWithPriority(priorityLevel, fn); }
                function scheduleCallback(reactPriorityLevel, callback, options) { var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel); return Scheduler_scheduleCallback(priorityLevel, callback, options); }
                function scheduleSyncCallback(callback) {
                    if (syncQueue === null) {
                        syncQueue = [callback];
                        immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
                    }
                    else {
                        syncQueue.push(callback);
                    }
                    return fakeCallbackNode;
                }
                function cancelCallback(callbackNode) { if (callbackNode !== fakeCallbackNode) {
                    Scheduler_cancelCallback(callbackNode);
                } }
                function flushSyncCallbackQueue() { if (immediateQueueCallbackNode !== null) {
                    var node = immediateQueueCallbackNode;
                    immediateQueueCallbackNode = null;
                    Scheduler_cancelCallback(node);
                } flushSyncCallbackQueueImpl(); }
                function flushSyncCallbackQueueImpl() {
                    if (!isFlushingSyncQueue && syncQueue !== null) {
                        isFlushingSyncQueue = true;
                        var i = 0;
                        try {
                            var _isSync = true;
                            var queue = syncQueue;
                            runWithPriority$1(ImmediatePriority, function () { for (; i < queue.length; i++) {
                                var callback = queue[i];
                                do {
                                    callback = callback(_isSync);
                                } while (callback !== null);
                            } });
                            syncQueue = null;
                        }
                        catch (error) {
                            if (syncQueue !== null) {
                                syncQueue = syncQueue.slice(i + 1);
                            }
                            Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                            throw error;
                        }
                        finally {
                            isFlushingSyncQueue = false;
                        }
                    }
                }
                var NoMode = 0;
                var StrictMode = 1;
                var BlockingMode = 2;
                var ConcurrentMode = 4;
                var ProfileMode = 8;
                var MAX_SIGNED_31_BIT_INT = 1073741823;
                var NoWork = 0;
                var Never = 1;
                var Idle = 2;
                var ContinuousHydration = 3;
                var Sync = MAX_SIGNED_31_BIT_INT;
                var Batched = Sync - 1;
                var UNIT_SIZE = 10;
                var MAGIC_NUMBER_OFFSET = Batched - 1;
                function msToExpirationTime(ms) {
                    return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
                }
                function expirationTimeToMs(expirationTime) { return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE; }
                function ceiling(num, precision) { return ((num / precision | 0) + 1) * precision; }
                function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) { return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE); }
                var LOW_PRIORITY_EXPIRATION = 5000;
                var LOW_PRIORITY_BATCH_SIZE = 250;
                function computeAsyncExpiration(currentTime) { return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE); }
                function computeSuspenseExpiration(currentTime, timeoutMs) {
                    return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
                }
                var HIGH_PRIORITY_EXPIRATION = 500;
                var HIGH_PRIORITY_BATCH_SIZE = 100;
                function computeInteractiveExpiration(currentTime) { return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE); }
                function inferPriorityFromExpirationTime(currentTime, expirationTime) {
                    if (expirationTime === Sync) {
                        return ImmediatePriority;
                    }
                    if (expirationTime === Never || expirationTime === Idle) {
                        return IdlePriority;
                    }
                    var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
                    if (msUntil <= 0) {
                        return ImmediatePriority;
                    }
                    if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
                        return UserBlockingPriority$1;
                    }
                    if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
                        return NormalPriority;
                    }
                    return IdlePriority;
                }
                var ReactStrictModeWarnings = { recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) { }, flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() { }, recordLegacyContextWarning: function recordLegacyContextWarning(fiber, instance) { }, flushLegacyContextWarning: function flushLegacyContextWarning() { }, discardPendingWarnings: function discardPendingWarnings() { } };
                {
                    var findStrictRoot = function findStrictRoot(fiber) { var maybeStrictRoot = null; var node = fiber; while (node !== null) {
                        if (node.mode & StrictMode) {
                            maybeStrictRoot = node;
                        }
                        node = node.return;
                    } return maybeStrictRoot; };
                    var setToSortedString = function setToSortedString(set) { var array = []; set.forEach(function (value) { array.push(value); }); return array.sort().join(', '); };
                    var pendingComponentWillMountWarnings = [];
                    var pendingUNSAFE_ComponentWillMountWarnings = [];
                    var pendingComponentWillReceivePropsWarnings = [];
                    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                    var pendingComponentWillUpdateWarnings = [];
                    var pendingUNSAFE_ComponentWillUpdateWarnings = [];
                    var didWarnAboutUnsafeLifecycles = new Set();
                    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
                        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                            return;
                        }
                        if (typeof instance.componentWillMount === 'function' &&
                            instance.componentWillMount.__suppressDeprecationWarning !== true) {
                            pendingComponentWillMountWarnings.push(fiber);
                        }
                        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
                            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
                        }
                        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                            pendingComponentWillReceivePropsWarnings.push(fiber);
                        }
                        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
                        }
                        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                            pendingComponentWillUpdateWarnings.push(fiber);
                        }
                        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
                            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
                        }
                    };
                    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
                        var componentWillMountUniqueNames = new Set();
                        if (pendingComponentWillMountWarnings.length > 0) {
                            pendingComponentWillMountWarnings.forEach(function (fiber) { componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component'); didWarnAboutUnsafeLifecycles.add(fiber.type); });
                            pendingComponentWillMountWarnings = [];
                        }
                        var UNSAFE_componentWillMountUniqueNames = new Set();
                        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                            pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) { UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component'); didWarnAboutUnsafeLifecycles.add(fiber.type); });
                            pendingUNSAFE_ComponentWillMountWarnings = [];
                        }
                        var componentWillReceivePropsUniqueNames = new Set();
                        if (pendingComponentWillReceivePropsWarnings.length > 0) {
                            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) { componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component'); didWarnAboutUnsafeLifecycles.add(fiber.type); });
                            pendingComponentWillReceivePropsWarnings = [];
                        }
                        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
                        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) { UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component'); didWarnAboutUnsafeLifecycles.add(fiber.type); });
                            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                        }
                        var componentWillUpdateUniqueNames = new Set();
                        if (pendingComponentWillUpdateWarnings.length > 0) {
                            pendingComponentWillUpdateWarnings.forEach(function (fiber) { componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component'); didWarnAboutUnsafeLifecycles.add(fiber.type); });
                            pendingComponentWillUpdateWarnings = [];
                        }
                        var UNSAFE_componentWillUpdateUniqueNames = new Set();
                        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) { UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component'); didWarnAboutUnsafeLifecycles.add(fiber.type); });
                            pendingUNSAFE_ComponentWillUpdateWarnings = [];
                        }
                        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                            error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
                        }
                        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                            error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
                        }
                        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                            error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
                        }
                        if (componentWillMountUniqueNames.size > 0) {
                            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                            warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
                        }
                        if (componentWillReceivePropsUniqueNames.size > 0) {
                            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                            warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
                        }
                        if (componentWillUpdateUniqueNames.size > 0) {
                            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                            warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
                        }
                    };
                    var pendingLegacyContextWarning = new Map();
                    var didWarnAboutLegacyContext = new Set();
                    ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
                        var strictRoot = findStrictRoot(fiber);
                        if (strictRoot === null) {
                            error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
                            return;
                        }
                        if (didWarnAboutLegacyContext.has(fiber.type)) {
                            return;
                        }
                        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
                        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
                            if (warningsForRoot === undefined) {
                                warningsForRoot = [];
                                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                            }
                            warningsForRoot.push(fiber);
                        }
                    };
                    ReactStrictModeWarnings.flushLegacyContextWarning = function () { pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) { if (fiberArray.length === 0) {
                        return;
                    } var firstFiber = fiberArray[0]; var uniqueNames = new Set(); fiberArray.forEach(function (fiber) { uniqueNames.add(getComponentName(fiber.type) || 'Component'); didWarnAboutLegacyContext.add(fiber.type); }); var sortedNames = setToSortedString(uniqueNames); var firstComponentStack = getStackByFiberInDevAndProd(firstFiber); error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack); }); };
                    ReactStrictModeWarnings.discardPendingWarnings = function () { pendingComponentWillMountWarnings = []; pendingUNSAFE_ComponentWillMountWarnings = []; pendingComponentWillReceivePropsWarnings = []; pendingUNSAFE_ComponentWillReceivePropsWarnings = []; pendingComponentWillUpdateWarnings = []; pendingUNSAFE_ComponentWillUpdateWarnings = []; pendingLegacyContextWarning = new Map(); };
                }
                var resolveFamily = null;
                var failedBoundaries = null;
                var setRefreshHandler = function setRefreshHandler(handler) { {
                    resolveFamily = handler;
                } };
                function resolveFunctionForHotReloading(type) {
                    {
                        if (resolveFamily === null) {
                            return type;
                        }
                        var family = resolveFamily(type);
                        if (family === undefined) {
                            return type;
                        }
                        return family.current;
                    }
                }
                function resolveClassForHotReloading(type) {
                    return resolveFunctionForHotReloading(type);
                }
                function resolveForwardRefForHotReloading(type) {
                    {
                        if (resolveFamily === null) {
                            return type;
                        }
                        var family = resolveFamily(type);
                        if (family === undefined) {
                            if (type !== null && type !== undefined && typeof type.render === 'function') {
                                var currentRender = resolveFunctionForHotReloading(type.render);
                                if (type.render !== currentRender) {
                                    var syntheticType = { $$typeof: REACT_FORWARD_REF_TYPE, render: currentRender };
                                    if (type.displayName !== undefined) {
                                        syntheticType.displayName = type.displayName;
                                    }
                                    return syntheticType;
                                }
                            }
                            return type;
                        }
                        return family.current;
                    }
                }
                function isCompatibleFamilyForHotReloading(fiber, element) {
                    {
                        if (resolveFamily === null) {
                            return false;
                        }
                        var prevType = fiber.elementType;
                        var nextType = element.type;
                        var needsCompareFamilies = false;
                        var $$typeofNextType = (typeof nextType === 'undefined' ? 'undefined' : _typeof(nextType)) === 'object' && nextType !== null ? nextType.$$typeof : null;
                        switch (fiber.tag) {
                            case ClassComponent: {
                                if (typeof nextType === 'function') {
                                    needsCompareFamilies = true;
                                }
                                break;
                            }
                            case FunctionComponent: {
                                if (typeof nextType === 'function') {
                                    needsCompareFamilies = true;
                                }
                                else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                    needsCompareFamilies = true;
                                }
                                break;
                            }
                            case ForwardRef: {
                                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                                    needsCompareFamilies = true;
                                }
                                else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                    needsCompareFamilies = true;
                                }
                                break;
                            }
                            case MemoComponent:
                            case SimpleMemoComponent: {
                                if ($$typeofNextType === REACT_MEMO_TYPE) {
                                    needsCompareFamilies = true;
                                }
                                else if ($$typeofNextType === REACT_LAZY_TYPE) {
                                    needsCompareFamilies = true;
                                }
                                break;
                            }
                            default: return false;
                        }
                        if (needsCompareFamilies) {
                            var prevFamily = resolveFamily(prevType);
                            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
                                return true;
                            }
                        }
                        return false;
                    }
                }
                function markFailedErrorBoundaryForHotReloading(fiber) {
                    {
                        if (resolveFamily === null) {
                            return;
                        }
                        if (typeof WeakSet !== 'function') {
                            return;
                        }
                        if (failedBoundaries === null) {
                            failedBoundaries = new WeakSet();
                        }
                        failedBoundaries.add(fiber);
                    }
                }
                var scheduleRefresh = function scheduleRefresh(root, update) {
                    {
                        if (resolveFamily === null) {
                            return;
                        }
                        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
                        flushPassiveEffects();
                        flushSync(function () { scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies); });
                    }
                };
                var scheduleRoot = function scheduleRoot(root, element) {
                    {
                        if (root.context !== emptyContextObject) {
                            return;
                        }
                        flushPassiveEffects();
                        syncUpdates(function () { updateContainer(element, root, null, null); });
                    }
                };
                function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) { {
                    var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
                    var candidateType = null;
                    switch (tag) {
                        case FunctionComponent:
                        case SimpleMemoComponent:
                        case ClassComponent:
                            candidateType = type;
                            break;
                        case ForwardRef:
                            candidateType = type.render;
                            break;
                    }
                    if (resolveFamily === null) {
                        throw new Error('Expected resolveFamily to be set during hot reload.');
                    }
                    var needsRender = false;
                    var needsRemount = false;
                    if (candidateType !== null) {
                        var family = resolveFamily(candidateType);
                        if (family !== undefined) {
                            if (staleFamilies.has(family)) {
                                needsRemount = true;
                            }
                            else if (updatedFamilies.has(family)) {
                                if (tag === ClassComponent) {
                                    needsRemount = true;
                                }
                                else {
                                    needsRender = true;
                                }
                            }
                        }
                    }
                    if (failedBoundaries !== null) {
                        if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                            needsRemount = true;
                        }
                    }
                    if (needsRemount) {
                        fiber._debugNeedsRemount = true;
                    }
                    if (needsRemount || needsRender) {
                        scheduleWork(fiber, Sync);
                    }
                    if (child !== null && !needsRemount) {
                        scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
                    }
                    if (sibling !== null) {
                        scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
                    }
                } }
                var findHostInstancesForRefresh = function findHostInstancesForRefresh(root, families) { {
                    var hostInstances = new Set();
                    var types = new Set(families.map(function (family) { return family.current; }));
                    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
                    return hostInstances;
                } };
                function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
                    {
                        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
                        var candidateType = null;
                        switch (tag) {
                            case FunctionComponent:
                            case SimpleMemoComponent:
                            case ClassComponent:
                                candidateType = type;
                                break;
                            case ForwardRef:
                                candidateType = type.render;
                                break;
                        }
                        var didMatch = false;
                        if (candidateType !== null) {
                            if (types.has(candidateType)) {
                                didMatch = true;
                            }
                        }
                        if (didMatch) {
                            findHostInstancesForFiberShallowly(fiber, hostInstances);
                        }
                        else {
                            if (child !== null) {
                                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                            }
                        }
                        if (sibling !== null) {
                            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
                        }
                    }
                }
                function findHostInstancesForFiberShallowly(fiber, hostInstances) {
                    {
                        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
                        if (foundHostInstances) {
                            return;
                        }
                        var node = fiber;
                        while (true) {
                            switch (node.tag) {
                                case HostComponent:
                                    hostInstances.add(node.stateNode);
                                    return;
                                case HostPortal:
                                    hostInstances.add(node.stateNode.containerInfo);
                                    return;
                                case HostRoot:
                                    hostInstances.add(node.stateNode.containerInfo);
                                    return;
                            }
                            if (node.return === null) {
                                throw new Error('Expected to reach root first.');
                            }
                            node = node.return;
                        }
                    }
                }
                function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
                    {
                        var node = fiber;
                        var foundHostInstances = false;
                        while (true) {
                            if (node.tag === HostComponent) {
                                foundHostInstances = true;
                                hostInstances.add(node.stateNode);
                            }
                            else if (node.child !== null) {
                                node.child.return = node;
                                node = node.child;
                                continue;
                            }
                            if (node === fiber) {
                                return foundHostInstances;
                            }
                            while (node.sibling === null) {
                                if (node.return === null || node.return === fiber) {
                                    return foundHostInstances;
                                }
                                node = node.return;
                            }
                            node.sibling.return = node.return;
                            node = node.sibling;
                        }
                    }
                    return false;
                }
                function resolveDefaultProps(Component, baseProps) {
                    if (Component && Component.defaultProps) {
                        var props = _assign({}, baseProps);
                        var defaultProps = Component.defaultProps;
                        for (var propName in defaultProps) {
                            if (props[propName] === undefined) {
                                props[propName] = defaultProps[propName];
                            }
                        }
                        return props;
                    }
                    return baseProps;
                }
                function readLazyComponentType(lazyComponent) { initializeLazyComponentType(lazyComponent); if (lazyComponent._status !== Resolved) {
                    throw lazyComponent._result;
                } return lazyComponent._result; }
                var valueCursor = createCursor(null);
                var rendererSigil;
                {
                    rendererSigil = {};
                }
                var currentlyRenderingFiber = null;
                var lastContextDependency = null;
                var lastContextWithAllBitsObserved = null;
                var isDisallowedContextReadInDEV = false;
                function resetContextDependencies() {
                    currentlyRenderingFiber = null;
                    lastContextDependency = null;
                    lastContextWithAllBitsObserved = null;
                    {
                        isDisallowedContextReadInDEV = false;
                    }
                }
                function enterDisallowedContextReadInDEV() { {
                    isDisallowedContextReadInDEV = true;
                } }
                function exitDisallowedContextReadInDEV() { {
                    isDisallowedContextReadInDEV = false;
                } }
                function pushProvider(providerFiber, nextValue) { var context = providerFiber.type._context; {
                    push(valueCursor, context._currentValue, providerFiber);
                    context._currentValue = nextValue;
                    {
                        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                            error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
                        }
                        context._currentRenderer = rendererSigil;
                    }
                } }
                function popProvider(providerFiber) { var currentValue = valueCursor.current; pop(valueCursor, providerFiber); var context = providerFiber.type._context; {
                    context._currentValue = currentValue;
                } }
                function calculateChangedBits(context, newValue, oldValue) {
                    if (objectIs(oldValue, newValue)) {
                        return 0;
                    }
                    else {
                        var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                        {
                            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                                error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
                            }
                        }
                        return changedBits | 0;
                    }
                }
                function scheduleWorkOnParentPath(parent, renderExpirationTime) {
                    var node = parent;
                    while (node !== null) {
                        var alternate = node.alternate;
                        if (node.childExpirationTime < renderExpirationTime) {
                            node.childExpirationTime = renderExpirationTime;
                            if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
                                alternate.childExpirationTime = renderExpirationTime;
                            }
                        }
                        else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
                            alternate.childExpirationTime = renderExpirationTime;
                        }
                        else {
                            break;
                        }
                        node = node.return;
                    }
                }
                function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
                    var fiber = workInProgress.child;
                    if (fiber !== null) {
                        fiber.return = workInProgress;
                    }
                    while (fiber !== null) {
                        var nextFiber = void 0;
                        var list = fiber.dependencies;
                        if (list !== null) {
                            nextFiber = fiber.child;
                            var dependency = list.firstContext;
                            while (dependency !== null) {
                                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                                    if (fiber.tag === ClassComponent) {
                                        var update = createUpdate(renderExpirationTime, null);
                                        update.tag = ForceUpdate;
                                        enqueueUpdate(fiber, update);
                                    }
                                    if (fiber.expirationTime < renderExpirationTime) {
                                        fiber.expirationTime = renderExpirationTime;
                                    }
                                    var alternate = fiber.alternate;
                                    if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                                        alternate.expirationTime = renderExpirationTime;
                                    }
                                    scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
                                    if (list.expirationTime < renderExpirationTime) {
                                        list.expirationTime = renderExpirationTime;
                                    }
                                    break;
                                }
                                dependency = dependency.next;
                            }
                        }
                        else if (fiber.tag === ContextProvider) {
                            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
                        }
                        else {
                            nextFiber = fiber.child;
                        }
                        if (nextFiber !== null) {
                            nextFiber.return = fiber;
                        }
                        else {
                            nextFiber = fiber;
                            while (nextFiber !== null) {
                                if (nextFiber === workInProgress) {
                                    nextFiber = null;
                                    break;
                                }
                                var sibling = nextFiber.sibling;
                                if (sibling !== null) {
                                    sibling.return = nextFiber.return;
                                    nextFiber = sibling;
                                    break;
                                }
                                nextFiber = nextFiber.return;
                            }
                        }
                        fiber = nextFiber;
                    }
                }
                function prepareToReadContext(workInProgress, renderExpirationTime) {
                    currentlyRenderingFiber = workInProgress;
                    lastContextDependency = null;
                    lastContextWithAllBitsObserved = null;
                    var dependencies = workInProgress.dependencies;
                    if (dependencies !== null) {
                        var firstContext = dependencies.firstContext;
                        if (firstContext !== null) {
                            if (dependencies.expirationTime >= renderExpirationTime) {
                                markWorkInProgressReceivedUpdate();
                            }
                            dependencies.firstContext = null;
                        }
                    }
                }
                function _readContext(context, observedBits) {
                    {
                        if (isDisallowedContextReadInDEV) {
                            error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
                        }
                    }
                    if (lastContextWithAllBitsObserved === context)
                        ;
                    else if (observedBits === false || observedBits === 0)
                        ;
                    else {
                        var resolvedObservedBits;
                        if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                            lastContextWithAllBitsObserved = context;
                            resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
                        }
                        else {
                            resolvedObservedBits = observedBits;
                        }
                        var contextItem = { context: context, observedBits: resolvedObservedBits, next: null };
                        if (lastContextDependency === null) {
                            if (!(currentlyRenderingFiber !== null)) {
                                {
                                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                                }
                            }
                            lastContextDependency = contextItem;
                            currentlyRenderingFiber.dependencies = { expirationTime: NoWork, firstContext: contextItem, responders: null };
                        }
                        else {
                            lastContextDependency = lastContextDependency.next = contextItem;
                        }
                    }
                    return context._currentValue;
                }
                var UpdateState = 0;
                var ReplaceState = 1;
                var ForceUpdate = 2;
                var CaptureUpdate = 3;
                var hasForceUpdate = false;
                var didWarnUpdateInsideUpdate;
                var currentlyProcessingQueue;
                {
                    didWarnUpdateInsideUpdate = false;
                    currentlyProcessingQueue = null;
                }
                function initializeUpdateQueue(fiber) { var queue = { baseState: fiber.memoizedState, baseQueue: null, shared: { pending: null }, effects: null }; fiber.updateQueue = queue; }
                function cloneUpdateQueue(current, workInProgress) {
                    var queue = workInProgress.updateQueue;
                    var currentQueue = current.updateQueue;
                    if (queue === currentQueue) {
                        var clone = { baseState: currentQueue.baseState, baseQueue: currentQueue.baseQueue, shared: currentQueue.shared, effects: currentQueue.effects };
                        workInProgress.updateQueue = clone;
                    }
                }
                function createUpdate(expirationTime, suspenseConfig) { var update = { expirationTime: expirationTime, suspenseConfig: suspenseConfig, tag: UpdateState, payload: null, callback: null, next: null }; update.next = update; {
                    update.priority = getCurrentPriorityLevel();
                } return update; }
                function enqueueUpdate(fiber, update) {
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) {
                        return;
                    }
                    var sharedQueue = updateQueue.shared;
                    var pending = sharedQueue.pending;
                    if (pending === null) {
                        update.next = update;
                    }
                    else {
                        update.next = pending.next;
                        pending.next = update;
                    }
                    sharedQueue.pending = update;
                    {
                        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                            error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
                            didWarnUpdateInsideUpdate = true;
                        }
                    }
                }
                function enqueueCapturedUpdate(workInProgress, update) {
                    var current = workInProgress.alternate;
                    if (current !== null) {
                        cloneUpdateQueue(current, workInProgress);
                    }
                    var queue = workInProgress.updateQueue;
                    var last = queue.baseQueue;
                    if (last === null) {
                        queue.baseQueue = update.next = update;
                        update.next = update;
                    }
                    else {
                        update.next = last.next;
                        last.next = update;
                    }
                }
                function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
                    switch (update.tag) {
                        case ReplaceState: {
                            var payload = update.payload;
                            if (typeof payload === 'function') {
                                {
                                    enterDisallowedContextReadInDEV();
                                    if (workInProgress.mode & StrictMode) {
                                        payload.call(instance, prevState, nextProps);
                                    }
                                }
                                var nextState = payload.call(instance, prevState, nextProps);
                                {
                                    exitDisallowedContextReadInDEV();
                                }
                                return nextState;
                            }
                            return payload;
                        }
                        case CaptureUpdate: {
                            workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
                        }
                        case UpdateState: {
                            var _payload = update.payload;
                            var partialState;
                            if (typeof _payload === 'function') {
                                {
                                    enterDisallowedContextReadInDEV();
                                    if (workInProgress.mode & StrictMode) {
                                        _payload.call(instance, prevState, nextProps);
                                    }
                                }
                                partialState = _payload.call(instance, prevState, nextProps);
                                {
                                    exitDisallowedContextReadInDEV();
                                }
                            }
                            else {
                                partialState = _payload;
                            }
                            if (partialState === null || partialState === undefined) {
                                return prevState;
                            }
                            return _assign({}, prevState, partialState);
                        }
                        case ForceUpdate: {
                            hasForceUpdate = true;
                            return prevState;
                        }
                    }
                    return prevState;
                }
                function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
                    var queue = workInProgress.updateQueue;
                    hasForceUpdate = false;
                    {
                        currentlyProcessingQueue = queue.shared;
                    }
                    var baseQueue = queue.baseQueue;
                    var pendingQueue = queue.shared.pending;
                    if (pendingQueue !== null) {
                        if (baseQueue !== null) {
                            var baseFirst = baseQueue.next;
                            var pendingFirst = pendingQueue.next;
                            baseQueue.next = pendingFirst;
                            pendingQueue.next = baseFirst;
                        }
                        baseQueue = pendingQueue;
                        queue.shared.pending = null;
                        var current = workInProgress.alternate;
                        if (current !== null) {
                            var currentQueue = current.updateQueue;
                            if (currentQueue !== null) {
                                currentQueue.baseQueue = pendingQueue;
                            }
                        }
                    }
                    if (baseQueue !== null) {
                        var first = baseQueue.next;
                        var newState = queue.baseState;
                        var newExpirationTime = NoWork;
                        var newBaseState = null;
                        var newBaseQueueFirst = null;
                        var newBaseQueueLast = null;
                        if (first !== null) {
                            var update = first;
                            do {
                                var updateExpirationTime = update.expirationTime;
                                if (updateExpirationTime < renderExpirationTime) {
                                    var clone = { expirationTime: update.expirationTime, suspenseConfig: update.suspenseConfig, tag: update.tag, payload: update.payload, callback: update.callback, next: null };
                                    if (newBaseQueueLast === null) {
                                        newBaseQueueFirst = newBaseQueueLast = clone;
                                        newBaseState = newState;
                                    }
                                    else {
                                        newBaseQueueLast = newBaseQueueLast.next = clone;
                                    }
                                    if (updateExpirationTime > newExpirationTime) {
                                        newExpirationTime = updateExpirationTime;
                                    }
                                }
                                else {
                                    if (newBaseQueueLast !== null) {
                                        var _clone = { expirationTime: Sync,
                                            suspenseConfig: update.suspenseConfig, tag: update.tag, payload: update.payload, callback: update.callback, next: null };
                                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                                    }
                                    markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                                    var callback = update.callback;
                                    if (callback !== null) {
                                        workInProgress.effectTag |= Callback;
                                        var effects = queue.effects;
                                        if (effects === null) {
                                            queue.effects = [update];
                                        }
                                        else {
                                            effects.push(update);
                                        }
                                    }
                                }
                                update = update.next;
                                if (update === null || update === first) {
                                    pendingQueue = queue.shared.pending;
                                    if (pendingQueue === null) {
                                        break;
                                    }
                                    else {
                                        update = baseQueue.next = pendingQueue.next;
                                        pendingQueue.next = first;
                                        queue.baseQueue = baseQueue = pendingQueue;
                                        queue.shared.pending = null;
                                    }
                                }
                            } while (true);
                        }
                        if (newBaseQueueLast === null) {
                            newBaseState = newState;
                        }
                        else {
                            newBaseQueueLast.next = newBaseQueueFirst;
                        }
                        queue.baseState = newBaseState;
                        queue.baseQueue = newBaseQueueLast;
                        markUnprocessedUpdateTime(newExpirationTime);
                        workInProgress.expirationTime = newExpirationTime;
                        workInProgress.memoizedState = newState;
                    }
                    {
                        currentlyProcessingQueue = null;
                    }
                }
                function callCallback(callback, context) { if (!(typeof callback === 'function')) {
                    {
                        throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
                    }
                } callback.call(context); }
                function resetHasForceUpdateBeforeProcessing() { hasForceUpdate = false; }
                function checkHasForceUpdateAfterProcessing() { return hasForceUpdate; }
                function commitUpdateQueue(finishedWork, finishedQueue, instance) {
                    var effects = finishedQueue.effects;
                    finishedQueue.effects = null;
                    if (effects !== null) {
                        for (var i = 0; i < effects.length; i++) {
                            var effect = effects[i];
                            var callback = effect.callback;
                            if (callback !== null) {
                                effect.callback = null;
                                callCallback(callback, instance);
                            }
                        }
                    }
                }
                var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
                function requestCurrentSuspenseConfig() { return ReactCurrentBatchConfig.suspense; }
                var fakeInternalInstance = {};
                var isArray = Array.isArray;
                var emptyRefsObject = new React.Component().refs;
                var didWarnAboutStateAssignmentForComponent;
                var didWarnAboutUninitializedState;
                var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
                var didWarnAboutLegacyLifecyclesAndDerivedState;
                var didWarnAboutUndefinedDerivedState;
                var warnOnUndefinedDerivedState;
                var warnOnInvalidCallback;
                var didWarnAboutDirectlyAssigningPropsToState;
                var didWarnAboutContextTypeAndContextTypes;
                var didWarnAboutInvalidateContextType;
                {
                    didWarnAboutStateAssignmentForComponent = new Set();
                    didWarnAboutUninitializedState = new Set();
                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
                    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
                    didWarnAboutDirectlyAssigningPropsToState = new Set();
                    didWarnAboutUndefinedDerivedState = new Set();
                    didWarnAboutContextTypeAndContextTypes = new Set();
                    didWarnAboutInvalidateContextType = new Set();
                    var didWarnOnInvalidCallback = new Set();
                    warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) { if (callback === null || typeof callback === 'function') {
                        return;
                    } var key = callerName + "_" + callback; if (!didWarnOnInvalidCallback.has(key)) {
                        didWarnOnInvalidCallback.add(key);
                        error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
                    } };
                    warnOnUndefinedDerivedState = function warnOnUndefinedDerivedState(type, partialState) { if (partialState === undefined) {
                        var componentName = getComponentName(type) || 'Component';
                        if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                            didWarnAboutUndefinedDerivedState.add(componentName);
                            error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
                        }
                    } };
                    Object.defineProperty(fakeInternalInstance, '_processChildContext', { enumerable: false, value: function value() { {
                            {
                                throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                            }
                        } } });
                    Object.freeze(fakeInternalInstance);
                }
                function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
                    var prevState = workInProgress.memoizedState;
                    {
                        if (workInProgress.mode & StrictMode) {
                            getDerivedStateFromProps(nextProps, prevState);
                        }
                    }
                    var partialState = getDerivedStateFromProps(nextProps, prevState);
                    {
                        warnOnUndefinedDerivedState(ctor, partialState);
                    }
                    var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
                    workInProgress.memoizedState = memoizedState;
                    if (workInProgress.expirationTime === NoWork) {
                        var updateQueue = workInProgress.updateQueue;
                        updateQueue.baseState = memoizedState;
                    }
                }
                var classComponentUpdater = { isMounted: isMounted, enqueueSetState: function enqueueSetState(inst, payload, callback) { var fiber = get(inst); var currentTime = requestCurrentTimeForUpdate(); var suspenseConfig = requestCurrentSuspenseConfig(); var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig); var update = createUpdate(expirationTime, suspenseConfig); update.payload = payload; if (callback !== undefined && callback !== null) {
                        {
                            warnOnInvalidCallback(callback, 'setState');
                        }
                        update.callback = callback;
                    } enqueueUpdate(fiber, update); scheduleWork(fiber, expirationTime); }, enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) { var fiber = get(inst); var currentTime = requestCurrentTimeForUpdate(); var suspenseConfig = requestCurrentSuspenseConfig(); var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig); var update = createUpdate(expirationTime, suspenseConfig); update.tag = ReplaceState; update.payload = payload; if (callback !== undefined && callback !== null) {
                        {
                            warnOnInvalidCallback(callback, 'replaceState');
                        }
                        update.callback = callback;
                    } enqueueUpdate(fiber, update); scheduleWork(fiber, expirationTime); }, enqueueForceUpdate: function enqueueForceUpdate(inst, callback) { var fiber = get(inst); var currentTime = requestCurrentTimeForUpdate(); var suspenseConfig = requestCurrentSuspenseConfig(); var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig); var update = createUpdate(expirationTime, suspenseConfig); update.tag = ForceUpdate; if (callback !== undefined && callback !== null) {
                        {
                            warnOnInvalidCallback(callback, 'forceUpdate');
                        }
                        update.callback = callback;
                    } enqueueUpdate(fiber, update); scheduleWork(fiber, expirationTime); } };
                function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
                    var instance = workInProgress.stateNode;
                    if (typeof instance.shouldComponentUpdate === 'function') {
                        {
                            if (workInProgress.mode & StrictMode) {
                                instance.shouldComponentUpdate(newProps, newState, nextContext);
                            }
                        }
                        startPhaseTimer(workInProgress, 'shouldComponentUpdate');
                        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                        stopPhaseTimer();
                        {
                            if (shouldUpdate === undefined) {
                                error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
                            }
                        }
                        return shouldUpdate;
                    }
                    if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
                    }
                    return true;
                }
                function checkClassInstance(workInProgress, ctor, newProps) { var instance = workInProgress.stateNode; {
                    var name = getComponentName(ctor) || 'Component';
                    var renderPresent = instance.render;
                    if (!renderPresent) {
                        if (ctor.prototype && typeof ctor.prototype.render === 'function') {
                            error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
                        }
                        else {
                            error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
                        }
                    }
                    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                        error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
                    }
                    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                        error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
                    }
                    if (instance.propTypes) {
                        error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
                    }
                    if (instance.contextType) {
                        error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
                    }
                    {
                        if (instance.contextTypes) {
                            error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
                        }
                        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                            didWarnAboutContextTypeAndContextTypes.add(ctor);
                            error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
                        }
                    }
                    if (typeof instance.componentShouldUpdate === 'function') {
                        error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
                    }
                    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
                        error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
                    }
                    if (typeof instance.componentDidUnmount === 'function') {
                        error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
                    }
                    if (typeof instance.componentDidReceiveProps === 'function') {
                        error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
                    }
                    if (typeof instance.componentWillRecieveProps === 'function') {
                        error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
                    }
                    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
                        error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
                    }
                    var hasMutatedProps = instance.props !== newProps;
                    if (instance.props !== undefined && hasMutatedProps) {
                        error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
                    }
                    if (instance.defaultProps) {
                        error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
                    }
                    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                        error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
                    }
                    if (typeof instance.getDerivedStateFromProps === 'function') {
                        error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
                    }
                    if (typeof instance.getDerivedStateFromError === 'function') {
                        error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
                    }
                    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
                        error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
                    }
                    var _state = instance.state;
                    if (_state && ((typeof _state === 'undefined' ? 'undefined' : _typeof(_state)) !== 'object' || isArray(_state))) {
                        error('%s.state: must be set to an object or null', name);
                    }
                    if (typeof instance.getChildContext === 'function' && _typeof(ctor.childContextTypes) !== 'object') {
                        error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
                    }
                } }
                function adoptClassInstance(workInProgress, instance) {
                    instance.updater = classComponentUpdater;
                    workInProgress.stateNode = instance;
                    set(instance, workInProgress);
                    {
                        instance._reactInternalInstance = fakeInternalInstance;
                    }
                }
                function constructClassInstance(workInProgress, ctor, props) {
                    var isLegacyContextConsumer = false;
                    var unmaskedContext = emptyContextObject;
                    var context = emptyContextObject;
                    var contextType = ctor.contextType;
                    {
                        if ('contextType' in ctor) {
                            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
                            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                                didWarnAboutInvalidateContextType.add(ctor);
                                var addendum = '';
                                if (contextType === undefined) {
                                    addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
                                }
                                else if ((typeof contextType === 'undefined' ? 'undefined' : _typeof(contextType)) !== 'object') {
                                    addendum = ' However, it is set to a ' + (typeof contextType === 'undefined' ? 'undefined' : _typeof(contextType)) + '.';
                                }
                                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                                    addendum = ' Did you accidentally pass the Context.Provider instead?';
                                }
                                else if (contextType._context !== undefined) {
                                    addendum = ' Did you accidentally pass the Context.Consumer instead?';
                                }
                                else {
                                    addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                                }
                                error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
                            }
                        }
                    }
                    if ((typeof contextType === 'undefined' ? 'undefined' : _typeof(contextType)) === 'object' && contextType !== null) {
                        context = _readContext(contextType);
                    }
                    else {
                        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                        var contextTypes = ctor.contextTypes;
                        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
                        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
                    }
                    {
                        if (workInProgress.mode & StrictMode) {
                            new ctor(props, context);
                        }
                    }
                    var instance = new ctor(props, context);
                    var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
                    adoptClassInstance(workInProgress, instance);
                    {
                        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
                            var componentName = getComponentName(ctor) || 'Component';
                            if (!didWarnAboutUninitializedState.has(componentName)) {
                                didWarnAboutUninitializedState.add(componentName);
                                error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
                            }
                        }
                        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
                            var foundWillMountName = null;
                            var foundWillReceivePropsName = null;
                            var foundWillUpdateName = null;
                            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                                foundWillMountName = 'componentWillMount';
                            }
                            else if (typeof instance.UNSAFE_componentWillMount === 'function') {
                                foundWillMountName = 'UNSAFE_componentWillMount';
                            }
                            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                                foundWillReceivePropsName = 'componentWillReceiveProps';
                            }
                            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                                foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
                            }
                            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                                foundWillUpdateName = 'componentWillUpdate';
                            }
                            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                                foundWillUpdateName = 'UNSAFE_componentWillUpdate';
                            }
                            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                                var _componentName = getComponentName(ctor) || 'Component';
                                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                                    error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                                }
                            }
                        }
                    }
                    if (isLegacyContextConsumer) {
                        cacheContext(workInProgress, unmaskedContext, context);
                    }
                    return instance;
                }
                function callComponentWillMount(workInProgress, instance) { startPhaseTimer(workInProgress, 'componentWillMount'); var oldState = instance.state; if (typeof instance.componentWillMount === 'function') {
                    instance.componentWillMount();
                } if (typeof instance.UNSAFE_componentWillMount === 'function') {
                    instance.UNSAFE_componentWillMount();
                } stopPhaseTimer(); if (oldState !== instance.state) {
                    {
                        error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
                    }
                    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
                } }
                function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) { var oldState = instance.state; startPhaseTimer(workInProgress, 'componentWillReceiveProps'); if (typeof instance.componentWillReceiveProps === 'function') {
                    instance.componentWillReceiveProps(newProps, nextContext);
                } if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
                } stopPhaseTimer(); if (instance.state !== oldState) {
                    {
                        var componentName = getComponentName(workInProgress.type) || 'Component';
                        if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                            didWarnAboutStateAssignmentForComponent.add(componentName);
                            error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
                        }
                    }
                    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
                } }
                function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
                    {
                        checkClassInstance(workInProgress, ctor, newProps);
                    }
                    var instance = workInProgress.stateNode;
                    instance.props = newProps;
                    instance.state = workInProgress.memoizedState;
                    instance.refs = emptyRefsObject;
                    initializeUpdateQueue(workInProgress);
                    var contextType = ctor.contextType;
                    if ((typeof contextType === 'undefined' ? 'undefined' : _typeof(contextType)) === 'object' && contextType !== null) {
                        instance.context = _readContext(contextType);
                    }
                    else {
                        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                        instance.context = getMaskedContext(workInProgress, unmaskedContext);
                    }
                    {
                        if (instance.state === newProps) {
                            var componentName = getComponentName(ctor) || 'Component';
                            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                                error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
                            }
                        }
                        if (workInProgress.mode & StrictMode) {
                            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
                        }
                        {
                            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
                        }
                    }
                    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
                    instance.state = workInProgress.memoizedState;
                    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                    if (typeof getDerivedStateFromProps === 'function') {
                        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                        instance.state = workInProgress.memoizedState;
                    }
                    if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                        callComponentWillMount(workInProgress, instance);
                        processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
                        instance.state = workInProgress.memoizedState;
                    }
                    if (typeof instance.componentDidMount === 'function') {
                        workInProgress.effectTag |= Update;
                    }
                }
                function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
                    var instance = workInProgress.stateNode;
                    var oldProps = workInProgress.memoizedProps;
                    instance.props = oldProps;
                    var oldContext = instance.context;
                    var contextType = ctor.contextType;
                    var nextContext = emptyContextObject;
                    if ((typeof contextType === 'undefined' ? 'undefined' : _typeof(contextType)) === 'object' && contextType !== null) {
                        nextContext = _readContext(contextType);
                    }
                    else {
                        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
                    }
                    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
                    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
                        if (oldProps !== newProps || oldContext !== nextContext) {
                            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                        }
                    }
                    resetHasForceUpdateBeforeProcessing();
                    var oldState = workInProgress.memoizedState;
                    var newState = instance.state = oldState;
                    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
                    newState = workInProgress.memoizedState;
                    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                        if (typeof instance.componentDidMount === 'function') {
                            workInProgress.effectTag |= Update;
                        }
                        return false;
                    }
                    if (typeof getDerivedStateFromProps === 'function') {
                        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                        newState = workInProgress.memoizedState;
                    }
                    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
                    if (shouldUpdate) {
                        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                            startPhaseTimer(workInProgress, 'componentWillMount');
                            if (typeof instance.componentWillMount === 'function') {
                                instance.componentWillMount();
                            }
                            if (typeof instance.UNSAFE_componentWillMount === 'function') {
                                instance.UNSAFE_componentWillMount();
                            }
                            stopPhaseTimer();
                        }
                        if (typeof instance.componentDidMount === 'function') {
                            workInProgress.effectTag |= Update;
                        }
                    }
                    else {
                        if (typeof instance.componentDidMount === 'function') {
                            workInProgress.effectTag |= Update;
                        }
                        workInProgress.memoizedProps = newProps;
                        workInProgress.memoizedState = newState;
                    }
                    instance.props = newProps;
                    instance.state = newState;
                    instance.context = nextContext;
                    return shouldUpdate;
                }
                function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
                    var instance = workInProgress.stateNode;
                    cloneUpdateQueue(current, workInProgress);
                    var oldProps = workInProgress.memoizedProps;
                    instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
                    var oldContext = instance.context;
                    var contextType = ctor.contextType;
                    var nextContext = emptyContextObject;
                    if ((typeof contextType === 'undefined' ? 'undefined' : _typeof(contextType)) === 'object' && contextType !== null) {
                        nextContext = _readContext(contextType);
                    }
                    else {
                        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
                    }
                    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
                    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
                    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
                        if (oldProps !== newProps || oldContext !== nextContext) {
                            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                        }
                    }
                    resetHasForceUpdateBeforeProcessing();
                    var oldState = workInProgress.memoizedState;
                    var newState = instance.state = oldState;
                    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
                    newState = workInProgress.memoizedState;
                    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                        if (typeof instance.componentDidUpdate === 'function') {
                            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                workInProgress.effectTag |= Update;
                            }
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                workInProgress.effectTag |= Snapshot;
                            }
                        }
                        return false;
                    }
                    if (typeof getDerivedStateFromProps === 'function') {
                        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                        newState = workInProgress.memoizedState;
                    }
                    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
                    if (shouldUpdate) {
                        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                            startPhaseTimer(workInProgress, 'componentWillUpdate');
                            if (typeof instance.componentWillUpdate === 'function') {
                                instance.componentWillUpdate(newProps, newState, nextContext);
                            }
                            if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                            }
                            stopPhaseTimer();
                        }
                        if (typeof instance.componentDidUpdate === 'function') {
                            workInProgress.effectTag |= Update;
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                            workInProgress.effectTag |= Snapshot;
                        }
                    }
                    else {
                        if (typeof instance.componentDidUpdate === 'function') {
                            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                workInProgress.effectTag |= Update;
                            }
                        }
                        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                workInProgress.effectTag |= Snapshot;
                            }
                        }
                        workInProgress.memoizedProps = newProps;
                        workInProgress.memoizedState = newState;
                    }
                    instance.props = newProps;
                    instance.state = newState;
                    instance.context = nextContext;
                    return shouldUpdate;
                }
                var didWarnAboutMaps;
                var didWarnAboutGenerators;
                var didWarnAboutStringRefs;
                var ownerHasKeyUseWarning;
                var ownerHasFunctionTypeWarning;
                var warnForMissingKey = function warnForMissingKey(child) { };
                {
                    didWarnAboutMaps = false;
                    didWarnAboutGenerators = false;
                    didWarnAboutStringRefs = {};
                    ownerHasKeyUseWarning = {};
                    ownerHasFunctionTypeWarning = {};
                    warnForMissingKey = function warnForMissingKey(child) { if (child === null || (typeof child === 'undefined' ? 'undefined' : _typeof(child)) !== 'object') {
                        return;
                    } if (!child._store || child._store.validated || child.key != null) {
                        return;
                    } if (!(_typeof(child._store) === 'object')) {
                        {
                            throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    } child._store.validated = true; var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev(); if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                        return;
                    } ownerHasKeyUseWarning[currentComponentErrorInfo] = true; error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.'); };
                }
                var isArray$1 = Array.isArray;
                function coerceRef(returnFiber, current, element) {
                    var mixedRef = element.ref;
                    if (mixedRef !== null && typeof mixedRef !== 'function' && (typeof mixedRef === 'undefined' ? 'undefined' : _typeof(mixedRef)) !== 'object') {
                        {
                            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) &&
                                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                                var componentName = getComponentName(returnFiber.type) || 'Component';
                                if (!didWarnAboutStringRefs[componentName]) {
                                    {
                                        error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                                    }
                                    didWarnAboutStringRefs[componentName] = true;
                                }
                            }
                        }
                        if (element._owner) {
                            var owner = element._owner;
                            var inst;
                            if (owner) {
                                var ownerFiber = owner;
                                if (!(ownerFiber.tag === ClassComponent)) {
                                    {
                                        throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
                                    }
                                }
                                inst = ownerFiber.stateNode;
                            }
                            if (!inst) {
                                {
                                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                                }
                            }
                            var stringRef = '' + mixedRef;
                            if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
                                return current.ref;
                            }
                            var ref = function ref(value) {
                                var refs = inst.refs;
                                if (refs === emptyRefsObject) {
                                    refs = inst.refs = {};
                                }
                                if (value === null) {
                                    delete refs[stringRef];
                                }
                                else {
                                    refs[stringRef] = value;
                                }
                            };
                            ref._stringRef = stringRef;
                            return ref;
                        }
                        else {
                            if (!(typeof mixedRef === 'string')) {
                                {
                                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                                }
                            }
                            if (!element._owner) {
                                {
                                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
                                }
                            }
                        }
                    }
                    return mixedRef;
                }
                function throwOnInvalidObjectType(returnFiber, newChild) { if (returnFiber.type !== 'textarea') {
                    var addendum = '';
                    {
                        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
                    }
                    {
                        {
                            throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum);
                        }
                    }
                } }
                function warnOnFunctionType() { {
                    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();
                    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
                        return;
                    }
                    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
                    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
                } }
                function ChildReconciler(shouldTrackSideEffects) {
                    function deleteChild(returnFiber, childToDelete) {
                        if (!shouldTrackSideEffects) {
                            return;
                        }
                        var last = returnFiber.lastEffect;
                        if (last !== null) {
                            last.nextEffect = childToDelete;
                            returnFiber.lastEffect = childToDelete;
                        }
                        else {
                            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                        }
                        childToDelete.nextEffect = null;
                        childToDelete.effectTag = Deletion;
                    }
                    function deleteRemainingChildren(returnFiber, currentFirstChild) {
                        if (!shouldTrackSideEffects) {
                            return null;
                        }
                        var childToDelete = currentFirstChild;
                        while (childToDelete !== null) {
                            deleteChild(returnFiber, childToDelete);
                            childToDelete = childToDelete.sibling;
                        }
                        return null;
                    }
                    function mapRemainingChildren(returnFiber, currentFirstChild) {
                        var existingChildren = new Map();
                        var existingChild = currentFirstChild;
                        while (existingChild !== null) {
                            if (existingChild.key !== null) {
                                existingChildren.set(existingChild.key, existingChild);
                            }
                            else {
                                existingChildren.set(existingChild.index, existingChild);
                            }
                            existingChild = existingChild.sibling;
                        }
                        return existingChildren;
                    }
                    function useFiber(fiber, pendingProps) {
                        var clone = createWorkInProgress(fiber, pendingProps);
                        clone.index = 0;
                        clone.sibling = null;
                        return clone;
                    }
                    function placeChild(newFiber, lastPlacedIndex, newIndex) {
                        newFiber.index = newIndex;
                        if (!shouldTrackSideEffects) {
                            return lastPlacedIndex;
                        }
                        var current = newFiber.alternate;
                        if (current !== null) {
                            var oldIndex = current.index;
                            if (oldIndex < lastPlacedIndex) {
                                newFiber.effectTag = Placement;
                                return lastPlacedIndex;
                            }
                            else {
                                return oldIndex;
                            }
                        }
                        else {
                            newFiber.effectTag = Placement;
                            return lastPlacedIndex;
                        }
                    }
                    function placeSingleChild(newFiber) {
                        if (shouldTrackSideEffects && newFiber.alternate === null) {
                            newFiber.effectTag = Placement;
                        }
                        return newFiber;
                    }
                    function updateTextNode(returnFiber, current, textContent, expirationTime) {
                        if (current === null || current.tag !== HostText) {
                            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
                            created.return = returnFiber;
                            return created;
                        }
                        else {
                            var existing = useFiber(current, textContent);
                            existing.return = returnFiber;
                            return existing;
                        }
                    }
                    function updateElement(returnFiber, current, element, expirationTime) {
                        if (current !== null) {
                            if (current.elementType === element.type ||
                                isCompatibleFamilyForHotReloading(current, element)) {
                                var existing = useFiber(current, element.props);
                                existing.ref = coerceRef(returnFiber, current, element);
                                existing.return = returnFiber;
                                {
                                    existing._debugSource = element._source;
                                    existing._debugOwner = element._owner;
                                }
                                return existing;
                            }
                        }
                        var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
                        created.ref = coerceRef(returnFiber, current, element);
                        created.return = returnFiber;
                        return created;
                    }
                    function updatePortal(returnFiber, current, portal, expirationTime) {
                        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
                            created.return = returnFiber;
                            return created;
                        }
                        else {
                            var existing = useFiber(current, portal.children || []);
                            existing.return = returnFiber;
                            return existing;
                        }
                    }
                    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
                        if (current === null || current.tag !== Fragment) {
                            var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
                            created.return = returnFiber;
                            return created;
                        }
                        else {
                            var existing = useFiber(current, fragment);
                            existing.return = returnFiber;
                            return existing;
                        }
                    }
                    function createChild(returnFiber, newChild, expirationTime) {
                        if (typeof newChild === 'string' || typeof newChild === 'number') {
                            var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
                            created.return = returnFiber;
                            return created;
                        }
                        if ((typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null) {
                            switch (newChild.$$typeof) {
                                case REACT_ELEMENT_TYPE: {
                                    var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                                    _created.ref = coerceRef(returnFiber, null, newChild);
                                    _created.return = returnFiber;
                                    return _created;
                                }
                                case REACT_PORTAL_TYPE: {
                                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                                    _created2.return = returnFiber;
                                    return _created2;
                                }
                            }
                            if (isArray$1(newChild) || getIteratorFn(newChild)) {
                                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                                _created3.return = returnFiber;
                                return _created3;
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === 'function') {
                                warnOnFunctionType();
                            }
                        }
                        return null;
                    }
                    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
                        var key = oldFiber !== null ? oldFiber.key : null;
                        if (typeof newChild === 'string' || typeof newChild === 'number') {
                            if (key !== null) {
                                return null;
                            }
                            return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
                        }
                        if ((typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null) {
                            switch (newChild.$$typeof) {
                                case REACT_ELEMENT_TYPE: {
                                    if (newChild.key === key) {
                                        if (newChild.type === REACT_FRAGMENT_TYPE) {
                                            return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                                        }
                                        return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                                    }
                                    else {
                                        return null;
                                    }
                                }
                                case REACT_PORTAL_TYPE: {
                                    if (newChild.key === key) {
                                        return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                                    }
                                    else {
                                        return null;
                                    }
                                }
                            }
                            if (isArray$1(newChild) || getIteratorFn(newChild)) {
                                if (key !== null) {
                                    return null;
                                }
                                return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === 'function') {
                                warnOnFunctionType();
                            }
                        }
                        return null;
                    }
                    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
                        if (typeof newChild === 'string' || typeof newChild === 'number') {
                            var matchedFiber = existingChildren.get(newIdx) || null;
                            return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
                        }
                        if ((typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null) {
                            switch (newChild.$$typeof) {
                                case REACT_ELEMENT_TYPE: {
                                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                                        return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                                    }
                                    return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                                }
                                case REACT_PORTAL_TYPE: {
                                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                    return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                                }
                            }
                            if (isArray$1(newChild) || getIteratorFn(newChild)) {
                                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                                return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === 'function') {
                                warnOnFunctionType();
                            }
                        }
                        return null;
                    }
                    function warnOnInvalidKey(child, knownKeys) { {
                        if ((typeof child === 'undefined' ? 'undefined' : _typeof(child)) !== 'object' || child === null) {
                            return knownKeys;
                        }
                        switch (child.$$typeof) {
                            case REACT_ELEMENT_TYPE:
                            case REACT_PORTAL_TYPE:
                                warnForMissingKey(child);
                                var key = child.key;
                                if (typeof key !== 'string') {
                                    break;
                                }
                                if (knownKeys === null) {
                                    knownKeys = new Set();
                                    knownKeys.add(key);
                                    break;
                                }
                                if (!knownKeys.has(key)) {
                                    knownKeys.add(key);
                                    break;
                                }
                                error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
                                break;
                        }
                    } return knownKeys; }
                    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
                        {
                            var knownKeys = null;
                            for (var i = 0; i < newChildren.length; i++) {
                                var child = newChildren[i];
                                knownKeys = warnOnInvalidKey(child, knownKeys);
                            }
                        }
                        var resultingFirstChild = null;
                        var previousNewFiber = null;
                        var oldFiber = currentFirstChild;
                        var lastPlacedIndex = 0;
                        var newIdx = 0;
                        var nextOldFiber = null;
                        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                            if (oldFiber.index > newIdx) {
                                nextOldFiber = oldFiber;
                                oldFiber = null;
                            }
                            else {
                                nextOldFiber = oldFiber.sibling;
                            }
                            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
                            if (newFiber === null) {
                                if (oldFiber === null) {
                                    oldFiber = nextOldFiber;
                                }
                                break;
                            }
                            if (shouldTrackSideEffects) {
                                if (oldFiber && newFiber.alternate === null) {
                                    deleteChild(returnFiber, oldFiber);
                                }
                            }
                            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                            if (previousNewFiber === null) {
                                resultingFirstChild = newFiber;
                            }
                            else {
                                previousNewFiber.sibling = newFiber;
                            }
                            previousNewFiber = newFiber;
                            oldFiber = nextOldFiber;
                        }
                        if (newIdx === newChildren.length) {
                            deleteRemainingChildren(returnFiber, oldFiber);
                            return resultingFirstChild;
                        }
                        if (oldFiber === null) {
                            for (; newIdx < newChildren.length; newIdx++) {
                                var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                                if (_newFiber === null) {
                                    continue;
                                }
                                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber;
                                }
                                else {
                                    previousNewFiber.sibling = _newFiber;
                                }
                                previousNewFiber = _newFiber;
                            }
                            return resultingFirstChild;
                        }
                        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                        for (; newIdx < newChildren.length; newIdx++) {
                            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
                            if (_newFiber2 !== null) {
                                if (shouldTrackSideEffects) {
                                    if (_newFiber2.alternate !== null) {
                                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                                    }
                                }
                                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber2;
                                }
                                else {
                                    previousNewFiber.sibling = _newFiber2;
                                }
                                previousNewFiber = _newFiber2;
                            }
                        }
                        if (shouldTrackSideEffects) {
                            existingChildren.forEach(function (child) { return deleteChild(returnFiber, child); });
                        }
                        return resultingFirstChild;
                    }
                    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
                        var iteratorFn = getIteratorFn(newChildrenIterable);
                        if (!(typeof iteratorFn === 'function')) {
                            {
                                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                        {
                            if (typeof Symbol === 'function' &&
                                newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                                if (!didWarnAboutGenerators) {
                                    error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
                                }
                                didWarnAboutGenerators = true;
                            }
                            if (newChildrenIterable.entries === iteratorFn) {
                                if (!didWarnAboutMaps) {
                                    error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
                                }
                                didWarnAboutMaps = true;
                            }
                            var _newChildren = iteratorFn.call(newChildrenIterable);
                            if (_newChildren) {
                                var knownKeys = null;
                                var _step = _newChildren.next();
                                for (; !_step.done; _step = _newChildren.next()) {
                                    var child = _step.value;
                                    knownKeys = warnOnInvalidKey(child, knownKeys);
                                }
                            }
                        }
                        var newChildren = iteratorFn.call(newChildrenIterable);
                        if (!(newChildren != null)) {
                            {
                                throw Error("An iterable object provided no iterator.");
                            }
                        }
                        var resultingFirstChild = null;
                        var previousNewFiber = null;
                        var oldFiber = currentFirstChild;
                        var lastPlacedIndex = 0;
                        var newIdx = 0;
                        var nextOldFiber = null;
                        var step = newChildren.next();
                        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                            if (oldFiber.index > newIdx) {
                                nextOldFiber = oldFiber;
                                oldFiber = null;
                            }
                            else {
                                nextOldFiber = oldFiber.sibling;
                            }
                            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
                            if (newFiber === null) {
                                if (oldFiber === null) {
                                    oldFiber = nextOldFiber;
                                }
                                break;
                            }
                            if (shouldTrackSideEffects) {
                                if (oldFiber && newFiber.alternate === null) {
                                    deleteChild(returnFiber, oldFiber);
                                }
                            }
                            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                            if (previousNewFiber === null) {
                                resultingFirstChild = newFiber;
                            }
                            else {
                                previousNewFiber.sibling = newFiber;
                            }
                            previousNewFiber = newFiber;
                            oldFiber = nextOldFiber;
                        }
                        if (step.done) {
                            deleteRemainingChildren(returnFiber, oldFiber);
                            return resultingFirstChild;
                        }
                        if (oldFiber === null) {
                            for (; !step.done; newIdx++, step = newChildren.next()) {
                                var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                                if (_newFiber3 === null) {
                                    continue;
                                }
                                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber3;
                                }
                                else {
                                    previousNewFiber.sibling = _newFiber3;
                                }
                                previousNewFiber = _newFiber3;
                            }
                            return resultingFirstChild;
                        }
                        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                        for (; !step.done; newIdx++, step = newChildren.next()) {
                            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
                            if (_newFiber4 !== null) {
                                if (shouldTrackSideEffects) {
                                    if (_newFiber4.alternate !== null) {
                                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                                    }
                                }
                                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber4;
                                }
                                else {
                                    previousNewFiber.sibling = _newFiber4;
                                }
                                previousNewFiber = _newFiber4;
                            }
                        }
                        if (shouldTrackSideEffects) {
                            existingChildren.forEach(function (child) { return deleteChild(returnFiber, child); });
                        }
                        return resultingFirstChild;
                    }
                    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
                        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                            var existing = useFiber(currentFirstChild, textContent);
                            existing.return = returnFiber;
                            return existing;
                        }
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
                        created.return = returnFiber;
                        return created;
                    }
                    function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
                        var key = element.key;
                        var child = currentFirstChild;
                        while (child !== null) {
                            if (child.key === key) {
                                switch (child.tag) {
                                    case Fragment: {
                                        if (element.type === REACT_FRAGMENT_TYPE) {
                                            deleteRemainingChildren(returnFiber, child.sibling);
                                            var existing = useFiber(child, element.props.children);
                                            existing.return = returnFiber;
                                            {
                                                existing._debugSource = element._source;
                                                existing._debugOwner = element._owner;
                                            }
                                            return existing;
                                        }
                                        break;
                                    }
                                    case Block:
                                    default: {
                                        if (child.elementType === element.type ||
                                            isCompatibleFamilyForHotReloading(child, element)) {
                                            deleteRemainingChildren(returnFiber, child.sibling);
                                            var _existing3 = useFiber(child, element.props);
                                            _existing3.ref = coerceRef(returnFiber, child, element);
                                            _existing3.return = returnFiber;
                                            {
                                                _existing3._debugSource = element._source;
                                                _existing3._debugOwner = element._owner;
                                            }
                                            return _existing3;
                                        }
                                        break;
                                    }
                                }
                                deleteRemainingChildren(returnFiber, child);
                                break;
                            }
                            else {
                                deleteChild(returnFiber, child);
                            }
                            child = child.sibling;
                        }
                        if (element.type === REACT_FRAGMENT_TYPE) {
                            var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
                            created.return = returnFiber;
                            return created;
                        }
                        else {
                            var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
                            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                            _created4.return = returnFiber;
                            return _created4;
                        }
                    }
                    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
                        var key = portal.key;
                        var child = currentFirstChild;
                        while (child !== null) {
                            if (child.key === key) {
                                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                                    deleteRemainingChildren(returnFiber, child.sibling);
                                    var existing = useFiber(child, portal.children || []);
                                    existing.return = returnFiber;
                                    return existing;
                                }
                                else {
                                    deleteRemainingChildren(returnFiber, child);
                                    break;
                                }
                            }
                            else {
                                deleteChild(returnFiber, child);
                            }
                            child = child.sibling;
                        }
                        var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
                        created.return = returnFiber;
                        return created;
                    }
                    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
                        var isUnkeyedTopLevelFragment = (typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
                        if (isUnkeyedTopLevelFragment) {
                            newChild = newChild.props.children;
                        }
                        var isObject = (typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null;
                        if (isObject) {
                            switch (newChild.$$typeof) {
                                case REACT_ELEMENT_TYPE: return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                                case REACT_PORTAL_TYPE: return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
                            }
                        }
                        if (typeof newChild === 'string' || typeof newChild === 'number') {
                            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
                        }
                        if (isArray$1(newChild)) {
                            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
                        }
                        if (getIteratorFn(newChild)) {
                            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
                        }
                        if (isObject) {
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === 'function') {
                                warnOnFunctionType();
                            }
                        }
                        if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
                            switch (returnFiber.tag) {
                                case ClassComponent: {
                                    {
                                        var instance = returnFiber.stateNode;
                                        if (instance.render._isMockFunction) {
                                            break;
                                        }
                                    }
                                }
                                case FunctionComponent: {
                                    var Component = returnFiber.type;
                                    {
                                        {
                                            throw Error((Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                                        }
                                    }
                                }
                            }
                        }
                        return deleteRemainingChildren(returnFiber, currentFirstChild);
                    }
                    return reconcileChildFibers;
                }
                var reconcileChildFibers = ChildReconciler(true);
                var mountChildFibers = ChildReconciler(false);
                function cloneChildFibers(current, workInProgress) { if (!(current === null || workInProgress.child === current.child)) {
                    {
                        throw Error("Resuming work not yet implemented.");
                    }
                } if (workInProgress.child === null) {
                    return;
                } var currentChild = workInProgress.child; var newChild = createWorkInProgress(currentChild, currentChild.pendingProps); workInProgress.child = newChild; newChild.return = workInProgress; while (currentChild.sibling !== null) {
                    currentChild = currentChild.sibling;
                    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
                    newChild.return = workInProgress;
                } newChild.sibling = null; }
                function resetChildFibers(workInProgress, renderExpirationTime) { var child = workInProgress.child; while (child !== null) {
                    resetWorkInProgress(child, renderExpirationTime);
                    child = child.sibling;
                } }
                var NO_CONTEXT = {};
                var contextStackCursor$1 = createCursor(NO_CONTEXT);
                var contextFiberStackCursor = createCursor(NO_CONTEXT);
                var rootInstanceStackCursor = createCursor(NO_CONTEXT);
                function requiredContext(c) { if (!(c !== NO_CONTEXT)) {
                    {
                        throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
                    }
                } return c; }
                function getRootHostContainer() { var rootInstance = requiredContext(rootInstanceStackCursor.current); return rootInstance; }
                function pushHostContainer(fiber, nextRootInstance) {
                    push(rootInstanceStackCursor, nextRootInstance, fiber);
                    push(contextFiberStackCursor, fiber, fiber);
                    push(contextStackCursor$1, NO_CONTEXT, fiber);
                    var nextRootContext = getRootHostContext(nextRootInstance);
                    pop(contextStackCursor$1, fiber);
                    push(contextStackCursor$1, nextRootContext, fiber);
                }
                function popHostContainer(fiber) { pop(contextStackCursor$1, fiber); pop(contextFiberStackCursor, fiber); pop(rootInstanceStackCursor, fiber); }
                function getHostContext() { var context = requiredContext(contextStackCursor$1.current); return context; }
                function pushHostContext(fiber) {
                    var rootInstance = requiredContext(rootInstanceStackCursor.current);
                    var context = requiredContext(contextStackCursor$1.current);
                    var nextContext = getChildHostContext(context, fiber.type);
                    if (context === nextContext) {
                        return;
                    }
                    push(contextFiberStackCursor, fiber, fiber);
                    push(contextStackCursor$1, nextContext, fiber);
                }
                function popHostContext(fiber) {
                    if (contextFiberStackCursor.current !== fiber) {
                        return;
                    }
                    pop(contextStackCursor$1, fiber);
                    pop(contextFiberStackCursor, fiber);
                }
                var DefaultSuspenseContext = 0;
                var SubtreeSuspenseContextMask = 1;
                var InvisibleParentSuspenseContext = 1;
                var ForceSuspenseFallback = 2;
                var suspenseStackCursor = createCursor(DefaultSuspenseContext);
                function hasSuspenseContext(parentContext, flag) { return (parentContext & flag) !== 0; }
                function setDefaultShallowSuspenseContext(parentContext) { return parentContext & SubtreeSuspenseContextMask; }
                function setShallowSuspenseContext(parentContext, shallowContext) { return parentContext & SubtreeSuspenseContextMask | shallowContext; }
                function addSubtreeSuspenseContext(parentContext, subtreeContext) { return parentContext | subtreeContext; }
                function pushSuspenseContext(fiber, newContext) { push(suspenseStackCursor, newContext, fiber); }
                function popSuspenseContext(fiber) { pop(suspenseStackCursor, fiber); }
                function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
                    var nextState = workInProgress.memoizedState;
                    if (nextState !== null) {
                        if (nextState.dehydrated !== null) {
                            return true;
                        }
                        return false;
                    }
                    var props = workInProgress.memoizedProps;
                    if (props.fallback === undefined) {
                        return false;
                    }
                    if (props.unstable_avoidThisFallback !== true) {
                        return true;
                    }
                    if (hasInvisibleParent) {
                        return false;
                    }
                    return true;
                }
                function findFirstSuspended(row) {
                    var node = row;
                    while (node !== null) {
                        if (node.tag === SuspenseComponent) {
                            var state = node.memoizedState;
                            if (state !== null) {
                                var dehydrated = state.dehydrated;
                                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                                    return node;
                                }
                            }
                        }
                        else if (node.tag === SuspenseListComponent &&
                            node.memoizedProps.revealOrder !== undefined) {
                            var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
                            if (didSuspend) {
                                return node;
                            }
                        }
                        else if (node.child !== null) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                        if (node === row) {
                            return null;
                        }
                        while (node.sibling === null) {
                            if (node.return === null || node.return === row) {
                                return null;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                    }
                    return null;
                }
                function createDeprecatedResponderListener(responder, props) { var eventResponderListener = { responder: responder, props: props }; {
                    Object.freeze(eventResponderListener);
                } return eventResponderListener; }
                var HasEffect = 1;
                var Layout = 2;
                var Passive$1 = 4;
                var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
                var didWarnAboutMismatchedHooksForComponent;
                {
                    didWarnAboutMismatchedHooksForComponent = new Set();
                }
                var renderExpirationTime = NoWork;
                var currentlyRenderingFiber$1 = null;
                var currentHook = null;
                var workInProgressHook = null;
                var didScheduleRenderPhaseUpdate = false;
                var RE_RENDER_LIMIT = 25;
                var currentHookNameInDev = null;
                var hookTypesDev = null;
                var hookTypesUpdateIndexDev = -1;
                var ignorePreviousDependencies = false;
                function mountHookTypesDev() { {
                    var hookName = currentHookNameInDev;
                    if (hookTypesDev === null) {
                        hookTypesDev = [hookName];
                    }
                    else {
                        hookTypesDev.push(hookName);
                    }
                } }
                function updateHookTypesDev() { {
                    var hookName = currentHookNameInDev;
                    if (hookTypesDev !== null) {
                        hookTypesUpdateIndexDev++;
                        if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                            warnOnHookMismatchInDev(hookName);
                        }
                    }
                } }
                function checkDepsAreArrayDev(deps) {
                    {
                        if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
                            error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps === 'undefined' ? 'undefined' : _typeof(deps));
                        }
                    }
                }
                function warnOnHookMismatchInDev(currentHookName) {
                    {
                        var componentName = getComponentName(currentlyRenderingFiber$1.type);
                        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                            didWarnAboutMismatchedHooksForComponent.add(componentName);
                            if (hookTypesDev !== null) {
                                var table = '';
                                var secondColumnStart = 30;
                                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                                    var oldHookName = hookTypesDev[i];
                                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                                    var row = i + 1 + ". " + oldHookName;
                                    while (row.length < secondColumnStart) {
                                        row += ' ';
                                    }
                                    row += newHookName + '\n';
                                    table += row;
                                }
                                error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
                            }
                        }
                    }
                }
                function throwInvalidHookError() { {
                    {
                        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
                    }
                } }
                function areHookInputsEqual(nextDeps, prevDeps) {
                    {
                        if (ignorePreviousDependencies) {
                            return false;
                        }
                    }
                    if (prevDeps === null) {
                        {
                            error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
                        }
                        return false;
                    }
                    {
                        if (nextDeps.length !== prevDeps.length) {
                            error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
                        }
                    }
                    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
                        if (objectIs(nextDeps[i], prevDeps[i])) {
                            continue;
                        }
                        return false;
                    }
                    return true;
                }
                function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
                    renderExpirationTime = nextRenderExpirationTime;
                    currentlyRenderingFiber$1 = workInProgress;
                    {
                        hookTypesDev = current !== null ? current._debugHookTypes : null;
                        hookTypesUpdateIndexDev = -1;
                        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
                    }
                    workInProgress.memoizedState = null;
                    workInProgress.updateQueue = null;
                    workInProgress.expirationTime = NoWork;
                    {
                        if (current !== null && current.memoizedState !== null) {
                            ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
                        }
                        else if (hookTypesDev !== null) {
                            ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
                        }
                        else {
                            ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
                        }
                    }
                    var children = Component(props, secondArg);
                    if (workInProgress.expirationTime === renderExpirationTime) {
                        var numberOfReRenders = 0;
                        do {
                            workInProgress.expirationTime = NoWork;
                            if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                                {
                                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                                }
                            }
                            numberOfReRenders += 1;
                            {
                                ignorePreviousDependencies = false;
                            }
                            currentHook = null;
                            workInProgressHook = null;
                            workInProgress.updateQueue = null;
                            {
                                hookTypesUpdateIndexDev = -1;
                            }
                            ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
                            children = Component(props, secondArg);
                        } while (workInProgress.expirationTime === renderExpirationTime);
                    }
                    ReactCurrentDispatcher.current = ContextOnlyDispatcher;
                    {
                        workInProgress._debugHookTypes = hookTypesDev;
                    }
                    var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
                    renderExpirationTime = NoWork;
                    currentlyRenderingFiber$1 = null;
                    currentHook = null;
                    workInProgressHook = null;
                    {
                        currentHookNameInDev = null;
                        hookTypesDev = null;
                        hookTypesUpdateIndexDev = -1;
                    }
                    didScheduleRenderPhaseUpdate = false;
                    if (!!didRenderTooFewHooks) {
                        {
                            throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
                        }
                    }
                    return children;
                }
                function bailoutHooks(current, workInProgress, expirationTime) { workInProgress.updateQueue = current.updateQueue; workInProgress.effectTag &= ~(Passive | Update); if (current.expirationTime <= expirationTime) {
                    current.expirationTime = NoWork;
                } }
                function resetHooksAfterThrow() {
                    ReactCurrentDispatcher.current = ContextOnlyDispatcher;
                    if (didScheduleRenderPhaseUpdate) {
                        var hook = currentlyRenderingFiber$1.memoizedState;
                        while (hook !== null) {
                            var queue = hook.queue;
                            if (queue !== null) {
                                queue.pending = null;
                            }
                            hook = hook.next;
                        }
                    }
                    renderExpirationTime = NoWork;
                    currentlyRenderingFiber$1 = null;
                    currentHook = null;
                    workInProgressHook = null;
                    {
                        hookTypesDev = null;
                        hookTypesUpdateIndexDev = -1;
                        currentHookNameInDev = null;
                    }
                    didScheduleRenderPhaseUpdate = false;
                }
                function mountWorkInProgressHook() {
                    var hook = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
                    if (workInProgressHook === null) {
                        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
                    }
                    else {
                        workInProgressHook = workInProgressHook.next = hook;
                    }
                    return workInProgressHook;
                }
                function updateWorkInProgressHook() {
                    var nextCurrentHook;
                    if (currentHook === null) {
                        var current = currentlyRenderingFiber$1.alternate;
                        if (current !== null) {
                            nextCurrentHook = current.memoizedState;
                        }
                        else {
                            nextCurrentHook = null;
                        }
                    }
                    else {
                        nextCurrentHook = currentHook.next;
                    }
                    var nextWorkInProgressHook;
                    if (workInProgressHook === null) {
                        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
                    }
                    else {
                        nextWorkInProgressHook = workInProgressHook.next;
                    }
                    if (nextWorkInProgressHook !== null) {
                        workInProgressHook = nextWorkInProgressHook;
                        nextWorkInProgressHook = workInProgressHook.next;
                        currentHook = nextCurrentHook;
                    }
                    else {
                        if (!(nextCurrentHook !== null)) {
                            {
                                throw Error("Rendered more hooks than during the previous render.");
                            }
                        }
                        currentHook = nextCurrentHook;
                        var newHook = { memoizedState: currentHook.memoizedState, baseState: currentHook.baseState, baseQueue: currentHook.baseQueue, queue: currentHook.queue, next: null };
                        if (workInProgressHook === null) {
                            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
                        }
                        else {
                            workInProgressHook = workInProgressHook.next = newHook;
                        }
                    }
                    return workInProgressHook;
                }
                function createFunctionComponentUpdateQueue() { return { lastEffect: null }; }
                function basicStateReducer(state, action) {
                    return typeof action === 'function' ? action(state) : action;
                }
                function mountReducer(reducer, initialArg, init) { var hook = mountWorkInProgressHook(); var initialState; if (init !== undefined) {
                    initialState = init(initialArg);
                }
                else {
                    initialState = initialArg;
                } hook.memoizedState = hook.baseState = initialState; var queue = hook.queue = { pending: null, dispatch: null, lastRenderedReducer: reducer, lastRenderedState: initialState }; var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue); return [hook.memoizedState, dispatch]; }
                function updateReducer(reducer, initialArg, init) {
                    var hook = updateWorkInProgressHook();
                    var queue = hook.queue;
                    if (!(queue !== null)) {
                        {
                            throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                        }
                    }
                    queue.lastRenderedReducer = reducer;
                    var current = currentHook;
                    var baseQueue = current.baseQueue;
                    var pendingQueue = queue.pending;
                    if (pendingQueue !== null) {
                        if (baseQueue !== null) {
                            var baseFirst = baseQueue.next;
                            var pendingFirst = pendingQueue.next;
                            baseQueue.next = pendingFirst;
                            pendingQueue.next = baseFirst;
                        }
                        current.baseQueue = baseQueue = pendingQueue;
                        queue.pending = null;
                    }
                    if (baseQueue !== null) {
                        var first = baseQueue.next;
                        var newState = current.baseState;
                        var newBaseState = null;
                        var newBaseQueueFirst = null;
                        var newBaseQueueLast = null;
                        var update = first;
                        do {
                            var updateExpirationTime = update.expirationTime;
                            if (updateExpirationTime < renderExpirationTime) {
                                var clone = { expirationTime: update.expirationTime, suspenseConfig: update.suspenseConfig, action: update.action, eagerReducer: update.eagerReducer, eagerState: update.eagerState, next: null };
                                if (newBaseQueueLast === null) {
                                    newBaseQueueFirst = newBaseQueueLast = clone;
                                    newBaseState = newState;
                                }
                                else {
                                    newBaseQueueLast = newBaseQueueLast.next = clone;
                                }
                                if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                                    currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                                    markUnprocessedUpdateTime(updateExpirationTime);
                                }
                            }
                            else {
                                if (newBaseQueueLast !== null) {
                                    var _clone = { expirationTime: Sync,
                                        suspenseConfig: update.suspenseConfig, action: update.action, eagerReducer: update.eagerReducer, eagerState: update.eagerState, next: null };
                                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                                }
                                markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                                if (update.eagerReducer === reducer) {
                                    newState = update.eagerState;
                                }
                                else {
                                    var action = update.action;
                                    newState = reducer(newState, action);
                                }
                            }
                            update = update.next;
                        } while (update !== null && update !== first);
                        if (newBaseQueueLast === null) {
                            newBaseState = newState;
                        }
                        else {
                            newBaseQueueLast.next = newBaseQueueFirst;
                        }
                        if (!objectIs(newState, hook.memoizedState)) {
                            markWorkInProgressReceivedUpdate();
                        }
                        hook.memoizedState = newState;
                        hook.baseState = newBaseState;
                        hook.baseQueue = newBaseQueueLast;
                        queue.lastRenderedState = newState;
                    }
                    var dispatch = queue.dispatch;
                    return [hook.memoizedState, dispatch];
                }
                function rerenderReducer(reducer, initialArg, init) {
                    var hook = updateWorkInProgressHook();
                    var queue = hook.queue;
                    if (!(queue !== null)) {
                        {
                            throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
                        }
                    }
                    queue.lastRenderedReducer = reducer;
                    var dispatch = queue.dispatch;
                    var lastRenderPhaseUpdate = queue.pending;
                    var newState = hook.memoizedState;
                    if (lastRenderPhaseUpdate !== null) {
                        queue.pending = null;
                        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                        var update = firstRenderPhaseUpdate;
                        do {
                            var action = update.action;
                            newState = reducer(newState, action);
                            update = update.next;
                        } while (update !== firstRenderPhaseUpdate);
                        if (!objectIs(newState, hook.memoizedState)) {
                            markWorkInProgressReceivedUpdate();
                        }
                        hook.memoizedState = newState;
                        if (hook.baseQueue === null) {
                            hook.baseState = newState;
                        }
                        queue.lastRenderedState = newState;
                    }
                    return [newState, dispatch];
                }
                function mountState(initialState) {
                    var hook = mountWorkInProgressHook();
                    if (typeof initialState === 'function') {
                        initialState = initialState();
                    }
                    hook.memoizedState = hook.baseState = initialState;
                    var queue = hook.queue = { pending: null, dispatch: null, lastRenderedReducer: basicStateReducer, lastRenderedState: initialState };
                    var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
                    return [hook.memoizedState, dispatch];
                }
                function updateState(initialState) { return updateReducer(basicStateReducer); }
                function rerenderState(initialState) { return rerenderReducer(basicStateReducer); }
                function pushEffect(tag, create, destroy, deps) {
                    var effect = { tag: tag, create: create, destroy: destroy, deps: deps,
                        next: null };
                    var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
                    if (componentUpdateQueue === null) {
                        componentUpdateQueue = createFunctionComponentUpdateQueue();
                        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
                        componentUpdateQueue.lastEffect = effect.next = effect;
                    }
                    else {
                        var lastEffect = componentUpdateQueue.lastEffect;
                        if (lastEffect === null) {
                            componentUpdateQueue.lastEffect = effect.next = effect;
                        }
                        else {
                            var firstEffect = lastEffect.next;
                            lastEffect.next = effect;
                            effect.next = firstEffect;
                            componentUpdateQueue.lastEffect = effect;
                        }
                    }
                    return effect;
                }
                function mountRef(initialValue) { var hook = mountWorkInProgressHook(); var ref = { current: initialValue }; {
                    Object.seal(ref);
                } hook.memoizedState = ref; return ref; }
                function updateRef(initialValue) { var hook = updateWorkInProgressHook(); return hook.memoizedState; }
                function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) { var hook = mountWorkInProgressHook(); var nextDeps = deps === undefined ? null : deps; currentlyRenderingFiber$1.effectTag |= fiberEffectTag; hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps); }
                function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) { var hook = updateWorkInProgressHook(); var nextDeps = deps === undefined ? null : deps; var destroy = undefined; if (currentHook !== null) {
                    var prevEffect = currentHook.memoizedState;
                    destroy = prevEffect.destroy;
                    if (nextDeps !== null) {
                        var prevDeps = prevEffect.deps;
                        if (areHookInputsEqual(nextDeps, prevDeps)) {
                            pushEffect(hookEffectTag, create, destroy, nextDeps);
                            return;
                        }
                    }
                } currentlyRenderingFiber$1.effectTag |= fiberEffectTag; hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps); }
                function mountEffect(create, deps) {
                    {
                        if ('undefined' !== typeof jest) {
                            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                        }
                    }
                    return mountEffectImpl(Update | Passive, Passive$1, create, deps);
                }
                function updateEffect(create, deps) {
                    {
                        if ('undefined' !== typeof jest) {
                            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                        }
                    }
                    return updateEffectImpl(Update | Passive, Passive$1, create, deps);
                }
                function mountLayoutEffect(create, deps) { return mountEffectImpl(Update, Layout, create, deps); }
                function updateLayoutEffect(create, deps) { return updateEffectImpl(Update, Layout, create, deps); }
                function imperativeHandleEffect(create, ref) { if (typeof ref === 'function') {
                    var refCallback = ref;
                    var _inst = create();
                    refCallback(_inst);
                    return function () { refCallback(null); };
                }
                else if (ref !== null && ref !== undefined) {
                    var refObject = ref;
                    {
                        if (!refObject.hasOwnProperty('current')) {
                            error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
                        }
                    }
                    var _inst2 = create();
                    refObject.current = _inst2;
                    return function () { refObject.current = null; };
                } }
                function mountImperativeHandle(ref, create, deps) {
                    {
                        if (typeof create !== 'function') {
                            error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create === 'undefined' ? 'undefined' : _typeof(create) : 'null');
                        }
                    }
                    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
                    return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
                }
                function updateImperativeHandle(ref, create, deps) {
                    {
                        if (typeof create !== 'function') {
                            error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create === 'undefined' ? 'undefined' : _typeof(create) : 'null');
                        }
                    }
                    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
                    return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
                }
                function mountDebugValue(value, formatterFn) {
                }
                var updateDebugValue = mountDebugValue;
                function mountCallback(callback, deps) { var hook = mountWorkInProgressHook(); var nextDeps = deps === undefined ? null : deps; hook.memoizedState = [callback, nextDeps]; return callback; }
                function updateCallback(callback, deps) { var hook = updateWorkInProgressHook(); var nextDeps = deps === undefined ? null : deps; var prevState = hook.memoizedState; if (prevState !== null) {
                    if (nextDeps !== null) {
                        var prevDeps = prevState[1];
                        if (areHookInputsEqual(nextDeps, prevDeps)) {
                            return prevState[0];
                        }
                    }
                } hook.memoizedState = [callback, nextDeps]; return callback; }
                function mountMemo(nextCreate, deps) { var hook = mountWorkInProgressHook(); var nextDeps = deps === undefined ? null : deps; var nextValue = nextCreate(); hook.memoizedState = [nextValue, nextDeps]; return nextValue; }
                function updateMemo(nextCreate, deps) {
                    var hook = updateWorkInProgressHook();
                    var nextDeps = deps === undefined ? null : deps;
                    var prevState = hook.memoizedState;
                    if (prevState !== null) {
                        if (nextDeps !== null) {
                            var prevDeps = prevState[1];
                            if (areHookInputsEqual(nextDeps, prevDeps)) {
                                return prevState[0];
                            }
                        }
                    }
                    var nextValue = nextCreate();
                    hook.memoizedState = [nextValue, nextDeps];
                    return nextValue;
                }
                function mountDeferredValue(value, config) { var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1]; mountEffect(function () { var previousConfig = ReactCurrentBatchConfig$1.suspense; ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config; try {
                    setValue(value);
                }
                finally {
                    ReactCurrentBatchConfig$1.suspense = previousConfig;
                } }, [value, config]); return prevValue; }
                function updateDeferredValue(value, config) { var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1]; updateEffect(function () { var previousConfig = ReactCurrentBatchConfig$1.suspense; ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config; try {
                    setValue(value);
                }
                finally {
                    ReactCurrentBatchConfig$1.suspense = previousConfig;
                } }, [value, config]); return prevValue; }
                function rerenderDeferredValue(value, config) { var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1]; updateEffect(function () { var previousConfig = ReactCurrentBatchConfig$1.suspense; ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config; try {
                    setValue(value);
                }
                finally {
                    ReactCurrentBatchConfig$1.suspense = previousConfig;
                } }, [value, config]); return prevValue; }
                function startTransition(setPending, config, callback) { var priorityLevel = getCurrentPriorityLevel(); runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () { setPending(true); }); runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () { var previousConfig = ReactCurrentBatchConfig$1.suspense; ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config; try {
                    setPending(false);
                    callback();
                }
                finally {
                    ReactCurrentBatchConfig$1.suspense = previousConfig;
                } }); }
                function mountTransition(config) { var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]); return [start, isPending]; }
                function updateTransition(config) { var _updateState2 = updateState(), isPending = _updateState2[0], setPending = _updateState2[1]; var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]); return [start, isPending]; }
                function rerenderTransition(config) { var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1]; var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]); return [start, isPending]; }
                function dispatchAction(fiber, queue, action) {
                    {
                        if (typeof arguments[3] === 'function') {
                            error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
                        }
                    }
                    var currentTime = requestCurrentTimeForUpdate();
                    var suspenseConfig = requestCurrentSuspenseConfig();
                    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
                    var update = { expirationTime: expirationTime, suspenseConfig: suspenseConfig, action: action, eagerReducer: null, eagerState: null, next: null };
                    {
                        update.priority = getCurrentPriorityLevel();
                    }
                    var pending = queue.pending;
                    if (pending === null) {
                        update.next = update;
                    }
                    else {
                        update.next = pending.next;
                        pending.next = update;
                    }
                    queue.pending = update;
                    var alternate = fiber.alternate;
                    if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
                        didScheduleRenderPhaseUpdate = true;
                        update.expirationTime = renderExpirationTime;
                        currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
                    }
                    else {
                        if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
                            var lastRenderedReducer = queue.lastRenderedReducer;
                            if (lastRenderedReducer !== null) {
                                var prevDispatcher;
                                {
                                    prevDispatcher = ReactCurrentDispatcher.current;
                                    ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                                }
                                try {
                                    var currentState = queue.lastRenderedState;
                                    var eagerState = lastRenderedReducer(currentState, action);
                                    update.eagerReducer = lastRenderedReducer;
                                    update.eagerState = eagerState;
                                    if (objectIs(eagerState, currentState)) {
                                        return;
                                    }
                                }
                                catch (error) {
                                }
                                finally {
                                    {
                                        ReactCurrentDispatcher.current = prevDispatcher;
                                    }
                                }
                            }
                        }
                        {
                            if ('undefined' !== typeof jest) {
                                warnIfNotScopedWithMatchingAct(fiber);
                                warnIfNotCurrentlyActingUpdatesInDev(fiber);
                            }
                        }
                        scheduleWork(fiber, expirationTime);
                    }
                }
                var ContextOnlyDispatcher = { readContext: _readContext, useCallback: throwInvalidHookError, useContext: throwInvalidHookError, useEffect: throwInvalidHookError, useImperativeHandle: throwInvalidHookError, useLayoutEffect: throwInvalidHookError, useMemo: throwInvalidHookError, useReducer: throwInvalidHookError, useRef: throwInvalidHookError, useState: throwInvalidHookError, useDebugValue: throwInvalidHookError, useResponder: throwInvalidHookError, useDeferredValue: throwInvalidHookError, useTransition: throwInvalidHookError };
                var HooksDispatcherOnMountInDEV = null;
                var HooksDispatcherOnMountWithHookTypesInDEV = null;
                var HooksDispatcherOnUpdateInDEV = null;
                var HooksDispatcherOnRerenderInDEV = null;
                var InvalidNestedHooksDispatcherOnMountInDEV = null;
                var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
                var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
                {
                    var warnInvalidContextAccess = function warnInvalidContextAccess() { error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().'); };
                    var warnInvalidHookAccess = function warnInvalidHookAccess() { error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks'); };
                    HooksDispatcherOnMountInDEV = { readContext: function readContext(context, observedBits) { return _readContext(context, observedBits); }, useCallback: function useCallback(callback, deps) { currentHookNameInDev = 'useCallback'; mountHookTypesDev(); checkDepsAreArrayDev(deps); return mountCallback(callback, deps); }, useContext: function useContext(context, observedBits) { currentHookNameInDev = 'useContext'; mountHookTypesDev(); return _readContext(context, observedBits); }, useEffect: function useEffect(create, deps) { currentHookNameInDev = 'useEffect'; mountHookTypesDev(); checkDepsAreArrayDev(deps); return mountEffect(create, deps); }, useImperativeHandle: function useImperativeHandle(ref, create, deps) { currentHookNameInDev = 'useImperativeHandle'; mountHookTypesDev(); checkDepsAreArrayDev(deps); return mountImperativeHandle(ref, create, deps); }, useLayoutEffect: function useLayoutEffect(create, deps) { currentHookNameInDev = 'useLayoutEffect'; mountHookTypesDev(); checkDepsAreArrayDev(deps); return mountLayoutEffect(create, deps); }, useMemo: function useMemo(create, deps) { currentHookNameInDev = 'useMemo'; mountHookTypesDev(); checkDepsAreArrayDev(deps); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV; try {
                            return mountMemo(create, deps);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useReducer: function useReducer(reducer, initialArg, init) { currentHookNameInDev = 'useReducer'; mountHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV; try {
                            return mountReducer(reducer, initialArg, init);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useRef: function useRef(initialValue) { currentHookNameInDev = 'useRef'; mountHookTypesDev(); return mountRef(initialValue); }, useState: function useState(initialState) { currentHookNameInDev = 'useState'; mountHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV; try {
                            return mountState(initialState);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useDebugValue: function useDebugValue(value, formatterFn) { currentHookNameInDev = 'useDebugValue'; mountHookTypesDev(); return mountDebugValue(); }, useResponder: function useResponder(responder, props) { currentHookNameInDev = 'useResponder'; mountHookTypesDev(); return createDeprecatedResponderListener(responder, props); }, useDeferredValue: function useDeferredValue(value, config) { currentHookNameInDev = 'useDeferredValue'; mountHookTypesDev(); return mountDeferredValue(value, config); }, useTransition: function useTransition(config) { currentHookNameInDev = 'useTransition'; mountHookTypesDev(); return mountTransition(config); } };
                    HooksDispatcherOnMountWithHookTypesInDEV = { readContext: function readContext(context, observedBits) { return _readContext(context, observedBits); }, useCallback: function useCallback(callback, deps) { currentHookNameInDev = 'useCallback'; updateHookTypesDev(); return mountCallback(callback, deps); }, useContext: function useContext(context, observedBits) { currentHookNameInDev = 'useContext'; updateHookTypesDev(); return _readContext(context, observedBits); }, useEffect: function useEffect(create, deps) { currentHookNameInDev = 'useEffect'; updateHookTypesDev(); return mountEffect(create, deps); }, useImperativeHandle: function useImperativeHandle(ref, create, deps) { currentHookNameInDev = 'useImperativeHandle'; updateHookTypesDev(); return mountImperativeHandle(ref, create, deps); }, useLayoutEffect: function useLayoutEffect(create, deps) { currentHookNameInDev = 'useLayoutEffect'; updateHookTypesDev(); return mountLayoutEffect(create, deps); }, useMemo: function useMemo(create, deps) { currentHookNameInDev = 'useMemo'; updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV; try {
                            return mountMemo(create, deps);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useReducer: function useReducer(reducer, initialArg, init) { currentHookNameInDev = 'useReducer'; updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV; try {
                            return mountReducer(reducer, initialArg, init);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useRef: function useRef(initialValue) { currentHookNameInDev = 'useRef'; updateHookTypesDev(); return mountRef(initialValue); }, useState: function useState(initialState) { currentHookNameInDev = 'useState'; updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV; try {
                            return mountState(initialState);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useDebugValue: function useDebugValue(value, formatterFn) { currentHookNameInDev = 'useDebugValue'; updateHookTypesDev(); return mountDebugValue(); }, useResponder: function useResponder(responder, props) { currentHookNameInDev = 'useResponder'; updateHookTypesDev(); return createDeprecatedResponderListener(responder, props); }, useDeferredValue: function useDeferredValue(value, config) { currentHookNameInDev = 'useDeferredValue'; updateHookTypesDev(); return mountDeferredValue(value, config); }, useTransition: function useTransition(config) { currentHookNameInDev = 'useTransition'; updateHookTypesDev(); return mountTransition(config); } };
                    HooksDispatcherOnUpdateInDEV = { readContext: function readContext(context, observedBits) { return _readContext(context, observedBits); }, useCallback: function useCallback(callback, deps) { currentHookNameInDev = 'useCallback'; updateHookTypesDev(); return updateCallback(callback, deps); }, useContext: function useContext(context, observedBits) { currentHookNameInDev = 'useContext'; updateHookTypesDev(); return _readContext(context, observedBits); }, useEffect: function useEffect(create, deps) { currentHookNameInDev = 'useEffect'; updateHookTypesDev(); return updateEffect(create, deps); }, useImperativeHandle: function useImperativeHandle(ref, create, deps) { currentHookNameInDev = 'useImperativeHandle'; updateHookTypesDev(); return updateImperativeHandle(ref, create, deps); }, useLayoutEffect: function useLayoutEffect(create, deps) { currentHookNameInDev = 'useLayoutEffect'; updateHookTypesDev(); return updateLayoutEffect(create, deps); }, useMemo: function useMemo(create, deps) { currentHookNameInDev = 'useMemo'; updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV; try {
                            return updateMemo(create, deps);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useReducer: function useReducer(reducer, initialArg, init) { currentHookNameInDev = 'useReducer'; updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV; try {
                            return updateReducer(reducer, initialArg, init);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useRef: function useRef(initialValue) { currentHookNameInDev = 'useRef'; updateHookTypesDev(); return updateRef(); }, useState: function useState(initialState) { currentHookNameInDev = 'useState'; updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV; try {
                            return updateState(initialState);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useDebugValue: function useDebugValue(value, formatterFn) { currentHookNameInDev = 'useDebugValue'; updateHookTypesDev(); return updateDebugValue(); }, useResponder: function useResponder(responder, props) { currentHookNameInDev = 'useResponder'; updateHookTypesDev(); return createDeprecatedResponderListener(responder, props); }, useDeferredValue: function useDeferredValue(value, config) { currentHookNameInDev = 'useDeferredValue'; updateHookTypesDev(); return updateDeferredValue(value, config); }, useTransition: function useTransition(config) { currentHookNameInDev = 'useTransition'; updateHookTypesDev(); return updateTransition(config); } };
                    HooksDispatcherOnRerenderInDEV = { readContext: function readContext(context, observedBits) { return _readContext(context, observedBits); }, useCallback: function useCallback(callback, deps) { currentHookNameInDev = 'useCallback'; updateHookTypesDev(); return updateCallback(callback, deps); }, useContext: function useContext(context, observedBits) { currentHookNameInDev = 'useContext'; updateHookTypesDev(); return _readContext(context, observedBits); }, useEffect: function useEffect(create, deps) { currentHookNameInDev = 'useEffect'; updateHookTypesDev(); return updateEffect(create, deps); }, useImperativeHandle: function useImperativeHandle(ref, create, deps) { currentHookNameInDev = 'useImperativeHandle'; updateHookTypesDev(); return updateImperativeHandle(ref, create, deps); }, useLayoutEffect: function useLayoutEffect(create, deps) { currentHookNameInDev = 'useLayoutEffect'; updateHookTypesDev(); return updateLayoutEffect(create, deps); }, useMemo: function useMemo(create, deps) { currentHookNameInDev = 'useMemo'; updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV; try {
                            return updateMemo(create, deps);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useReducer: function useReducer(reducer, initialArg, init) { currentHookNameInDev = 'useReducer'; updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV; try {
                            return rerenderReducer(reducer, initialArg, init);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useRef: function useRef(initialValue) { currentHookNameInDev = 'useRef'; updateHookTypesDev(); return updateRef(); }, useState: function useState(initialState) { currentHookNameInDev = 'useState'; updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV; try {
                            return rerenderState(initialState);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useDebugValue: function useDebugValue(value, formatterFn) { currentHookNameInDev = 'useDebugValue'; updateHookTypesDev(); return updateDebugValue(); }, useResponder: function useResponder(responder, props) { currentHookNameInDev = 'useResponder'; updateHookTypesDev(); return createDeprecatedResponderListener(responder, props); }, useDeferredValue: function useDeferredValue(value, config) { currentHookNameInDev = 'useDeferredValue'; updateHookTypesDev(); return rerenderDeferredValue(value, config); }, useTransition: function useTransition(config) { currentHookNameInDev = 'useTransition'; updateHookTypesDev(); return rerenderTransition(config); } };
                    InvalidNestedHooksDispatcherOnMountInDEV = { readContext: function readContext(context, observedBits) { warnInvalidContextAccess(); return _readContext(context, observedBits); }, useCallback: function useCallback(callback, deps) { currentHookNameInDev = 'useCallback'; warnInvalidHookAccess(); mountHookTypesDev(); return mountCallback(callback, deps); }, useContext: function useContext(context, observedBits) { currentHookNameInDev = 'useContext'; warnInvalidHookAccess(); mountHookTypesDev(); return _readContext(context, observedBits); }, useEffect: function useEffect(create, deps) { currentHookNameInDev = 'useEffect'; warnInvalidHookAccess(); mountHookTypesDev(); return mountEffect(create, deps); }, useImperativeHandle: function useImperativeHandle(ref, create, deps) { currentHookNameInDev = 'useImperativeHandle'; warnInvalidHookAccess(); mountHookTypesDev(); return mountImperativeHandle(ref, create, deps); }, useLayoutEffect: function useLayoutEffect(create, deps) { currentHookNameInDev = 'useLayoutEffect'; warnInvalidHookAccess(); mountHookTypesDev(); return mountLayoutEffect(create, deps); }, useMemo: function useMemo(create, deps) { currentHookNameInDev = 'useMemo'; warnInvalidHookAccess(); mountHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV; try {
                            return mountMemo(create, deps);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useReducer: function useReducer(reducer, initialArg, init) { currentHookNameInDev = 'useReducer'; warnInvalidHookAccess(); mountHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV; try {
                            return mountReducer(reducer, initialArg, init);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useRef: function useRef(initialValue) { currentHookNameInDev = 'useRef'; warnInvalidHookAccess(); mountHookTypesDev(); return mountRef(initialValue); }, useState: function useState(initialState) { currentHookNameInDev = 'useState'; warnInvalidHookAccess(); mountHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV; try {
                            return mountState(initialState);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useDebugValue: function useDebugValue(value, formatterFn) { currentHookNameInDev = 'useDebugValue'; warnInvalidHookAccess(); mountHookTypesDev(); return mountDebugValue(); }, useResponder: function useResponder(responder, props) { currentHookNameInDev = 'useResponder'; warnInvalidHookAccess(); mountHookTypesDev(); return createDeprecatedResponderListener(responder, props); }, useDeferredValue: function useDeferredValue(value, config) { currentHookNameInDev = 'useDeferredValue'; warnInvalidHookAccess(); mountHookTypesDev(); return mountDeferredValue(value, config); }, useTransition: function useTransition(config) { currentHookNameInDev = 'useTransition'; warnInvalidHookAccess(); mountHookTypesDev(); return mountTransition(config); } };
                    InvalidNestedHooksDispatcherOnUpdateInDEV = { readContext: function readContext(context, observedBits) { warnInvalidContextAccess(); return _readContext(context, observedBits); }, useCallback: function useCallback(callback, deps) { currentHookNameInDev = 'useCallback'; warnInvalidHookAccess(); updateHookTypesDev(); return updateCallback(callback, deps); }, useContext: function useContext(context, observedBits) { currentHookNameInDev = 'useContext'; warnInvalidHookAccess(); updateHookTypesDev(); return _readContext(context, observedBits); }, useEffect: function useEffect(create, deps) { currentHookNameInDev = 'useEffect'; warnInvalidHookAccess(); updateHookTypesDev(); return updateEffect(create, deps); }, useImperativeHandle: function useImperativeHandle(ref, create, deps) { currentHookNameInDev = 'useImperativeHandle'; warnInvalidHookAccess(); updateHookTypesDev(); return updateImperativeHandle(ref, create, deps); }, useLayoutEffect: function useLayoutEffect(create, deps) { currentHookNameInDev = 'useLayoutEffect'; warnInvalidHookAccess(); updateHookTypesDev(); return updateLayoutEffect(create, deps); }, useMemo: function useMemo(create, deps) { currentHookNameInDev = 'useMemo'; warnInvalidHookAccess(); updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV; try {
                            return updateMemo(create, deps);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useReducer: function useReducer(reducer, initialArg, init) { currentHookNameInDev = 'useReducer'; warnInvalidHookAccess(); updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV; try {
                            return updateReducer(reducer, initialArg, init);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useRef: function useRef(initialValue) { currentHookNameInDev = 'useRef'; warnInvalidHookAccess(); updateHookTypesDev(); return updateRef(); }, useState: function useState(initialState) { currentHookNameInDev = 'useState'; warnInvalidHookAccess(); updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV; try {
                            return updateState(initialState);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useDebugValue: function useDebugValue(value, formatterFn) { currentHookNameInDev = 'useDebugValue'; warnInvalidHookAccess(); updateHookTypesDev(); return updateDebugValue(); }, useResponder: function useResponder(responder, props) { currentHookNameInDev = 'useResponder'; warnInvalidHookAccess(); updateHookTypesDev(); return createDeprecatedResponderListener(responder, props); }, useDeferredValue: function useDeferredValue(value, config) { currentHookNameInDev = 'useDeferredValue'; warnInvalidHookAccess(); updateHookTypesDev(); return updateDeferredValue(value, config); }, useTransition: function useTransition(config) { currentHookNameInDev = 'useTransition'; warnInvalidHookAccess(); updateHookTypesDev(); return updateTransition(config); } };
                    InvalidNestedHooksDispatcherOnRerenderInDEV = { readContext: function readContext(context, observedBits) { warnInvalidContextAccess(); return _readContext(context, observedBits); }, useCallback: function useCallback(callback, deps) { currentHookNameInDev = 'useCallback'; warnInvalidHookAccess(); updateHookTypesDev(); return updateCallback(callback, deps); }, useContext: function useContext(context, observedBits) { currentHookNameInDev = 'useContext'; warnInvalidHookAccess(); updateHookTypesDev(); return _readContext(context, observedBits); }, useEffect: function useEffect(create, deps) { currentHookNameInDev = 'useEffect'; warnInvalidHookAccess(); updateHookTypesDev(); return updateEffect(create, deps); }, useImperativeHandle: function useImperativeHandle(ref, create, deps) { currentHookNameInDev = 'useImperativeHandle'; warnInvalidHookAccess(); updateHookTypesDev(); return updateImperativeHandle(ref, create, deps); }, useLayoutEffect: function useLayoutEffect(create, deps) { currentHookNameInDev = 'useLayoutEffect'; warnInvalidHookAccess(); updateHookTypesDev(); return updateLayoutEffect(create, deps); }, useMemo: function useMemo(create, deps) { currentHookNameInDev = 'useMemo'; warnInvalidHookAccess(); updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV; try {
                            return updateMemo(create, deps);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useReducer: function useReducer(reducer, initialArg, init) { currentHookNameInDev = 'useReducer'; warnInvalidHookAccess(); updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV; try {
                            return rerenderReducer(reducer, initialArg, init);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useRef: function useRef(initialValue) { currentHookNameInDev = 'useRef'; warnInvalidHookAccess(); updateHookTypesDev(); return updateRef(); }, useState: function useState(initialState) { currentHookNameInDev = 'useState'; warnInvalidHookAccess(); updateHookTypesDev(); var prevDispatcher = ReactCurrentDispatcher.current; ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV; try {
                            return rerenderState(initialState);
                        }
                        finally {
                            ReactCurrentDispatcher.current = prevDispatcher;
                        } }, useDebugValue: function useDebugValue(value, formatterFn) { currentHookNameInDev = 'useDebugValue'; warnInvalidHookAccess(); updateHookTypesDev(); return updateDebugValue(); }, useResponder: function useResponder(responder, props) { currentHookNameInDev = 'useResponder'; warnInvalidHookAccess(); updateHookTypesDev(); return createDeprecatedResponderListener(responder, props); }, useDeferredValue: function useDeferredValue(value, config) { currentHookNameInDev = 'useDeferredValue'; warnInvalidHookAccess(); updateHookTypesDev(); return rerenderDeferredValue(value, config); }, useTransition: function useTransition(config) { currentHookNameInDev = 'useTransition'; warnInvalidHookAccess(); updateHookTypesDev(); return rerenderTransition(config); } };
                }
                var now$1 = Scheduler.unstable_now;
                var commitTime = 0;
                var profilerStartTime = -1;
                function getCommitTime() { return commitTime; }
                function recordCommitTime() { commitTime = now$1(); }
                function startProfilerTimer(fiber) { profilerStartTime = now$1(); if (fiber.actualStartTime < 0) {
                    fiber.actualStartTime = now$1();
                } }
                function stopProfilerTimerIfRunning(fiber) { profilerStartTime = -1; }
                function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) { if (profilerStartTime >= 0) {
                    var elapsedTime = now$1() - profilerStartTime;
                    fiber.actualDuration += elapsedTime;
                    if (overrideBaseTime) {
                        fiber.selfBaseDuration = elapsedTime;
                    }
                    profilerStartTime = -1;
                } }
                var hydrationParentFiber = null;
                var nextHydratableInstance = null;
                var isHydrating = false;
                function enterHydrationState(fiber) { var parentInstance = fiber.stateNode.containerInfo; nextHydratableInstance = getFirstHydratableChild(parentInstance); hydrationParentFiber = fiber; isHydrating = true; return true; }
                function deleteHydratableInstance(returnFiber, instance) {
                    {
                        switch (returnFiber.tag) {
                            case HostRoot:
                                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                                break;
                            case HostComponent:
                                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                                break;
                        }
                    }
                    var childToDelete = createFiberFromHostInstanceForDeletion();
                    childToDelete.stateNode = instance;
                    childToDelete.return = returnFiber;
                    childToDelete.effectTag = Deletion;
                    if (returnFiber.lastEffect !== null) {
                        returnFiber.lastEffect.nextEffect = childToDelete;
                        returnFiber.lastEffect = childToDelete;
                    }
                    else {
                        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                    }
                }
                function insertNonHydratedInstance(returnFiber, fiber) { fiber.effectTag = fiber.effectTag & ~Hydrating | Placement; {
                    switch (returnFiber.tag) {
                        case HostRoot: {
                            var parentContainer = returnFiber.stateNode.containerInfo;
                            switch (fiber.tag) {
                                case HostComponent:
                                    var type = fiber.type;
                                    var props = fiber.pendingProps;
                                    didNotFindHydratableContainerInstance(parentContainer, type);
                                    break;
                                case HostText:
                                    var text = fiber.pendingProps;
                                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                                    break;
                            }
                            break;
                        }
                        case HostComponent: {
                            var parentType = returnFiber.type;
                            var parentProps = returnFiber.memoizedProps;
                            var parentInstance = returnFiber.stateNode;
                            switch (fiber.tag) {
                                case HostComponent:
                                    var _type = fiber.type;
                                    var _props = fiber.pendingProps;
                                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                                    break;
                                case HostText:
                                    var _text = fiber.pendingProps;
                                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                                    break;
                                case SuspenseComponent:
                                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                                    break;
                            }
                            break;
                        }
                        default: return;
                    }
                } }
                function tryHydrate(fiber, nextInstance) { switch (fiber.tag) {
                    case HostComponent: {
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        var instance = canHydrateInstance(nextInstance, type);
                        if (instance !== null) {
                            fiber.stateNode = instance;
                            return true;
                        }
                        return false;
                    }
                    case HostText: {
                        var text = fiber.pendingProps;
                        var textInstance = canHydrateTextInstance(nextInstance, text);
                        if (textInstance !== null) {
                            fiber.stateNode = textInstance;
                            return true;
                        }
                        return false;
                    }
                    case SuspenseComponent: {
                        return false;
                    }
                    default: return false;
                } }
                function tryToClaimNextHydratableInstance(fiber) {
                    if (!isHydrating) {
                        return;
                    }
                    var nextInstance = nextHydratableInstance;
                    if (!nextInstance) {
                        insertNonHydratedInstance(hydrationParentFiber, fiber);
                        isHydrating = false;
                        hydrationParentFiber = fiber;
                        return;
                    }
                    var firstAttemptedInstance = nextInstance;
                    if (!tryHydrate(fiber, nextInstance)) {
                        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
                        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                            insertNonHydratedInstance(hydrationParentFiber, fiber);
                            isHydrating = false;
                            hydrationParentFiber = fiber;
                            return;
                        }
                        deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
                    }
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = getFirstHydratableChild(nextInstance);
                }
                function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
                    var instance = fiber.stateNode;
                    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
                    fiber.updateQueue = updatePayload;
                    if (updatePayload !== null) {
                        return true;
                    }
                    return false;
                }
                function prepareToHydrateHostTextInstance(fiber) {
                    var textInstance = fiber.stateNode;
                    var textContent = fiber.memoizedProps;
                    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
                    {
                        if (shouldUpdate) {
                            var returnFiber = hydrationParentFiber;
                            if (returnFiber !== null) {
                                switch (returnFiber.tag) {
                                    case HostRoot: {
                                        var parentContainer = returnFiber.stateNode.containerInfo;
                                        didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                                        break;
                                    }
                                    case HostComponent: {
                                        var parentType = returnFiber.type;
                                        var parentProps = returnFiber.memoizedProps;
                                        var parentInstance = returnFiber.stateNode;
                                        didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    return shouldUpdate;
                }
                function skipPastDehydratedSuspenseInstance(fiber) { var suspenseState = fiber.memoizedState; var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null; if (!suspenseInstance) {
                    {
                        throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
                    }
                } return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance); }
                function popToNextHostParent(fiber) { var parent = fiber.return; while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
                    parent = parent.return;
                } hydrationParentFiber = parent; }
                function popHydrationState(fiber) {
                    if (fiber !== hydrationParentFiber) {
                        return false;
                    }
                    if (!isHydrating) {
                        popToNextHostParent(fiber);
                        isHydrating = true;
                        return false;
                    }
                    var type = fiber.type;
                    if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
                        var nextInstance = nextHydratableInstance;
                        while (nextInstance) {
                            deleteHydratableInstance(fiber, nextInstance);
                            nextInstance = getNextHydratableSibling(nextInstance);
                        }
                    }
                    popToNextHostParent(fiber);
                    if (fiber.tag === SuspenseComponent) {
                        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
                    }
                    else {
                        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
                    }
                    return true;
                }
                function resetHydrationState() { hydrationParentFiber = null; nextHydratableInstance = null; isHydrating = false; }
                var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
                var didReceiveUpdate = false;
                var didWarnAboutBadClass;
                var didWarnAboutModulePatternComponent;
                var didWarnAboutContextTypeOnFunctionComponent;
                var didWarnAboutGetDerivedStateOnFunctionComponent;
                var didWarnAboutFunctionRefs;
                var didWarnAboutReassigningProps;
                var didWarnAboutMaxDuration;
                var didWarnAboutRevealOrder;
                var didWarnAboutTailOptions;
                {
                    didWarnAboutBadClass = {};
                    didWarnAboutModulePatternComponent = {};
                    didWarnAboutContextTypeOnFunctionComponent = {};
                    didWarnAboutGetDerivedStateOnFunctionComponent = {};
                    didWarnAboutFunctionRefs = {};
                    didWarnAboutReassigningProps = false;
                    didWarnAboutMaxDuration = false;
                    didWarnAboutRevealOrder = {};
                    didWarnAboutTailOptions = {};
                }
                function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
                    if (current === null) {
                        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
                    }
                    else {
                        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
                    }
                }
                function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
                    workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime);
                    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
                }
                function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
                    {
                        if (workInProgress.type !== workInProgress.elementType) {
                            var innerPropTypes = Component.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
                            }
                        }
                    }
                    var render = Component.render;
                    var ref = workInProgress.ref;
                    var nextChildren;
                    prepareToReadContext(workInProgress, renderExpirationTime);
                    {
                        ReactCurrentOwner$1.current = workInProgress;
                        setCurrentPhase('render');
                        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
                        if (workInProgress.mode & StrictMode) {
                            if (workInProgress.memoizedState !== null) {
                                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
                            }
                        }
                        setCurrentPhase(null);
                    }
                    if (current !== null && !didReceiveUpdate) {
                        bailoutHooks(current, workInProgress, renderExpirationTime);
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                    }
                    workInProgress.effectTag |= PerformedWork;
                    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
                    return workInProgress.child;
                }
                function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
                    if (current === null) {
                        var type = Component.type;
                        if (isSimpleFunctionComponent(type) && Component.compare === null &&
                            Component.defaultProps === undefined) {
                            var resolvedType = type;
                            {
                                resolvedType = resolveFunctionForHotReloading(type);
                            }
                            workInProgress.tag = SimpleMemoComponent;
                            workInProgress.type = resolvedType;
                            {
                                validateFunctionComponentInDev(workInProgress, type);
                            }
                            return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
                        }
                        {
                            var innerPropTypes = type.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type), getCurrentFiberStackInDev);
                            }
                        }
                        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
                        child.ref = workInProgress.ref;
                        child.return = workInProgress;
                        workInProgress.child = child;
                        return child;
                    }
                    {
                        var _type = Component.type;
                        var _innerPropTypes = _type.propTypes;
                        if (_innerPropTypes) {
                            checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type), getCurrentFiberStackInDev);
                        }
                    }
                    var currentChild = current.child;
                    if (updateExpirationTime < renderExpirationTime) {
                        var prevProps = currentChild.memoizedProps;
                        var compare = Component.compare;
                        compare = compare !== null ? compare : shallowEqual;
                        if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
                            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                        }
                    }
                    workInProgress.effectTag |= PerformedWork;
                    var newChild = createWorkInProgress(currentChild, nextProps);
                    newChild.ref = workInProgress.ref;
                    newChild.return = workInProgress;
                    workInProgress.child = newChild;
                    return newChild;
                }
                function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
                    {
                        if (workInProgress.type !== workInProgress.elementType) {
                            var outerMemoType = workInProgress.elementType;
                            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                                outerMemoType = refineResolvedLazyComponent(outerMemoType);
                            }
                            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                            if (outerPropTypes) {
                                checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
                            }
                        }
                    }
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref &&
                            workInProgress.type === current.type) {
                            didReceiveUpdate = false;
                            if (updateExpirationTime < renderExpirationTime) {
                                workInProgress.expirationTime = current.expirationTime;
                                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                            }
                        }
                    }
                    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
                }
                function updateFragment(current, workInProgress, renderExpirationTime) { var nextChildren = workInProgress.pendingProps; reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime); return workInProgress.child; }
                function updateMode(current, workInProgress, renderExpirationTime) { var nextChildren = workInProgress.pendingProps.children; reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime); return workInProgress.child; }
                function updateProfiler(current, workInProgress, renderExpirationTime) { {
                    workInProgress.effectTag |= Update;
                } var nextProps = workInProgress.pendingProps; var nextChildren = nextProps.children; reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime); return workInProgress.child; }
                function markRef(current, workInProgress) {
                    var ref = workInProgress.ref;
                    if (current === null && ref !== null || current !== null && current.ref !== ref) {
                        workInProgress.effectTag |= Ref;
                    }
                }
                function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
                    {
                        if (workInProgress.type !== workInProgress.elementType) {
                            var innerPropTypes = Component.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
                            }
                        }
                    }
                    var context;
                    {
                        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
                        context = getMaskedContext(workInProgress, unmaskedContext);
                    }
                    var nextChildren;
                    prepareToReadContext(workInProgress, renderExpirationTime);
                    {
                        ReactCurrentOwner$1.current = workInProgress;
                        setCurrentPhase('render');
                        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
                        if (workInProgress.mode & StrictMode) {
                            if (workInProgress.memoizedState !== null) {
                                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
                            }
                        }
                        setCurrentPhase(null);
                    }
                    if (current !== null && !didReceiveUpdate) {
                        bailoutHooks(current, workInProgress, renderExpirationTime);
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                    }
                    workInProgress.effectTag |= PerformedWork;
                    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
                    return workInProgress.child;
                }
                function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
                    {
                        if (workInProgress.type !== workInProgress.elementType) {
                            var innerPropTypes = Component.propTypes;
                            if (innerPropTypes) {
                                checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
                            }
                        }
                    }
                    var hasContext;
                    if (isContextProvider(Component)) {
                        hasContext = true;
                        pushContextProvider(workInProgress);
                    }
                    else {
                        hasContext = false;
                    }
                    prepareToReadContext(workInProgress, renderExpirationTime);
                    var instance = workInProgress.stateNode;
                    var shouldUpdate;
                    if (instance === null) {
                        if (current !== null) {
                            current.alternate = null;
                            workInProgress.alternate = null;
                            workInProgress.effectTag |= Placement;
                        }
                        constructClassInstance(workInProgress, Component, nextProps);
                        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
                        shouldUpdate = true;
                    }
                    else if (current === null) {
                        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
                    }
                    else {
                        shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
                    }
                    var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
                    {
                        var inst = workInProgress.stateNode;
                        if (inst.props !== nextProps) {
                            if (!didWarnAboutReassigningProps) {
                                error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
                            }
                            didWarnAboutReassigningProps = true;
                        }
                    }
                    return nextUnitOfWork;
                }
                function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
                    markRef(current, workInProgress);
                    var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;
                    if (!shouldUpdate && !didCaptureError) {
                        if (hasContext) {
                            invalidateContextProvider(workInProgress, Component, false);
                        }
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                    }
                    var instance = workInProgress.stateNode;
                    ReactCurrentOwner$1.current = workInProgress;
                    var nextChildren;
                    if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
                        nextChildren = null;
                        {
                            stopProfilerTimerIfRunning();
                        }
                    }
                    else {
                        {
                            setCurrentPhase('render');
                            nextChildren = instance.render();
                            if (workInProgress.mode & StrictMode) {
                                instance.render();
                            }
                            setCurrentPhase(null);
                        }
                    }
                    workInProgress.effectTag |= PerformedWork;
                    if (current !== null && didCaptureError) {
                        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
                    }
                    else {
                        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
                    }
                    workInProgress.memoizedState = instance.state;
                    if (hasContext) {
                        invalidateContextProvider(workInProgress, Component, true);
                    }
                    return workInProgress.child;
                }
                function pushHostRootContext(workInProgress) {
                    var root = workInProgress.stateNode;
                    if (root.pendingContext) {
                        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
                    }
                    else if (root.context) {
                        pushTopLevelContextObject(workInProgress, root.context, false);
                    }
                    pushHostContainer(workInProgress, root.containerInfo);
                }
                function updateHostRoot(current, workInProgress, renderExpirationTime) {
                    pushHostRootContext(workInProgress);
                    var updateQueue = workInProgress.updateQueue;
                    if (!(current !== null && updateQueue !== null)) {
                        {
                            throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    var nextProps = workInProgress.pendingProps;
                    var prevState = workInProgress.memoizedState;
                    var prevChildren = prevState !== null ? prevState.element : null;
                    cloneUpdateQueue(current, workInProgress);
                    processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
                    var nextState = workInProgress.memoizedState;
                    var nextChildren = nextState.element;
                    if (nextChildren === prevChildren) {
                        resetHydrationState();
                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                    }
                    var root = workInProgress.stateNode;
                    if (root.hydrate && enterHydrationState(workInProgress)) {
                        var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
                        workInProgress.child = child;
                        var node = child;
                        while (node) {
                            node.effectTag = node.effectTag & ~Placement | Hydrating;
                            node = node.sibling;
                        }
                    }
                    else {
                        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
                        resetHydrationState();
                    }
                    return workInProgress.child;
                }
                function updateHostComponent(current, workInProgress, renderExpirationTime) {
                    pushHostContext(workInProgress);
                    if (current === null) {
                        tryToClaimNextHydratableInstance(workInProgress);
                    }
                    var type = workInProgress.type;
                    var nextProps = workInProgress.pendingProps;
                    var prevProps = current !== null ? current.memoizedProps : null;
                    var nextChildren = nextProps.children;
                    var isDirectTextChild = shouldSetTextContent(type, nextProps);
                    if (isDirectTextChild) {
                        nextChildren = null;
                    }
                    else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
                        workInProgress.effectTag |= ContentReset;
                    }
                    markRef(current, workInProgress);
                    if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
                        {
                            markSpawnedWork(Never);
                        }
                        workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                        return null;
                    }
                    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
                    return workInProgress.child;
                }
                function updateHostText(current, workInProgress) {
                    if (current === null) {
                        tryToClaimNextHydratableInstance(workInProgress);
                    }
                    return null;
                }
                function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
                    if (_current !== null) {
                        _current.alternate = null;
                        workInProgress.alternate = null;
                        workInProgress.effectTag |= Placement;
                    }
                    var props = workInProgress.pendingProps;
                    cancelWorkTimer(workInProgress);
                    var Component = readLazyComponentType(elementType);
                    workInProgress.type = Component;
                    var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
                    startWorkTimer(workInProgress);
                    var resolvedProps = resolveDefaultProps(Component, props);
                    var child;
                    switch (resolvedTag) {
                        case FunctionComponent: {
                            {
                                validateFunctionComponentInDev(workInProgress, Component);
                                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                            }
                            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
                            return child;
                        }
                        case ClassComponent: {
                            {
                                workInProgress.type = Component = resolveClassForHotReloading(Component);
                            }
                            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
                            return child;
                        }
                        case ForwardRef: {
                            {
                                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                            }
                            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
                            return child;
                        }
                        case MemoComponent: {
                            {
                                if (workInProgress.type !== workInProgress.elementType) {
                                    var outerPropTypes = Component.propTypes;
                                    if (outerPropTypes) {
                                        checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component), getCurrentFiberStackInDev);
                                    }
                                }
                            }
                            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime);
                            return child;
                        }
                    }
                    var hint = '';
                    {
                        if (Component !== null && (typeof Component === 'undefined' ? 'undefined' : _typeof(Component)) === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
                            hint = ' Did you wrap a component in React.lazy() more than once?';
                        }
                    }
                    {
                        {
                            throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
                        }
                    }
                }
                function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
                    if (_current !== null) {
                        _current.alternate = null;
                        workInProgress.alternate = null;
                        workInProgress.effectTag |= Placement;
                    }
                    workInProgress.tag = ClassComponent;
                    var hasContext;
                    if (isContextProvider(Component)) {
                        hasContext = true;
                        pushContextProvider(workInProgress);
                    }
                    else {
                        hasContext = false;
                    }
                    prepareToReadContext(workInProgress, renderExpirationTime);
                    constructClassInstance(workInProgress, Component, nextProps);
                    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
                    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
                }
                function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
                    if (_current !== null) {
                        _current.alternate = null;
                        workInProgress.alternate = null;
                        workInProgress.effectTag |= Placement;
                    }
                    var props = workInProgress.pendingProps;
                    var context;
                    {
                        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
                        context = getMaskedContext(workInProgress, unmaskedContext);
                    }
                    prepareToReadContext(workInProgress, renderExpirationTime);
                    var value;
                    {
                        if (Component.prototype && typeof Component.prototype.render === 'function') {
                            var componentName = getComponentName(Component) || 'Unknown';
                            if (!didWarnAboutBadClass[componentName]) {
                                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
                                didWarnAboutBadClass[componentName] = true;
                            }
                        }
                        if (workInProgress.mode & StrictMode) {
                            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
                        }
                        ReactCurrentOwner$1.current = workInProgress;
                        value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
                    }
                    workInProgress.effectTag |= PerformedWork;
                    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
                        {
                            var _componentName = getComponentName(Component) || 'Unknown';
                            if (!didWarnAboutModulePatternComponent[_componentName]) {
                                error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
                                didWarnAboutModulePatternComponent[_componentName] = true;
                            }
                        }
                        workInProgress.tag = ClassComponent;
                        workInProgress.memoizedState = null;
                        workInProgress.updateQueue = null;
                        var hasContext = false;
                        if (isContextProvider(Component)) {
                            hasContext = true;
                            pushContextProvider(workInProgress);
                        }
                        else {
                            hasContext = false;
                        }
                        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
                        initializeUpdateQueue(workInProgress);
                        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
                        if (typeof getDerivedStateFromProps === 'function') {
                            applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
                        }
                        adoptClassInstance(workInProgress, value);
                        mountClassInstance(workInProgress, Component, props, renderExpirationTime);
                        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
                    }
                    else {
                        workInProgress.tag = FunctionComponent;
                        {
                            if (workInProgress.mode & StrictMode) {
                                if (workInProgress.memoizedState !== null) {
                                    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
                                }
                            }
                        }
                        reconcileChildren(null, workInProgress, value, renderExpirationTime);
                        {
                            validateFunctionComponentInDev(workInProgress, Component);
                        }
                        return workInProgress.child;
                    }
                }
                function validateFunctionComponentInDev(workInProgress, Component) { {
                    if (Component) {
                        if (Component.childContextTypes) {
                            error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
                        }
                    }
                    if (workInProgress.ref !== null) {
                        var info = '';
                        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                        if (ownerName) {
                            info += '\n\nCheck the render method of `' + ownerName + '`.';
                        }
                        var warningKey = ownerName || workInProgress._debugID || '';
                        var debugSource = workInProgress._debugSource;
                        if (debugSource) {
                            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
                        }
                        if (!didWarnAboutFunctionRefs[warningKey]) {
                            didWarnAboutFunctionRefs[warningKey] = true;
                            error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
                        }
                    }
                    if (typeof Component.getDerivedStateFromProps === 'function') {
                        var _componentName2 = getComponentName(Component) || 'Unknown';
                        if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                            error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);
                            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
                        }
                    }
                    if (_typeof(Component.contextType) === 'object' && Component.contextType !== null) {
                        var _componentName3 = getComponentName(Component) || 'Unknown';
                        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                            error('%s: Function components do not support contextType.', _componentName3);
                            didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
                        }
                    }
                } }
                var SUSPENDED_MARKER = { dehydrated: null, retryTime: NoWork };
                function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
                    return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
                }
                function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
                    var mode = workInProgress.mode;
                    var nextProps = workInProgress.pendingProps;
                    {
                        if (shouldSuspend(workInProgress)) {
                            workInProgress.effectTag |= DidCapture;
                        }
                    }
                    var suspenseContext = suspenseStackCursor.current;
                    var nextDidTimeout = false;
                    var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;
                    if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
                        nextDidTimeout = true;
                        workInProgress.effectTag &= ~DidCapture;
                    }
                    else {
                        if (current === null || current.memoizedState !== null) {
                            if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
                                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                            }
                        }
                    }
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext);
                    {
                        if ('maxDuration' in nextProps) {
                            if (!didWarnAboutMaxDuration) {
                                didWarnAboutMaxDuration = true;
                                error('maxDuration has been removed from React. ' + 'Remove the maxDuration prop.');
                            }
                        }
                    }
                    if (current === null) {
                        if (nextProps.fallback !== undefined) {
                            tryToClaimNextHydratableInstance(workInProgress);
                        }
                        if (nextDidTimeout) {
                            var nextFallbackChildren = nextProps.fallback;
                            var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
                            primaryChildFragment.return = workInProgress;
                            if ((workInProgress.mode & BlockingMode) === NoMode) {
                                var progressedState = workInProgress.memoizedState;
                                var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
                                primaryChildFragment.child = progressedPrimaryChild;
                                var progressedChild = progressedPrimaryChild;
                                while (progressedChild !== null) {
                                    progressedChild.return = primaryChildFragment;
                                    progressedChild = progressedChild.sibling;
                                }
                            }
                            var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
                            fallbackChildFragment.return = workInProgress;
                            primaryChildFragment.sibling = fallbackChildFragment;
                            workInProgress.memoizedState = SUSPENDED_MARKER;
                            workInProgress.child = primaryChildFragment;
                            return fallbackChildFragment;
                        }
                        else {
                            var nextPrimaryChildren = nextProps.children;
                            workInProgress.memoizedState = null;
                            return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
                        }
                    }
                    else {
                        var prevState = current.memoizedState;
                        if (prevState !== null) {
                            var currentPrimaryChildFragment = current.child;
                            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                            if (nextDidTimeout) {
                                var _nextFallbackChildren2 = nextProps.fallback;
                                var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
                                _primaryChildFragment2.return = workInProgress;
                                if ((workInProgress.mode & BlockingMode) === NoMode) {
                                    var _progressedState = workInProgress.memoizedState;
                                    var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
                                    if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                                        _primaryChildFragment2.child = _progressedPrimaryChild;
                                        var _progressedChild2 = _progressedPrimaryChild;
                                        while (_progressedChild2 !== null) {
                                            _progressedChild2.return = _primaryChildFragment2;
                                            _progressedChild2 = _progressedChild2.sibling;
                                        }
                                    }
                                }
                                if (workInProgress.mode & ProfileMode) {
                                    var _treeBaseDuration = 0;
                                    var _hiddenChild = _primaryChildFragment2.child;
                                    while (_hiddenChild !== null) {
                                        _treeBaseDuration += _hiddenChild.treeBaseDuration;
                                        _hiddenChild = _hiddenChild.sibling;
                                    }
                                    _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                                }
                                var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
                                _fallbackChildFragment2.return = workInProgress;
                                _primaryChildFragment2.sibling = _fallbackChildFragment2;
                                _primaryChildFragment2.childExpirationTime = NoWork;
                                workInProgress.memoizedState = SUSPENDED_MARKER;
                                workInProgress.child = _primaryChildFragment2;
                                return _fallbackChildFragment2;
                            }
                            else {
                                var _nextPrimaryChildren = nextProps.children;
                                var currentPrimaryChild = currentPrimaryChildFragment.child;
                                var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);
                                workInProgress.memoizedState = null;
                                return workInProgress.child = primaryChild;
                            }
                        }
                        else {
                            var _currentPrimaryChild = current.child;
                            if (nextDidTimeout) {
                                var _nextFallbackChildren3 = nextProps.fallback;
                                var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
                                _primaryChildFragment3.return = workInProgress;
                                _primaryChildFragment3.child = _currentPrimaryChild;
                                if (_currentPrimaryChild !== null) {
                                    _currentPrimaryChild.return = _primaryChildFragment3;
                                }
                                if ((workInProgress.mode & BlockingMode) === NoMode) {
                                    var _progressedState2 = workInProgress.memoizedState;
                                    var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
                                    _primaryChildFragment3.child = _progressedPrimaryChild2;
                                    var _progressedChild3 = _progressedPrimaryChild2;
                                    while (_progressedChild3 !== null) {
                                        _progressedChild3.return = _primaryChildFragment3;
                                        _progressedChild3 = _progressedChild3.sibling;
                                    }
                                }
                                if (workInProgress.mode & ProfileMode) {
                                    var _treeBaseDuration2 = 0;
                                    var _hiddenChild2 = _primaryChildFragment3.child;
                                    while (_hiddenChild2 !== null) {
                                        _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                                        _hiddenChild2 = _hiddenChild2.sibling;
                                    }
                                    _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                                }
                                var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);
                                _fallbackChildFragment3.return = workInProgress;
                                _primaryChildFragment3.sibling = _fallbackChildFragment3;
                                _fallbackChildFragment3.effectTag |= Placement;
                                _primaryChildFragment3.childExpirationTime = NoWork;
                                workInProgress.memoizedState = SUSPENDED_MARKER;
                                workInProgress.child = _primaryChildFragment3;
                                return _fallbackChildFragment3;
                            }
                            else {
                                workInProgress.memoizedState = null;
                                var _nextPrimaryChildren2 = nextProps.children;
                                return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
                            }
                        }
                    }
                }
                function scheduleWorkOnFiber(fiber, renderExpirationTime) { if (fiber.expirationTime < renderExpirationTime) {
                    fiber.expirationTime = renderExpirationTime;
                } var alternate = fiber.alternate; if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                    alternate.expirationTime = renderExpirationTime;
                } scheduleWorkOnParentPath(fiber.return, renderExpirationTime); }
                function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
                    var node = firstChild;
                    while (node !== null) {
                        if (node.tag === SuspenseComponent) {
                            var state = node.memoizedState;
                            if (state !== null) {
                                scheduleWorkOnFiber(node, renderExpirationTime);
                            }
                        }
                        else if (node.tag === SuspenseListComponent) {
                            scheduleWorkOnFiber(node, renderExpirationTime);
                        }
                        else if (node.child !== null) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                        if (node === workInProgress) {
                            return;
                        }
                        while (node.sibling === null) {
                            if (node.return === null || node.return === workInProgress) {
                                return;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                    }
                }
                function findLastContentRow(firstChild) {
                    var row = firstChild;
                    var lastContentRow = null;
                    while (row !== null) {
                        var currentRow = row.alternate;
                        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                            lastContentRow = row;
                        }
                        row = row.sibling;
                    }
                    return lastContentRow;
                }
                function validateRevealOrder(revealOrder) { {
                    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
                        didWarnAboutRevealOrder[revealOrder] = true;
                        if (typeof revealOrder === 'string') {
                            switch (revealOrder.toLowerCase()) {
                                case 'together':
                                case 'forwards':
                                case 'backwards': {
                                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                                    break;
                                }
                                case 'forward':
                                case 'backward': {
                                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                                    break;
                                }
                                default:
                                    error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                                    break;
                            }
                        }
                        else {
                            error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                        }
                    }
                } }
                function validateTailOptions(tailMode, revealOrder) { {
                    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
                        if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                            didWarnAboutTailOptions[tailMode] = true;
                            error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
                        }
                        else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                            didWarnAboutTailOptions[tailMode] = true;
                            error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
                        }
                    }
                } }
                function validateSuspenseListNestedChild(childSlot, index) { {
                    var isArray = Array.isArray(childSlot);
                    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';
                    if (isArray || isIterable) {
                        var type = isArray ? 'array' : 'iterable';
                        error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
                        return false;
                    }
                } return true; }
                function validateSuspenseListChildren(children, revealOrder) { {
                    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
                        if (Array.isArray(children)) {
                            for (var i = 0; i < children.length; i++) {
                                if (!validateSuspenseListNestedChild(children[i], i)) {
                                    return;
                                }
                            }
                        }
                        else {
                            var iteratorFn = getIteratorFn(children);
                            if (typeof iteratorFn === 'function') {
                                var childrenIterator = iteratorFn.call(children);
                                if (childrenIterator) {
                                    var step = childrenIterator.next();
                                    var _i = 0;
                                    for (; !step.done; step = childrenIterator.next()) {
                                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                                            return;
                                        }
                                        _i++;
                                    }
                                }
                            }
                            else {
                                error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
                            }
                        }
                    }
                } }
                function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
                    var renderState = workInProgress.memoizedState;
                    if (renderState === null) {
                        workInProgress.memoizedState = { isBackwards: isBackwards, rendering: null, renderingStartTime: 0, last: lastContentRow, tail: tail, tailExpiration: 0, tailMode: tailMode, lastEffect: lastEffectBeforeRendering };
                    }
                    else {
                        renderState.isBackwards = isBackwards;
                        renderState.rendering = null;
                        renderState.renderingStartTime = 0;
                        renderState.last = lastContentRow;
                        renderState.tail = tail;
                        renderState.tailExpiration = 0;
                        renderState.tailMode = tailMode;
                        renderState.lastEffect = lastEffectBeforeRendering;
                    }
                }
                function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
                    var nextProps = workInProgress.pendingProps;
                    var revealOrder = nextProps.revealOrder;
                    var tailMode = nextProps.tail;
                    var newChildren = nextProps.children;
                    validateRevealOrder(revealOrder);
                    validateTailOptions(tailMode, revealOrder);
                    validateSuspenseListChildren(newChildren, revealOrder);
                    reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
                    var suspenseContext = suspenseStackCursor.current;
                    var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    if (shouldForceFallback) {
                        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                        workInProgress.effectTag |= DidCapture;
                    }
                    else {
                        var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;
                        if (didSuspendBefore) {
                            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
                        }
                        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    }
                    pushSuspenseContext(workInProgress, suspenseContext);
                    if ((workInProgress.mode & BlockingMode) === NoMode) {
                        workInProgress.memoizedState = null;
                    }
                    else {
                        switch (revealOrder) {
                            case 'forwards': {
                                var lastContentRow = findLastContentRow(workInProgress.child);
                                var tail;
                                if (lastContentRow === null) {
                                    tail = workInProgress.child;
                                    workInProgress.child = null;
                                }
                                else {
                                    tail = lastContentRow.sibling;
                                    lastContentRow.sibling = null;
                                }
                                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                                break;
                            }
                            case 'backwards': {
                                var _tail = null;
                                var row = workInProgress.child;
                                workInProgress.child = null;
                                while (row !== null) {
                                    var currentRow = row.alternate;
                                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                                        workInProgress.child = row;
                                        break;
                                    }
                                    var nextRow = row.sibling;
                                    row.sibling = _tail;
                                    _tail = row;
                                    row = nextRow;
                                }
                                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                                break;
                            }
                            case 'together': {
                                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                                break;
                            }
                            default: {
                                workInProgress.memoizedState = null;
                            }
                        }
                    }
                    return workInProgress.child;
                }
                function updatePortalComponent(current, workInProgress, renderExpirationTime) {
                    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                    var nextChildren = workInProgress.pendingProps;
                    if (current === null) {
                        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
                    }
                    else {
                        reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
                    }
                    return workInProgress.child;
                }
                function updateContextProvider(current, workInProgress, renderExpirationTime) {
                    var providerType = workInProgress.type;
                    var context = providerType._context;
                    var newProps = workInProgress.pendingProps;
                    var oldProps = workInProgress.memoizedProps;
                    var newValue = newProps.value;
                    {
                        var providerPropTypes = workInProgress.type.propTypes;
                        if (providerPropTypes) {
                            checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
                        }
                    }
                    pushProvider(workInProgress, newValue);
                    if (oldProps !== null) {
                        var oldValue = oldProps.value;
                        var changedBits = calculateChangedBits(context, newValue, oldValue);
                        if (changedBits === 0) {
                            if (oldProps.children === newProps.children && !hasContextChanged()) {
                                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                            }
                        }
                        else {
                            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
                        }
                    }
                    var newChildren = newProps.children;
                    reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
                    return workInProgress.child;
                }
                var hasWarnedAboutUsingContextAsConsumer = false;
                function updateContextConsumer(current, workInProgress, renderExpirationTime) {
                    var context = workInProgress.type;
                    {
                        if (context._context === undefined) {
                            if (context !== context.Consumer) {
                                if (!hasWarnedAboutUsingContextAsConsumer) {
                                    hasWarnedAboutUsingContextAsConsumer = true;
                                    error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                                }
                            }
                        }
                        else {
                            context = context._context;
                        }
                    }
                    var newProps = workInProgress.pendingProps;
                    var render = newProps.children;
                    {
                        if (typeof render !== 'function') {
                            error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
                        }
                    }
                    prepareToReadContext(workInProgress, renderExpirationTime);
                    var newValue = _readContext(context, newProps.unstable_observedBits);
                    var newChildren;
                    {
                        ReactCurrentOwner$1.current = workInProgress;
                        setCurrentPhase('render');
                        newChildren = render(newValue);
                        setCurrentPhase(null);
                    }
                    workInProgress.effectTag |= PerformedWork;
                    reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
                    return workInProgress.child;
                }
                function markWorkInProgressReceivedUpdate() { didReceiveUpdate = true; }
                function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
                    cancelWorkTimer(workInProgress);
                    if (current !== null) {
                        workInProgress.dependencies = current.dependencies;
                    }
                    {
                        stopProfilerTimerIfRunning();
                    }
                    var updateExpirationTime = workInProgress.expirationTime;
                    if (updateExpirationTime !== NoWork) {
                        markUnprocessedUpdateTime(updateExpirationTime);
                    }
                    var childExpirationTime = workInProgress.childExpirationTime;
                    if (childExpirationTime < renderExpirationTime) {
                        return null;
                    }
                    else {
                        cloneChildFibers(current, workInProgress);
                        return workInProgress.child;
                    }
                }
                function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
                    {
                        var returnFiber = oldWorkInProgress.return;
                        if (returnFiber === null) {
                            throw new Error('Cannot swap the root fiber.');
                        }
                        current.alternate = null;
                        oldWorkInProgress.alternate = null;
                        newWorkInProgress.index = oldWorkInProgress.index;
                        newWorkInProgress.sibling = oldWorkInProgress.sibling;
                        newWorkInProgress.return = oldWorkInProgress.return;
                        newWorkInProgress.ref = oldWorkInProgress.ref;
                        if (oldWorkInProgress === returnFiber.child) {
                            returnFiber.child = newWorkInProgress;
                        }
                        else {
                            var prevSibling = returnFiber.child;
                            if (prevSibling === null) {
                                throw new Error('Expected parent to have a child.');
                            }
                            while (prevSibling.sibling !== oldWorkInProgress) {
                                prevSibling = prevSibling.sibling;
                                if (prevSibling === null) {
                                    throw new Error('Expected to find the previous sibling.');
                                }
                            }
                            prevSibling.sibling = newWorkInProgress;
                        }
                        var last = returnFiber.lastEffect;
                        if (last !== null) {
                            last.nextEffect = current;
                            returnFiber.lastEffect = current;
                        }
                        else {
                            returnFiber.firstEffect = returnFiber.lastEffect = current;
                        }
                        current.nextEffect = null;
                        current.effectTag = Deletion;
                        newWorkInProgress.effectTag |= Placement;
                        return newWorkInProgress;
                    }
                }
                function beginWork(current, workInProgress, renderExpirationTime) {
                    var updateExpirationTime = workInProgress.expirationTime;
                    {
                        if (workInProgress._debugNeedsRemount && current !== null) {
                            return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
                        }
                    }
                    if (current !== null) {
                        var oldProps = current.memoizedProps;
                        var newProps = workInProgress.pendingProps;
                        if (oldProps !== newProps || hasContextChanged() ||
                            workInProgress.type !== current.type) {
                            didReceiveUpdate = true;
                        }
                        else if (updateExpirationTime < renderExpirationTime) {
                            didReceiveUpdate = false;
                            switch (workInProgress.tag) {
                                case HostRoot:
                                    pushHostRootContext(workInProgress);
                                    resetHydrationState();
                                    break;
                                case HostComponent:
                                    pushHostContext(workInProgress);
                                    if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
                                        {
                                            markSpawnedWork(Never);
                                        }
                                        workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                                        return null;
                                    }
                                    break;
                                case ClassComponent: {
                                    var Component = workInProgress.type;
                                    if (isContextProvider(Component)) {
                                        pushContextProvider(workInProgress);
                                    }
                                    break;
                                }
                                case HostPortal:
                                    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                                    break;
                                case ContextProvider: {
                                    var newValue = workInProgress.memoizedProps.value;
                                    pushProvider(workInProgress, newValue);
                                    break;
                                }
                                case Profiler:
                                    {
                                        var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;
                                        if (hasChildWork) {
                                            workInProgress.effectTag |= Update;
                                        }
                                    }
                                    break;
                                case SuspenseComponent: {
                                    var state = workInProgress.memoizedState;
                                    if (state !== null) {
                                        var primaryChildFragment = workInProgress.child;
                                        var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                                        if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                                            return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
                                        }
                                        else {
                                            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                                            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                                            if (child !== null) {
                                                return child.sibling;
                                            }
                                            else {
                                                return null;
                                            }
                                        }
                                    }
                                    else {
                                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                                    }
                                    break;
                                }
                                case SuspenseListComponent: {
                                    var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;
                                    var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;
                                    if (didSuspendBefore) {
                                        if (_hasChildWork) {
                                            return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
                                        }
                                        workInProgress.effectTag |= DidCapture;
                                    }
                                    var renderState = workInProgress.memoizedState;
                                    if (renderState !== null) {
                                        renderState.rendering = null;
                                        renderState.tail = null;
                                    }
                                    pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                                    if (_hasChildWork) {
                                        break;
                                    }
                                    else {
                                        return null;
                                    }
                                }
                            }
                            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
                        }
                        else {
                            didReceiveUpdate = false;
                        }
                    }
                    else {
                        didReceiveUpdate = false;
                    }
                    workInProgress.expirationTime = NoWork;
                    switch (workInProgress.tag) {
                        case IndeterminateComponent: {
                            return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
                        }
                        case LazyComponent: {
                            var elementType = workInProgress.elementType;
                            return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
                        }
                        case FunctionComponent: {
                            var _Component = workInProgress.type;
                            var unresolvedProps = workInProgress.pendingProps;
                            var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                            return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
                        }
                        case ClassComponent: {
                            var _Component2 = workInProgress.type;
                            var _unresolvedProps = workInProgress.pendingProps;
                            var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                            return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
                        }
                        case HostRoot: return updateHostRoot(current, workInProgress, renderExpirationTime);
                        case HostComponent: return updateHostComponent(current, workInProgress, renderExpirationTime);
                        case HostText: return updateHostText(current, workInProgress);
                        case SuspenseComponent: return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
                        case HostPortal: return updatePortalComponent(current, workInProgress, renderExpirationTime);
                        case ForwardRef: {
                            var type = workInProgress.type;
                            var _unresolvedProps2 = workInProgress.pendingProps;
                            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                            return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
                        }
                        case Fragment: return updateFragment(current, workInProgress, renderExpirationTime);
                        case Mode: return updateMode(current, workInProgress, renderExpirationTime);
                        case Profiler: return updateProfiler(current, workInProgress, renderExpirationTime);
                        case ContextProvider: return updateContextProvider(current, workInProgress, renderExpirationTime);
                        case ContextConsumer: return updateContextConsumer(current, workInProgress, renderExpirationTime);
                        case MemoComponent: {
                            var _type2 = workInProgress.type;
                            var _unresolvedProps3 = workInProgress.pendingProps;
                            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                            {
                                if (workInProgress.type !== workInProgress.elementType) {
                                    var outerPropTypes = _type2.propTypes;
                                    if (outerPropTypes) {
                                        checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2), getCurrentFiberStackInDev);
                                    }
                                }
                            }
                            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                            return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
                        }
                        case SimpleMemoComponent: {
                            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
                        }
                        case IncompleteClassComponent: {
                            var _Component3 = workInProgress.type;
                            var _unresolvedProps4 = workInProgress.pendingProps;
                            var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                            return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
                        }
                        case SuspenseListComponent: {
                            return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
                        }
                    }
                    {
                        {
                            throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                }
                function markUpdate(workInProgress) {
                    workInProgress.effectTag |= Update;
                }
                function markRef$1(workInProgress) { workInProgress.effectTag |= Ref; }
                var appendAllChildren;
                var updateHostContainer;
                var updateHostComponent$1;
                var updateHostText$1;
                {
                    appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
                        var node = workInProgress.child;
                        while (node !== null) {
                            if (node.tag === HostComponent || node.tag === HostText) {
                                appendInitialChild(parent, node.stateNode);
                            }
                            else if (node.tag === HostPortal)
                                ;
                            else if (node.child !== null) {
                                node.child.return = node;
                                node = node.child;
                                continue;
                            }
                            if (node === workInProgress) {
                                return;
                            }
                            while (node.sibling === null) {
                                if (node.return === null || node.return === workInProgress) {
                                    return;
                                }
                                node = node.return;
                            }
                            node.sibling.return = node.return;
                            node = node.sibling;
                        }
                    };
                    updateHostContainer = function updateHostContainer(workInProgress) {
                    };
                    updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {
                        var oldProps = current.memoizedProps;
                        if (oldProps === newProps) {
                            return;
                        }
                        var instance = workInProgress.stateNode;
                        var currentHostContext = getHostContext();
                        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                        workInProgress.updateQueue = updatePayload;
                        if (updatePayload) {
                            markUpdate(workInProgress);
                        }
                    };
                    updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
                        if (oldText !== newText) {
                            markUpdate(workInProgress);
                        }
                    };
                }
                function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
                    switch (renderState.tailMode) {
                        case 'hidden': {
                            var tailNode = renderState.tail;
                            var lastTailNode = null;
                            while (tailNode !== null) {
                                if (tailNode.alternate !== null) {
                                    lastTailNode = tailNode;
                                }
                                tailNode = tailNode.sibling;
                            }
                            if (lastTailNode === null) {
                                renderState.tail = null;
                            }
                            else {
                                lastTailNode.sibling = null;
                            }
                            break;
                        }
                        case 'collapsed': {
                            var _tailNode = renderState.tail;
                            var _lastTailNode = null;
                            while (_tailNode !== null) {
                                if (_tailNode.alternate !== null) {
                                    _lastTailNode = _tailNode;
                                }
                                _tailNode = _tailNode.sibling;
                            }
                            if (_lastTailNode === null) {
                                if (!hasRenderedATailFallback && renderState.tail !== null) {
                                    renderState.tail.sibling = null;
                                }
                                else {
                                    renderState.tail = null;
                                }
                            }
                            else {
                                _lastTailNode.sibling = null;
                            }
                            break;
                        }
                    }
                }
                function completeWork(current, workInProgress, renderExpirationTime) {
                    var newProps = workInProgress.pendingProps;
                    switch (workInProgress.tag) {
                        case IndeterminateComponent:
                        case LazyComponent:
                        case SimpleMemoComponent:
                        case FunctionComponent:
                        case ForwardRef:
                        case Fragment:
                        case Mode:
                        case Profiler:
                        case ContextConsumer:
                        case MemoComponent: return null;
                        case ClassComponent: {
                            var Component = workInProgress.type;
                            if (isContextProvider(Component)) {
                                popContext(workInProgress);
                            }
                            return null;
                        }
                        case HostRoot: {
                            popHostContainer(workInProgress);
                            popTopLevelContextObject(workInProgress);
                            var fiberRoot = workInProgress.stateNode;
                            if (fiberRoot.pendingContext) {
                                fiberRoot.context = fiberRoot.pendingContext;
                                fiberRoot.pendingContext = null;
                            }
                            if (current === null || current.child === null) {
                                var wasHydrated = popHydrationState(workInProgress);
                                if (wasHydrated) {
                                    markUpdate(workInProgress);
                                }
                            }
                            updateHostContainer(workInProgress);
                            return null;
                        }
                        case HostComponent: {
                            popHostContext(workInProgress);
                            var rootContainerInstance = getRootHostContainer();
                            var type = workInProgress.type;
                            if (current !== null && workInProgress.stateNode != null) {
                                updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                                if (current.ref !== workInProgress.ref) {
                                    markRef$1(workInProgress);
                                }
                            }
                            else {
                                if (!newProps) {
                                    if (!(workInProgress.stateNode !== null)) {
                                        {
                                            throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                                        }
                                    }
                                    return null;
                                }
                                var currentHostContext = getHostContext();
                                var _wasHydrated = popHydrationState(workInProgress);
                                if (_wasHydrated) {
                                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                                        markUpdate(workInProgress);
                                    }
                                }
                                else {
                                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                                    appendAllChildren(instance, workInProgress, false, false);
                                    workInProgress.stateNode = instance;
                                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                                        markUpdate(workInProgress);
                                    }
                                }
                                if (workInProgress.ref !== null) {
                                    markRef$1(workInProgress);
                                }
                            }
                            return null;
                        }
                        case HostText: {
                            var newText = newProps;
                            if (current && workInProgress.stateNode != null) {
                                var oldText = current.memoizedProps;
                                updateHostText$1(current, workInProgress, oldText, newText);
                            }
                            else {
                                if (typeof newText !== 'string') {
                                    if (!(workInProgress.stateNode !== null)) {
                                        {
                                            throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                                        }
                                    }
                                }
                                var _rootContainerInstance = getRootHostContainer();
                                var _currentHostContext = getHostContext();
                                var _wasHydrated2 = popHydrationState(workInProgress);
                                if (_wasHydrated2) {
                                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                                        markUpdate(workInProgress);
                                    }
                                }
                                else {
                                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                                }
                            }
                            return null;
                        }
                        case SuspenseComponent: {
                            popSuspenseContext(workInProgress);
                            var nextState = workInProgress.memoizedState;
                            if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
                                workInProgress.expirationTime = renderExpirationTime;
                                return workInProgress;
                            }
                            var nextDidTimeout = nextState !== null;
                            var prevDidTimeout = false;
                            if (current === null) {
                                if (workInProgress.memoizedProps.fallback !== undefined) {
                                    popHydrationState(workInProgress);
                                }
                            }
                            else {
                                var prevState = current.memoizedState;
                                prevDidTimeout = prevState !== null;
                                if (!nextDidTimeout && prevState !== null) {
                                    var currentFallbackChild = current.child.sibling;
                                    if (currentFallbackChild !== null) {
                                        var first = workInProgress.firstEffect;
                                        if (first !== null) {
                                            workInProgress.firstEffect = currentFallbackChild;
                                            currentFallbackChild.nextEffect = first;
                                        }
                                        else {
                                            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                                            currentFallbackChild.nextEffect = null;
                                        }
                                        currentFallbackChild.effectTag = Deletion;
                                    }
                                }
                            }
                            if (nextDidTimeout && !prevDidTimeout) {
                                if ((workInProgress.mode & BlockingMode) !== NoMode) {
                                    var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                                        renderDidSuspend();
                                    }
                                    else {
                                        renderDidSuspendDelayIfPossible();
                                    }
                                }
                            }
                            {
                                if (nextDidTimeout || prevDidTimeout) {
                                    workInProgress.effectTag |= Update;
                                }
                            }
                            return null;
                        }
                        case HostPortal:
                            popHostContainer(workInProgress);
                            updateHostContainer(workInProgress);
                            return null;
                        case ContextProvider:
                            popProvider(workInProgress);
                            return null;
                        case IncompleteClassComponent: {
                            var _Component = workInProgress.type;
                            if (isContextProvider(_Component)) {
                                popContext(workInProgress);
                            }
                            return null;
                        }
                        case SuspenseListComponent: {
                            popSuspenseContext(workInProgress);
                            var renderState = workInProgress.memoizedState;
                            if (renderState === null) {
                                return null;
                            }
                            var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
                            var renderedTail = renderState.rendering;
                            if (renderedTail === null) {
                                if (!didSuspendAlready) {
                                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);
                                    if (!cannotBeSuspended) {
                                        var row = workInProgress.child;
                                        while (row !== null) {
                                            var suspended = findFirstSuspended(row);
                                            if (suspended !== null) {
                                                didSuspendAlready = true;
                                                workInProgress.effectTag |= DidCapture;
                                                cutOffTailIfNeeded(renderState, false);
                                                var newThennables = suspended.updateQueue;
                                                if (newThennables !== null) {
                                                    workInProgress.updateQueue = newThennables;
                                                    workInProgress.effectTag |= Update;
                                                }
                                                if (renderState.lastEffect === null) {
                                                    workInProgress.firstEffect = null;
                                                }
                                                workInProgress.lastEffect = renderState.lastEffect;
                                                resetChildFibers(workInProgress, renderExpirationTime);
                                                pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                                return workInProgress.child;
                                            }
                                            row = row.sibling;
                                        }
                                    }
                                }
                                else {
                                    cutOffTailIfNeeded(renderState, false);
                                }
                            }
                            else {
                                if (!didSuspendAlready) {
                                    var _suspended = findFirstSuspended(renderedTail);
                                    if (_suspended !== null) {
                                        workInProgress.effectTag |= DidCapture;
                                        didSuspendAlready = true;
                                        var _newThennables = _suspended.updateQueue;
                                        if (_newThennables !== null) {
                                            workInProgress.updateQueue = _newThennables;
                                            workInProgress.effectTag |= Update;
                                        }
                                        cutOffTailIfNeeded(renderState, true);
                                        if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
                                            var lastEffect = workInProgress.lastEffect = renderState.lastEffect;
                                            if (lastEffect !== null) {
                                                lastEffect.nextEffect = null;
                                            }
                                            return null;
                                        }
                                    }
                                    else if (now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
                                        workInProgress.effectTag |= DidCapture;
                                        didSuspendAlready = true;
                                        cutOffTailIfNeeded(renderState, false);
                                        var nextPriority = renderExpirationTime - 1;
                                        workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;
                                        {
                                            markSpawnedWork(nextPriority);
                                        }
                                    }
                                }
                                if (renderState.isBackwards) {
                                    renderedTail.sibling = workInProgress.child;
                                    workInProgress.child = renderedTail;
                                }
                                else {
                                    var previousSibling = renderState.last;
                                    if (previousSibling !== null) {
                                        previousSibling.sibling = renderedTail;
                                    }
                                    else {
                                        workInProgress.child = renderedTail;
                                    }
                                    renderState.last = renderedTail;
                                }
                            }
                            if (renderState.tail !== null) {
                                if (renderState.tailExpiration === 0) {
                                    var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                                    renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
                                }
                                var next = renderState.tail;
                                renderState.rendering = next;
                                renderState.tail = next.sibling;
                                renderState.lastEffect = workInProgress.lastEffect;
                                renderState.renderingStartTime = now();
                                next.sibling = null;
                                var suspenseContext = suspenseStackCursor.current;
                                if (didSuspendAlready) {
                                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                                }
                                else {
                                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                                }
                                pushSuspenseContext(workInProgress, suspenseContext);
                                return next;
                            }
                            return null;
                        }
                    }
                    {
                        {
                            throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                }
                function unwindWork(workInProgress, renderExpirationTime) {
                    switch (workInProgress.tag) {
                        case ClassComponent: {
                            var Component = workInProgress.type;
                            if (isContextProvider(Component)) {
                                popContext(workInProgress);
                            }
                            var effectTag = workInProgress.effectTag;
                            if (effectTag & ShouldCapture) {
                                workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
                                return workInProgress;
                            }
                            return null;
                        }
                        case HostRoot: {
                            popHostContainer(workInProgress);
                            popTopLevelContextObject(workInProgress);
                            var _effectTag = workInProgress.effectTag;
                            if (!((_effectTag & DidCapture) === NoEffect)) {
                                {
                                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                                }
                            }
                            workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
                            return workInProgress;
                        }
                        case HostComponent: {
                            popHostContext(workInProgress);
                            return null;
                        }
                        case SuspenseComponent: {
                            popSuspenseContext(workInProgress);
                            var _effectTag2 = workInProgress.effectTag;
                            if (_effectTag2 & ShouldCapture) {
                                workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                                return workInProgress;
                            }
                            return null;
                        }
                        case SuspenseListComponent: {
                            popSuspenseContext(workInProgress);
                            return null;
                        }
                        case HostPortal:
                            popHostContainer(workInProgress);
                            return null;
                        case ContextProvider:
                            popProvider(workInProgress);
                            return null;
                        default: return null;
                    }
                }
                function unwindInterruptedWork(interruptedWork) { switch (interruptedWork.tag) {
                    case ClassComponent: {
                        var childContextTypes = interruptedWork.type.childContextTypes;
                        if (childContextTypes !== null && childContextTypes !== undefined) {
                            popContext(interruptedWork);
                        }
                        break;
                    }
                    case HostRoot: {
                        popHostContainer(interruptedWork);
                        popTopLevelContextObject(interruptedWork);
                        break;
                    }
                    case HostComponent: {
                        popHostContext(interruptedWork);
                        break;
                    }
                    case HostPortal:
                        popHostContainer(interruptedWork);
                        break;
                    case SuspenseComponent:
                        popSuspenseContext(interruptedWork);
                        break;
                    case SuspenseListComponent:
                        popSuspenseContext(interruptedWork);
                        break;
                    case ContextProvider:
                        popProvider(interruptedWork);
                        break;
                } }
                function createCapturedValue(value, source) {
                    return { value: value, source: source, stack: getStackByFiberInDevAndProd(source) };
                }
                function logCapturedError(capturedError) {
                    var error = capturedError.error;
                    {
                        var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
                        if (error != null && error._suppressLogging) {
                            if (errorBoundaryFound && willRetry) {
                                return;
                            }
                            console['error'](error);
                        }
                        var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
                        var errorBoundaryMessage;
                        if (errorBoundaryFound && errorBoundaryName) {
                            if (willRetry) {
                                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                            }
                            else {
                                errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
                            }
                        }
                        else {
                            errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
                        }
                        var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                        console['error'](combinedMessage);
                    }
                }
                var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
                {
                    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
                }
                var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
                function logError(boundary, errorInfo) {
                    var source = errorInfo.source;
                    var stack = errorInfo.stack;
                    if (stack === null && source !== null) {
                        stack = getStackByFiberInDevAndProd(source);
                    }
                    var capturedError = { componentName: source !== null ? getComponentName(source.type) : null, componentStack: stack !== null ? stack : '', error: errorInfo.value, errorBoundary: null, errorBoundaryName: null, errorBoundaryFound: false, willRetry: false };
                    if (boundary !== null && boundary.tag === ClassComponent) {
                        capturedError.errorBoundary = boundary.stateNode;
                        capturedError.errorBoundaryName = getComponentName(boundary.type);
                        capturedError.errorBoundaryFound = true;
                        capturedError.willRetry = true;
                    }
                    try {
                        logCapturedError(capturedError);
                    }
                    catch (e) {
                        setTimeout(function () { throw e; });
                    }
                }
                var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) { startPhaseTimer(current, 'componentWillUnmount'); instance.props = current.memoizedProps; instance.state = current.memoizedState; instance.componentWillUnmount(); stopPhaseTimer(); };
                function safelyCallComponentWillUnmount(current, instance) { {
                    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);
                    if (hasCaughtError()) {
                        var unmountError = clearCaughtError();
                        captureCommitPhaseError(current, unmountError);
                    }
                } }
                function safelyDetachRef(current) { var ref = current.ref; if (ref !== null) {
                    if (typeof ref === 'function') {
                        {
                            invokeGuardedCallback(null, ref, null, null);
                            if (hasCaughtError()) {
                                var refError = clearCaughtError();
                                captureCommitPhaseError(current, refError);
                            }
                        }
                    }
                    else {
                        ref.current = null;
                    }
                } }
                function safelyCallDestroy(current, destroy) { {
                    invokeGuardedCallback(null, destroy, null);
                    if (hasCaughtError()) {
                        var error = clearCaughtError();
                        captureCommitPhaseError(current, error);
                    }
                } }
                function commitBeforeMutationLifeCycles(current, finishedWork) {
                    switch (finishedWork.tag) {
                        case FunctionComponent:
                        case ForwardRef:
                        case SimpleMemoComponent:
                        case Block: {
                            return;
                        }
                        case ClassComponent: {
                            if (finishedWork.effectTag & Snapshot) {
                                if (current !== null) {
                                    var prevProps = current.memoizedProps;
                                    var prevState = current.memoizedState;
                                    startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                                    var instance = finishedWork.stateNode;
                                    {
                                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                            if (instance.props !== finishedWork.memoizedProps) {
                                                error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                            }
                                            if (instance.state !== finishedWork.memoizedState) {
                                                error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                            }
                                        }
                                    }
                                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                                    {
                                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                                            didWarnSet.add(finishedWork.type);
                                            error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                                        }
                                    }
                                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                                    stopPhaseTimer();
                                }
                            }
                            return;
                        }
                        case HostRoot:
                        case HostComponent:
                        case HostText:
                        case HostPortal:
                        case IncompleteClassComponent:
                            return;
                    }
                    {
                        {
                            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                }
                function commitHookEffectListUnmount(tag, finishedWork) {
                    var updateQueue = finishedWork.updateQueue;
                    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            if ((effect.tag & tag) === tag) {
                                var destroy = effect.destroy;
                                effect.destroy = undefined;
                                if (destroy !== undefined) {
                                    destroy();
                                }
                            }
                            effect = effect.next;
                        } while (effect !== firstEffect);
                    }
                }
                function commitHookEffectListMount(tag, finishedWork) {
                    var updateQueue = finishedWork.updateQueue;
                    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            if ((effect.tag & tag) === tag) {
                                var create = effect.create;
                                effect.destroy = create();
                                {
                                    var destroy = effect.destroy;
                                    if (destroy !== undefined && typeof destroy !== 'function') {
                                        var addendum = void 0;
                                        if (destroy === null) {
                                            addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                                        }
                                        else if (typeof destroy.then === 'function') {
                                            addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
                                        }
                                        else {
                                            addendum = ' You returned: ' + destroy;
                                        }
                                        error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
                                    }
                                }
                            }
                            effect = effect.next;
                        } while (effect !== firstEffect);
                    }
                }
                function commitPassiveHookEffects(finishedWork) {
                    if ((finishedWork.effectTag & Passive) !== NoEffect) {
                        switch (finishedWork.tag) {
                            case FunctionComponent:
                            case ForwardRef:
                            case SimpleMemoComponent:
                            case Block: {
                                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                                break;
                            }
                        }
                    }
                }
                function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
                    switch (finishedWork.tag) {
                        case FunctionComponent:
                        case ForwardRef:
                        case SimpleMemoComponent:
                        case Block: {
                            commitHookEffectListMount(Layout | HasEffect, finishedWork);
                            return;
                        }
                        case ClassComponent: {
                            var instance = finishedWork.stateNode;
                            if (finishedWork.effectTag & Update) {
                                if (current === null) {
                                    startPhaseTimer(finishedWork, 'componentDidMount');
                                    {
                                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                            if (instance.props !== finishedWork.memoizedProps) {
                                                error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                            }
                                            if (instance.state !== finishedWork.memoizedState) {
                                                error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                            }
                                        }
                                    }
                                    instance.componentDidMount();
                                    stopPhaseTimer();
                                }
                                else {
                                    var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                                    var prevState = current.memoizedState;
                                    startPhaseTimer(finishedWork, 'componentDidUpdate');
                                    {
                                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                            if (instance.props !== finishedWork.memoizedProps) {
                                                error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                            }
                                            if (instance.state !== finishedWork.memoizedState) {
                                                error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                            }
                                        }
                                    }
                                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                                    stopPhaseTimer();
                                }
                            }
                            var updateQueue = finishedWork.updateQueue;
                            if (updateQueue !== null) {
                                {
                                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                        if (instance.props !== finishedWork.memoizedProps) {
                                            error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                        }
                                        if (instance.state !== finishedWork.memoizedState) {
                                            error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                                        }
                                    }
                                }
                                commitUpdateQueue(finishedWork, updateQueue, instance);
                            }
                            return;
                        }
                        case HostRoot: {
                            var _updateQueue = finishedWork.updateQueue;
                            if (_updateQueue !== null) {
                                var _instance = null;
                                if (finishedWork.child !== null) {
                                    switch (finishedWork.child.tag) {
                                        case HostComponent:
                                            _instance = getPublicInstance(finishedWork.child.stateNode);
                                            break;
                                        case ClassComponent:
                                            _instance = finishedWork.child.stateNode;
                                            break;
                                    }
                                }
                                commitUpdateQueue(finishedWork, _updateQueue, _instance);
                            }
                            return;
                        }
                        case HostComponent: {
                            var _instance2 = finishedWork.stateNode;
                            if (current === null && finishedWork.effectTag & Update) {
                                var type = finishedWork.type;
                                var props = finishedWork.memoizedProps;
                                commitMount(_instance2, type, props);
                            }
                            return;
                        }
                        case HostText: {
                            return;
                        }
                        case HostPortal: {
                            return;
                        }
                        case Profiler: {
                            {
                                var onRender = finishedWork.memoizedProps.onRender;
                                if (typeof onRender === 'function') {
                                    {
                                        onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                                    }
                                }
                            }
                            return;
                        }
                        case SuspenseComponent: {
                            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                            return;
                        }
                        case SuspenseListComponent:
                        case IncompleteClassComponent:
                        case FundamentalComponent:
                        case ScopeComponent: return;
                    }
                    {
                        {
                            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                }
                function hideOrUnhideAllChildren(finishedWork, isHidden) {
                    {
                        var node = finishedWork;
                        while (true) {
                            if (node.tag === HostComponent) {
                                var instance = node.stateNode;
                                if (isHidden) {
                                    hideInstance(instance);
                                }
                                else {
                                    unhideInstance(node.stateNode, node.memoizedProps);
                                }
                            }
                            else if (node.tag === HostText) {
                                var _instance3 = node.stateNode;
                                if (isHidden) {
                                    hideTextInstance(_instance3);
                                }
                                else {
                                    unhideTextInstance(_instance3, node.memoizedProps);
                                }
                            }
                            else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                                var fallbackChildFragment = node.child.sibling;
                                fallbackChildFragment.return = node;
                                node = fallbackChildFragment;
                                continue;
                            }
                            else if (node.child !== null) {
                                node.child.return = node;
                                node = node.child;
                                continue;
                            }
                            if (node === finishedWork) {
                                return;
                            }
                            while (node.sibling === null) {
                                if (node.return === null || node.return === finishedWork) {
                                    return;
                                }
                                node = node.return;
                            }
                            node.sibling.return = node.return;
                            node = node.sibling;
                        }
                    }
                }
                function commitAttachRef(finishedWork) {
                    var ref = finishedWork.ref;
                    if (ref !== null) {
                        var instance = finishedWork.stateNode;
                        var instanceToUse;
                        switch (finishedWork.tag) {
                            case HostComponent:
                                instanceToUse = getPublicInstance(instance);
                                break;
                            default: instanceToUse = instance;
                        }
                        if (typeof ref === 'function') {
                            ref(instanceToUse);
                        }
                        else {
                            {
                                if (!ref.hasOwnProperty('current')) {
                                    error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                                }
                            }
                            ref.current = instanceToUse;
                        }
                    }
                }
                function commitDetachRef(current) { var currentRef = current.ref; if (currentRef !== null) {
                    if (typeof currentRef === 'function') {
                        currentRef(null);
                    }
                    else {
                        currentRef.current = null;
                    }
                } }
                function commitUnmount(finishedRoot, current, renderPriorityLevel) {
                    onCommitUnmount(current);
                    switch (current.tag) {
                        case FunctionComponent:
                        case ForwardRef:
                        case MemoComponent:
                        case SimpleMemoComponent:
                        case Block: {
                            var updateQueue = current.updateQueue;
                            if (updateQueue !== null) {
                                var lastEffect = updateQueue.lastEffect;
                                if (lastEffect !== null) {
                                    var firstEffect = lastEffect.next;
                                    {
                                        var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                                        runWithPriority$1(priorityLevel, function () { var effect = firstEffect; do {
                                            var _destroy = effect.destroy;
                                            if (_destroy !== undefined) {
                                                safelyCallDestroy(current, _destroy);
                                            }
                                            effect = effect.next;
                                        } while (effect !== firstEffect); });
                                    }
                                }
                            }
                            return;
                        }
                        case ClassComponent: {
                            safelyDetachRef(current);
                            var instance = current.stateNode;
                            if (typeof instance.componentWillUnmount === 'function') {
                                safelyCallComponentWillUnmount(current, instance);
                            }
                            return;
                        }
                        case HostComponent: {
                            safelyDetachRef(current);
                            return;
                        }
                        case HostPortal: {
                            {
                                unmountHostComponents(finishedRoot, current, renderPriorityLevel);
                            }
                            return;
                        }
                        case FundamentalComponent: {
                            return;
                        }
                        case DehydratedFragment: {
                            return;
                        }
                        case ScopeComponent: {
                            return;
                        }
                    }
                }
                function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
                    var node = root;
                    while (true) {
                        commitUnmount(finishedRoot, node, renderPriorityLevel);
                        if (node.child !== null &&
                            node.tag !== HostPortal) {
                            node.child.return = node;
                            node = node.child;
                            continue;
                        }
                        if (node === root) {
                            return;
                        }
                        while (node.sibling === null) {
                            if (node.return === null || node.return === root) {
                                return;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                    }
                }
                function detachFiber(current) {
                    var alternate = current.alternate;
                    current.return = null;
                    current.child = null;
                    current.memoizedState = null;
                    current.updateQueue = null;
                    current.dependencies = null;
                    current.alternate = null;
                    current.firstEffect = null;
                    current.lastEffect = null;
                    current.pendingProps = null;
                    current.memoizedProps = null;
                    current.stateNode = null;
                    if (alternate !== null) {
                        detachFiber(alternate);
                    }
                }
                function getHostParentFiber(fiber) { var parent = fiber.return; while (parent !== null) {
                    if (isHostParent(parent)) {
                        return parent;
                    }
                    parent = parent.return;
                } {
                    {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                } }
                function isHostParent(fiber) { return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal; }
                function getHostSibling(fiber) {
                    var node = fiber;
                    siblings: while (true) {
                        while (node.sibling === null) {
                            if (node.return === null || isHostParent(node.return)) {
                                return null;
                            }
                            node = node.return;
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                            if (node.effectTag & Placement) {
                                continue siblings;
                            }
                            if (node.child === null || node.tag === HostPortal) {
                                continue siblings;
                            }
                            else {
                                node.child.return = node;
                                node = node.child;
                            }
                        }
                        if (!(node.effectTag & Placement)) {
                            return node.stateNode;
                        }
                    }
                }
                function commitPlacement(finishedWork) {
                    var parentFiber = getHostParentFiber(finishedWork);
                    var parent;
                    var isContainer;
                    var parentStateNode = parentFiber.stateNode;
                    switch (parentFiber.tag) {
                        case HostComponent:
                            parent = parentStateNode;
                            isContainer = false;
                            break;
                        case HostRoot:
                            parent = parentStateNode.containerInfo;
                            isContainer = true;
                            break;
                        case HostPortal:
                            parent = parentStateNode.containerInfo;
                            isContainer = true;
                            break;
                        case FundamentalComponent:
                        default: {
                            {
                                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                            }
                        }
                    }
                    if (parentFiber.effectTag & ContentReset) {
                        resetTextContent(parent);
                        parentFiber.effectTag &= ~ContentReset;
                    }
                    var before = getHostSibling(finishedWork);
                    if (isContainer) {
                        insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
                    }
                    else {
                        insertOrAppendPlacementNode(finishedWork, before, parent);
                    }
                }
                function insertOrAppendPlacementNodeIntoContainer(node, before, parent) { var tag = node.tag; var isHost = tag === HostComponent || tag === HostText; if (isHost || enableFundamentalAPI) {
                    var stateNode = isHost ? node.stateNode : node.stateNode.instance;
                    if (before) {
                        insertInContainerBefore(parent, stateNode, before);
                    }
                    else {
                        appendChildToContainer(parent, stateNode);
                    }
                }
                else if (tag === HostPortal)
                    ;
                else {
                    var child = node.child;
                    if (child !== null) {
                        insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                        var sibling = child.sibling;
                        while (sibling !== null) {
                            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                            sibling = sibling.sibling;
                        }
                    }
                } }
                function insertOrAppendPlacementNode(node, before, parent) { var tag = node.tag; var isHost = tag === HostComponent || tag === HostText; if (isHost || enableFundamentalAPI) {
                    var stateNode = isHost ? node.stateNode : node.stateNode.instance;
                    if (before) {
                        insertBefore(parent, stateNode, before);
                    }
                    else {
                        appendChild(parent, stateNode);
                    }
                }
                else if (tag === HostPortal)
                    ;
                else {
                    var child = node.child;
                    if (child !== null) {
                        insertOrAppendPlacementNode(child, before, parent);
                        var sibling = child.sibling;
                        while (sibling !== null) {
                            insertOrAppendPlacementNode(sibling, before, parent);
                            sibling = sibling.sibling;
                        }
                    }
                } }
                function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
                    var node = current;
                    var currentParentIsValid = false;
                    var currentParent;
                    var currentParentIsContainer;
                    while (true) {
                        if (!currentParentIsValid) {
                            var parent = node.return;
                            findParent: while (true) {
                                if (!(parent !== null)) {
                                    {
                                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                                    }
                                }
                                var parentStateNode = parent.stateNode;
                                switch (parent.tag) {
                                    case HostComponent:
                                        currentParent = parentStateNode;
                                        currentParentIsContainer = false;
                                        break findParent;
                                    case HostRoot:
                                        currentParent = parentStateNode.containerInfo;
                                        currentParentIsContainer = true;
                                        break findParent;
                                    case HostPortal:
                                        currentParent = parentStateNode.containerInfo;
                                        currentParentIsContainer = true;
                                        break findParent;
                                }
                                parent = parent.return;
                            }
                            currentParentIsValid = true;
                        }
                        if (node.tag === HostComponent || node.tag === HostText) {
                            commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
                            if (currentParentIsContainer) {
                                removeChildFromContainer(currentParent, node.stateNode);
                            }
                            else {
                                removeChild(currentParent, node.stateNode);
                            }
                        }
                        else if (node.tag === HostPortal) {
                            if (node.child !== null) {
                                currentParent = node.stateNode.containerInfo;
                                currentParentIsContainer = true;
                                node.child.return = node;
                                node = node.child;
                                continue;
                            }
                        }
                        else {
                            commitUnmount(finishedRoot, node, renderPriorityLevel);
                            if (node.child !== null) {
                                node.child.return = node;
                                node = node.child;
                                continue;
                            }
                        }
                        if (node === current) {
                            return;
                        }
                        while (node.sibling === null) {
                            if (node.return === null || node.return === current) {
                                return;
                            }
                            node = node.return;
                            if (node.tag === HostPortal) {
                                currentParentIsValid = false;
                            }
                        }
                        node.sibling.return = node.return;
                        node = node.sibling;
                    }
                }
                function commitDeletion(finishedRoot, current, renderPriorityLevel) {
                    {
                        unmountHostComponents(finishedRoot, current, renderPriorityLevel);
                    }
                    detachFiber(current);
                }
                function commitWork(current, finishedWork) {
                    switch (finishedWork.tag) {
                        case FunctionComponent:
                        case ForwardRef:
                        case MemoComponent:
                        case SimpleMemoComponent:
                        case Block: {
                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                            return;
                        }
                        case ClassComponent: {
                            return;
                        }
                        case HostComponent: {
                            var instance = finishedWork.stateNode;
                            if (instance != null) {
                                var newProps = finishedWork.memoizedProps;
                                var oldProps = current !== null ? current.memoizedProps : newProps;
                                var type = finishedWork.type;
                                var updatePayload = finishedWork.updateQueue;
                                finishedWork.updateQueue = null;
                                if (updatePayload !== null) {
                                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                                }
                            }
                            return;
                        }
                        case HostText: {
                            if (!(finishedWork.stateNode !== null)) {
                                {
                                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                                }
                            }
                            var textInstance = finishedWork.stateNode;
                            var newText = finishedWork.memoizedProps;
                            var oldText = current !== null ? current.memoizedProps : newText;
                            commitTextUpdate(textInstance, oldText, newText);
                            return;
                        }
                        case HostRoot: {
                            {
                                var _root = finishedWork.stateNode;
                                if (_root.hydrate) {
                                    _root.hydrate = false;
                                    commitHydratedContainer(_root.containerInfo);
                                }
                            }
                            return;
                        }
                        case Profiler: {
                            return;
                        }
                        case SuspenseComponent: {
                            commitSuspenseComponent(finishedWork);
                            attachSuspenseRetryListeners(finishedWork);
                            return;
                        }
                        case SuspenseListComponent: {
                            attachSuspenseRetryListeners(finishedWork);
                            return;
                        }
                        case IncompleteClassComponent: {
                            return;
                        }
                    }
                    {
                        {
                            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                }
                function commitSuspenseComponent(finishedWork) { var newState = finishedWork.memoizedState; var newDidTimeout; var primaryChildParent = finishedWork; if (newState === null) {
                    newDidTimeout = false;
                }
                else {
                    newDidTimeout = true;
                    primaryChildParent = finishedWork.child;
                    markCommitTimeOfFallback();
                } if (primaryChildParent !== null) {
                    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
                } }
                function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) { var newState = finishedWork.memoizedState; if (newState === null) {
                    var current = finishedWork.alternate;
                    if (current !== null) {
                        var prevState = current.memoizedState;
                        if (prevState !== null) {
                            var suspenseInstance = prevState.dehydrated;
                            if (suspenseInstance !== null) {
                                commitHydratedSuspenseInstance(suspenseInstance);
                            }
                        }
                    }
                } }
                function attachSuspenseRetryListeners(finishedWork) {
                    var thenables = finishedWork.updateQueue;
                    if (thenables !== null) {
                        finishedWork.updateQueue = null;
                        var retryCache = finishedWork.stateNode;
                        if (retryCache === null) {
                            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
                        }
                        thenables.forEach(function (thenable) {
                            var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
                            if (!retryCache.has(thenable)) {
                                {
                                    if (thenable.__reactDoNotTraceInteractions !== true) {
                                        retry = tracing.unstable_wrap(retry);
                                    }
                                }
                                retryCache.add(thenable);
                                thenable.then(retry, retry);
                            }
                        });
                    }
                }
                function commitResetTextContent(current) { resetTextContent(current.stateNode); }
                var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
                function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
                    var update = createUpdate(expirationTime, null);
                    update.tag = CaptureUpdate;
                    update.payload = { element: null };
                    var error = errorInfo.value;
                    update.callback = function () { onUncaughtError(error); logError(fiber, errorInfo); };
                    return update;
                }
                function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
                    var update = createUpdate(expirationTime, null);
                    update.tag = CaptureUpdate;
                    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
                    if (typeof getDerivedStateFromError === 'function') {
                        var error$1 = errorInfo.value;
                        update.payload = function () { logError(fiber, errorInfo); return getDerivedStateFromError(error$1); };
                    }
                    var inst = fiber.stateNode;
                    if (inst !== null && typeof inst.componentDidCatch === 'function') {
                        update.callback = function callback() {
                            {
                                markFailedErrorBoundaryForHotReloading(fiber);
                            }
                            if (typeof getDerivedStateFromError !== 'function') {
                                markLegacyErrorBoundaryAsFailed(this);
                                logError(fiber, errorInfo);
                            }
                            var error$1 = errorInfo.value;
                            var stack = errorInfo.stack;
                            this.componentDidCatch(error$1, { componentStack: stack !== null ? stack : '' });
                            {
                                if (typeof getDerivedStateFromError !== 'function') {
                                    if (fiber.expirationTime !== Sync) {
                                        error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
                                    }
                                }
                            }
                        };
                    }
                    else {
                        update.callback = function () { markFailedErrorBoundaryForHotReloading(fiber); };
                    }
                    return update;
                }
                function attachPingListener(root, renderExpirationTime, thenable) {
                    var pingCache = root.pingCache;
                    var threadIDs;
                    if (pingCache === null) {
                        pingCache = root.pingCache = new PossiblyWeakMap$1();
                        threadIDs = new Set();
                        pingCache.set(thenable, threadIDs);
                    }
                    else {
                        threadIDs = pingCache.get(thenable);
                        if (threadIDs === undefined) {
                            threadIDs = new Set();
                            pingCache.set(thenable, threadIDs);
                        }
                    }
                    if (!threadIDs.has(renderExpirationTime)) {
                        threadIDs.add(renderExpirationTime);
                        var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
                        thenable.then(ping, ping);
                    }
                }
                function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
                    sourceFiber.effectTag |= Incomplete;
                    sourceFiber.firstEffect = sourceFiber.lastEffect = null;
                    if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.then === 'function') {
                        var thenable = value;
                        if ((sourceFiber.mode & BlockingMode) === NoMode) {
                            var currentSource = sourceFiber.alternate;
                            if (currentSource) {
                                sourceFiber.memoizedState = currentSource.memoizedState;
                                sourceFiber.expirationTime = currentSource.expirationTime;
                            }
                            else {
                                sourceFiber.memoizedState = null;
                            }
                        }
                        var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
                        var _workInProgress = returnFiber;
                        do {
                            if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                                var thenables = _workInProgress.updateQueue;
                                if (thenables === null) {
                                    var updateQueue = new Set();
                                    updateQueue.add(thenable);
                                    _workInProgress.updateQueue = updateQueue;
                                }
                                else {
                                    thenables.add(thenable);
                                }
                                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                                    _workInProgress.effectTag |= DidCapture;
                                    sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                                    if (sourceFiber.tag === ClassComponent) {
                                        var currentSourceFiber = sourceFiber.alternate;
                                        if (currentSourceFiber === null) {
                                            sourceFiber.tag = IncompleteClassComponent;
                                        }
                                        else {
                                            var update = createUpdate(Sync, null);
                                            update.tag = ForceUpdate;
                                            enqueueUpdate(sourceFiber, update);
                                        }
                                    }
                                    sourceFiber.expirationTime = Sync;
                                    return;
                                }
                                attachPingListener(root, renderExpirationTime, thenable);
                                _workInProgress.effectTag |= ShouldCapture;
                                _workInProgress.expirationTime = renderExpirationTime;
                                return;
                            }
                            _workInProgress = _workInProgress.return;
                        } while (_workInProgress !== null);
                        value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
                    }
                    renderDidError();
                    value = createCapturedValue(value, sourceFiber);
                    var workInProgress = returnFiber;
                    do {
                        switch (workInProgress.tag) {
                            case HostRoot: {
                                var _errorInfo = value;
                                workInProgress.effectTag |= ShouldCapture;
                                workInProgress.expirationTime = renderExpirationTime;
                                var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
                                enqueueCapturedUpdate(workInProgress, _update);
                                return;
                            }
                            case ClassComponent:
                                var errorInfo = value;
                                var ctor = workInProgress.type;
                                var instance = workInProgress.stateNode;
                                if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                                    workInProgress.effectTag |= ShouldCapture;
                                    workInProgress.expirationTime = renderExpirationTime;
                                    var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
                                    enqueueCapturedUpdate(workInProgress, _update2);
                                    return;
                                }
                                break;
                        }
                        workInProgress = workInProgress.return;
                    } while (workInProgress !== null);
                }
                var ceil = Math.ceil;
                var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
                var NoContext = 0;
                var BatchedContext = 1;
                var EventContext = 2;
                var DiscreteEventContext = 4;
                var LegacyUnbatchedContext = 8;
                var RenderContext = 16;
                var CommitContext = 32;
                var RootIncomplete = 0;
                var RootFatalErrored = 1;
                var RootErrored = 2;
                var RootSuspended = 3;
                var RootSuspendedWithDelay = 4;
                var RootCompleted = 5;
                var executionContext = NoContext;
                var workInProgressRoot = null;
                var workInProgress = null;
                var renderExpirationTime$1 = NoWork;
                var workInProgressRootExitStatus = RootIncomplete;
                var workInProgressRootFatalError = null;
                var workInProgressRootLatestProcessedExpirationTime = Sync;
                var workInProgressRootLatestSuspenseTimeout = Sync;
                var workInProgressRootCanSuspendUsingConfig = null;
                var workInProgressRootNextUnprocessedUpdateTime = NoWork;
                var workInProgressRootHasPendingPing = false;
                var globalMostRecentFallbackTime = 0;
                var FALLBACK_THROTTLE_MS = 500;
                var nextEffect = null;
                var hasUncaughtError = false;
                var firstUncaughtError = null;
                var legacyErrorBoundariesThatAlreadyFailed = null;
                var rootDoesHavePassiveEffects = false;
                var rootWithPendingPassiveEffects = null;
                var pendingPassiveEffectsRenderPriority = NoPriority;
                var pendingPassiveEffectsExpirationTime = NoWork;
                var rootsWithPendingDiscreteUpdates = null;
                var NESTED_UPDATE_LIMIT = 50;
                var nestedUpdateCount = 0;
                var rootWithNestedUpdates = null;
                var NESTED_PASSIVE_UPDATE_LIMIT = 50;
                var nestedPassiveUpdateCount = 0;
                var interruptedBy = null;
                var spawnedWorkDuringRender = null;
                var currentEventTime = NoWork;
                function requestCurrentTimeForUpdate() {
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        return msToExpirationTime(now());
                    }
                    if (currentEventTime !== NoWork) {
                        return currentEventTime;
                    }
                    currentEventTime = msToExpirationTime(now());
                    return currentEventTime;
                }
                function getCurrentTime() { return msToExpirationTime(now()); }
                function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
                    var mode = fiber.mode;
                    if ((mode & BlockingMode) === NoMode) {
                        return Sync;
                    }
                    var priorityLevel = getCurrentPriorityLevel();
                    if ((mode & ConcurrentMode) === NoMode) {
                        return priorityLevel === ImmediatePriority ? Sync : Batched;
                    }
                    if ((executionContext & RenderContext) !== NoContext) {
                        return renderExpirationTime$1;
                    }
                    var expirationTime;
                    if (suspenseConfig !== null) {
                        expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
                    }
                    else {
                        switch (priorityLevel) {
                            case ImmediatePriority:
                                expirationTime = Sync;
                                break;
                            case UserBlockingPriority$1:
                                expirationTime = computeInteractiveExpiration(currentTime);
                                break;
                            case NormalPriority:
                            case LowPriority:
                                expirationTime = computeAsyncExpiration(currentTime);
                                break;
                            case IdlePriority:
                                expirationTime = Idle;
                                break;
                            default: {
                                {
                                    throw Error("Expected a valid priority level");
                                }
                            }
                        }
                    }
                    if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
                        expirationTime -= 1;
                    }
                    return expirationTime;
                }
                function scheduleUpdateOnFiber(fiber, expirationTime) {
                    checkForNestedUpdates();
                    warnAboutRenderPhaseUpdatesInDEV(fiber);
                    var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
                    if (root === null) {
                        warnAboutUpdateOnUnmountedFiberInDEV(fiber);
                        return;
                    }
                    checkForInterruption(fiber, expirationTime);
                    recordScheduleUpdate();
                    var priorityLevel = getCurrentPriorityLevel();
                    if (expirationTime === Sync) {
                        if ((executionContext & LegacyUnbatchedContext) !== NoContext &&
                            (executionContext & (RenderContext | CommitContext)) === NoContext) {
                            schedulePendingInteractions(root, expirationTime);
                            performSyncWorkOnRoot(root);
                        }
                        else {
                            ensureRootIsScheduled(root);
                            schedulePendingInteractions(root, expirationTime);
                            if (executionContext === NoContext) {
                                flushSyncCallbackQueue();
                            }
                        }
                    }
                    else {
                        ensureRootIsScheduled(root);
                        schedulePendingInteractions(root, expirationTime);
                    }
                    if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
                        if (rootsWithPendingDiscreteUpdates === null) {
                            rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
                        }
                        else {
                            var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);
                            if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
                                rootsWithPendingDiscreteUpdates.set(root, expirationTime);
                            }
                        }
                    }
                }
                var scheduleWork = scheduleUpdateOnFiber;
                function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
                    if (fiber.expirationTime < expirationTime) {
                        fiber.expirationTime = expirationTime;
                    }
                    var alternate = fiber.alternate;
                    if (alternate !== null && alternate.expirationTime < expirationTime) {
                        alternate.expirationTime = expirationTime;
                    }
                    var node = fiber.return;
                    var root = null;
                    if (node === null && fiber.tag === HostRoot) {
                        root = fiber.stateNode;
                    }
                    else {
                        while (node !== null) {
                            alternate = node.alternate;
                            if (node.childExpirationTime < expirationTime) {
                                node.childExpirationTime = expirationTime;
                                if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                                    alternate.childExpirationTime = expirationTime;
                                }
                            }
                            else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                                alternate.childExpirationTime = expirationTime;
                            }
                            if (node.return === null && node.tag === HostRoot) {
                                root = node.stateNode;
                                break;
                            }
                            node = node.return;
                        }
                    }
                    if (root !== null) {
                        if (workInProgressRoot === root) {
                            markUnprocessedUpdateTime(expirationTime);
                            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                                markRootSuspendedAtTime(root, renderExpirationTime$1);
                            }
                        }
                        markRootUpdatedAtTime(root, expirationTime);
                    }
                    return root;
                }
                function getNextRootExpirationTimeToWorkOn(root) {
                    var lastExpiredTime = root.lastExpiredTime;
                    if (lastExpiredTime !== NoWork) {
                        return lastExpiredTime;
                    }
                    var firstPendingTime = root.firstPendingTime;
                    if (!isRootSuspendedAtTime(root, firstPendingTime)) {
                        return firstPendingTime;
                    }
                    var lastPingedTime = root.lastPingedTime;
                    var nextKnownPendingLevel = root.nextKnownPendingLevel;
                    var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
                    if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
                        return NoWork;
                    }
                    return nextLevel;
                }
                function ensureRootIsScheduled(root) {
                    var lastExpiredTime = root.lastExpiredTime;
                    if (lastExpiredTime !== NoWork) {
                        root.callbackExpirationTime = Sync;
                        root.callbackPriority = ImmediatePriority;
                        root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
                        return;
                    }
                    var expirationTime = getNextRootExpirationTimeToWorkOn(root);
                    var existingCallbackNode = root.callbackNode;
                    if (expirationTime === NoWork) {
                        if (existingCallbackNode !== null) {
                            root.callbackNode = null;
                            root.callbackExpirationTime = NoWork;
                            root.callbackPriority = NoPriority;
                        }
                        return;
                    }
                    var currentTime = requestCurrentTimeForUpdate();
                    var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                    if (existingCallbackNode !== null) {
                        var existingCallbackPriority = root.callbackPriority;
                        var existingCallbackExpirationTime = root.callbackExpirationTime;
                        if (existingCallbackExpirationTime === expirationTime &&
                            existingCallbackPriority >= priorityLevel) {
                            return;
                        }
                        cancelCallback(existingCallbackNode);
                    }
                    root.callbackExpirationTime = expirationTime;
                    root.callbackPriority = priorityLevel;
                    var callbackNode;
                    if (expirationTime === Sync) {
                        callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
                    }
                    else {
                        callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), { timeout: expirationTimeToMs(expirationTime) - now() });
                    }
                    root.callbackNode = callbackNode;
                }
                function performConcurrentWorkOnRoot(root, didTimeout) {
                    currentEventTime = NoWork;
                    if (didTimeout) {
                        var currentTime = requestCurrentTimeForUpdate();
                        markRootExpiredAtTime(root, currentTime);
                        ensureRootIsScheduled(root);
                        return null;
                    }
                    var expirationTime = getNextRootExpirationTimeToWorkOn(root);
                    if (expirationTime !== NoWork) {
                        var originalCallbackNode = root.callbackNode;
                        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                            {
                                throw Error("Should not already be working.");
                            }
                        }
                        flushPassiveEffects();
                        if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
                            prepareFreshStack(root, expirationTime);
                            startWorkOnPendingInteractions(root, expirationTime);
                        }
                        if (workInProgress !== null) {
                            var prevExecutionContext = executionContext;
                            executionContext |= RenderContext;
                            var prevDispatcher = pushDispatcher();
                            var prevInteractions = pushInteractions(root);
                            startWorkLoopTimer(workInProgress);
                            do {
                                try {
                                    workLoopConcurrent();
                                    break;
                                }
                                catch (thrownValue) {
                                    handleError(root, thrownValue);
                                }
                            } while (true);
                            resetContextDependencies();
                            executionContext = prevExecutionContext;
                            popDispatcher(prevDispatcher);
                            {
                                popInteractions(prevInteractions);
                            }
                            if (workInProgressRootExitStatus === RootFatalErrored) {
                                var fatalError = workInProgressRootFatalError;
                                stopInterruptedWorkLoopTimer();
                                prepareFreshStack(root, expirationTime);
                                markRootSuspendedAtTime(root, expirationTime);
                                ensureRootIsScheduled(root);
                                throw fatalError;
                            }
                            if (workInProgress !== null) {
                                stopInterruptedWorkLoopTimer();
                            }
                            else {
                                stopFinishedWorkLoopTimer();
                                var finishedWork = root.finishedWork = root.current.alternate;
                                root.finishedExpirationTime = expirationTime;
                                finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
                            }
                            ensureRootIsScheduled(root);
                            if (root.callbackNode === originalCallbackNode) {
                                return performConcurrentWorkOnRoot.bind(null, root);
                            }
                        }
                    }
                    return null;
                }
                function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
                    workInProgressRoot = null;
                    switch (exitStatus) {
                        case RootIncomplete:
                        case RootFatalErrored: {
                            {
                                {
                                    throw Error("Root did not complete. This is a bug in React.");
                                }
                            }
                        }
                        case RootErrored: {
                            markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime);
                            break;
                        }
                        case RootSuspended: {
                            markRootSuspendedAtTime(root, expirationTime);
                            var lastSuspendedTime = root.lastSuspendedTime;
                            if (expirationTime === lastSuspendedTime) {
                                root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
                            }
                            var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
                            if (hasNotProcessedNewUpdates &&
                                !IsThisRendererActing.current) {
                                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                                if (msUntilTimeout > 10) {
                                    if (workInProgressRootHasPendingPing) {
                                        var lastPingedTime = root.lastPingedTime;
                                        if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                                            root.lastPingedTime = expirationTime;
                                            prepareFreshStack(root, expirationTime);
                                            break;
                                        }
                                    }
                                    var nextTime = getNextRootExpirationTimeToWorkOn(root);
                                    if (nextTime !== NoWork && nextTime !== expirationTime) {
                                        break;
                                    }
                                    if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                                        root.lastPingedTime = lastSuspendedTime;
                                        break;
                                    }
                                    root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                                    break;
                                }
                            }
                            commitRoot(root);
                            break;
                        }
                        case RootSuspendedWithDelay: {
                            markRootSuspendedAtTime(root, expirationTime);
                            var _lastSuspendedTime = root.lastSuspendedTime;
                            if (expirationTime === _lastSuspendedTime) {
                                root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
                            }
                            if (!IsThisRendererActing.current) {
                                if (workInProgressRootHasPendingPing) {
                                    var _lastPingedTime = root.lastPingedTime;
                                    if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                                        root.lastPingedTime = expirationTime;
                                        prepareFreshStack(root, expirationTime);
                                        break;
                                    }
                                }
                                var _nextTime = getNextRootExpirationTimeToWorkOn(root);
                                if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                                    break;
                                }
                                if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                                    root.lastPingedTime = _lastSuspendedTime;
                                    break;
                                }
                                var _msUntilTimeout;
                                if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                                    _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
                                }
                                else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                                    _msUntilTimeout = 0;
                                }
                                else {
                                    var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                                    var currentTimeMs = now();
                                    var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                                    var timeElapsed = currentTimeMs - eventTimeMs;
                                    if (timeElapsed < 0) {
                                        timeElapsed = 0;
                                    }
                                    _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                                    if (timeUntilExpirationMs < _msUntilTimeout) {
                                        _msUntilTimeout = timeUntilExpirationMs;
                                    }
                                }
                                if (_msUntilTimeout > 10) {
                                    root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                                    break;
                                }
                            }
                            commitRoot(root);
                            break;
                        }
                        case RootCompleted: {
                            if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                                var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                                if (_msUntilTimeout2 > 10) {
                                    markRootSuspendedAtTime(root, expirationTime);
                                    root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
                                    break;
                                }
                            }
                            commitRoot(root);
                            break;
                        }
                        default: {
                            {
                                {
                                    throw Error("Unknown root exit status.");
                                }
                            }
                        }
                    }
                }
                function performSyncWorkOnRoot(root) {
                    var lastExpiredTime = root.lastExpiredTime;
                    var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
                    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                        {
                            throw Error("Should not already be working.");
                        }
                    }
                    flushPassiveEffects();
                    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
                        prepareFreshStack(root, expirationTime);
                        startWorkOnPendingInteractions(root, expirationTime);
                    }
                    if (workInProgress !== null) {
                        var prevExecutionContext = executionContext;
                        executionContext |= RenderContext;
                        var prevDispatcher = pushDispatcher();
                        var prevInteractions = pushInteractions(root);
                        startWorkLoopTimer(workInProgress);
                        do {
                            try {
                                workLoopSync();
                                break;
                            }
                            catch (thrownValue) {
                                handleError(root, thrownValue);
                            }
                        } while (true);
                        resetContextDependencies();
                        executionContext = prevExecutionContext;
                        popDispatcher(prevDispatcher);
                        {
                            popInteractions(prevInteractions);
                        }
                        if (workInProgressRootExitStatus === RootFatalErrored) {
                            var fatalError = workInProgressRootFatalError;
                            stopInterruptedWorkLoopTimer();
                            prepareFreshStack(root, expirationTime);
                            markRootSuspendedAtTime(root, expirationTime);
                            ensureRootIsScheduled(root);
                            throw fatalError;
                        }
                        if (workInProgress !== null) {
                            {
                                {
                                    throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                                }
                            }
                        }
                        else {
                            stopFinishedWorkLoopTimer();
                            root.finishedWork = root.current.alternate;
                            root.finishedExpirationTime = expirationTime;
                            finishSyncRender(root);
                        }
                        ensureRootIsScheduled(root);
                    }
                    return null;
                }
                function finishSyncRender(root) {
                    workInProgressRoot = null;
                    commitRoot(root);
                }
                function flushDiscreteUpdates() {
                    if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
                        {
                            if ((executionContext & RenderContext) !== NoContext) {
                                error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
                            }
                        }
                        return;
                    }
                    flushPendingDiscreteUpdates();
                    flushPassiveEffects();
                }
                function syncUpdates(fn, a, b, c) { return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c)); }
                function flushPendingDiscreteUpdates() {
                    if (rootsWithPendingDiscreteUpdates !== null) {
                        var roots = rootsWithPendingDiscreteUpdates;
                        rootsWithPendingDiscreteUpdates = null;
                        roots.forEach(function (expirationTime, root) { markRootExpiredAtTime(root, expirationTime); ensureRootIsScheduled(root); });
                        flushSyncCallbackQueue();
                    }
                }
                function batchedUpdates$1(fn, a) {
                    var prevExecutionContext = executionContext;
                    executionContext |= BatchedContext;
                    try {
                        return fn(a);
                    }
                    finally {
                        executionContext = prevExecutionContext;
                        if (executionContext === NoContext) {
                            flushSyncCallbackQueue();
                        }
                    }
                }
                function batchedEventUpdates$1(fn, a) {
                    var prevExecutionContext = executionContext;
                    executionContext |= EventContext;
                    try {
                        return fn(a);
                    }
                    finally {
                        executionContext = prevExecutionContext;
                        if (executionContext === NoContext) {
                            flushSyncCallbackQueue();
                        }
                    }
                }
                function discreteUpdates$1(fn, a, b, c, d) {
                    var prevExecutionContext = executionContext;
                    executionContext |= DiscreteEventContext;
                    try {
                        return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
                    }
                    finally {
                        executionContext = prevExecutionContext;
                        if (executionContext === NoContext) {
                            flushSyncCallbackQueue();
                        }
                    }
                }
                function unbatchedUpdates(fn, a) {
                    var prevExecutionContext = executionContext;
                    executionContext &= ~BatchedContext;
                    executionContext |= LegacyUnbatchedContext;
                    try {
                        return fn(a);
                    }
                    finally {
                        executionContext = prevExecutionContext;
                        if (executionContext === NoContext) {
                            flushSyncCallbackQueue();
                        }
                    }
                }
                function flushSync(fn, a) {
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                        {
                            {
                                throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
                            }
                        }
                    }
                    var prevExecutionContext = executionContext;
                    executionContext |= BatchedContext;
                    try {
                        return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
                    }
                    finally {
                        executionContext = prevExecutionContext;
                        flushSyncCallbackQueue();
                    }
                }
                function prepareFreshStack(root, expirationTime) {
                    root.finishedWork = null;
                    root.finishedExpirationTime = NoWork;
                    var timeoutHandle = root.timeoutHandle;
                    if (timeoutHandle !== noTimeout) {
                        root.timeoutHandle = noTimeout;
                        cancelTimeout(timeoutHandle);
                    }
                    if (workInProgress !== null) {
                        var interruptedWork = workInProgress.return;
                        while (interruptedWork !== null) {
                            unwindInterruptedWork(interruptedWork);
                            interruptedWork = interruptedWork.return;
                        }
                    }
                    workInProgressRoot = root;
                    workInProgress = createWorkInProgress(root.current, null);
                    renderExpirationTime$1 = expirationTime;
                    workInProgressRootExitStatus = RootIncomplete;
                    workInProgressRootFatalError = null;
                    workInProgressRootLatestProcessedExpirationTime = Sync;
                    workInProgressRootLatestSuspenseTimeout = Sync;
                    workInProgressRootCanSuspendUsingConfig = null;
                    workInProgressRootNextUnprocessedUpdateTime = NoWork;
                    workInProgressRootHasPendingPing = false;
                    {
                        spawnedWorkDuringRender = null;
                    }
                    {
                        ReactStrictModeWarnings.discardPendingWarnings();
                    }
                }
                function handleError(root, thrownValue) {
                    do {
                        try {
                            resetContextDependencies();
                            resetHooksAfterThrow();
                            resetCurrentFiber();
                            if (workInProgress === null || workInProgress.return === null) {
                                workInProgressRootExitStatus = RootFatalErrored;
                                workInProgressRootFatalError = thrownValue;
                                workInProgress = null;
                                return null;
                            }
                            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
                            }
                            throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
                            workInProgress = completeUnitOfWork(workInProgress);
                        }
                        catch (yetAnotherThrownValue) {
                            thrownValue = yetAnotherThrownValue;
                            continue;
                        }
                        return;
                    } while (true);
                }
                function pushDispatcher(root) {
                    var prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
                    if (prevDispatcher === null) {
                        return ContextOnlyDispatcher;
                    }
                    else {
                        return prevDispatcher;
                    }
                }
                function popDispatcher(prevDispatcher) { ReactCurrentDispatcher$1.current = prevDispatcher; }
                function pushInteractions(root) { {
                    var prevInteractions = tracing.__interactionsRef.current;
                    tracing.__interactionsRef.current = root.memoizedInteractions;
                    return prevInteractions;
                } }
                function popInteractions(prevInteractions) { {
                    tracing.__interactionsRef.current = prevInteractions;
                } }
                function markCommitTimeOfFallback() { globalMostRecentFallbackTime = now(); }
                function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
                    if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
                        workInProgressRootLatestProcessedExpirationTime = expirationTime;
                    }
                    if (suspenseConfig !== null) {
                        if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
                            workInProgressRootLatestSuspenseTimeout = expirationTime;
                            workInProgressRootCanSuspendUsingConfig = suspenseConfig;
                        }
                    }
                }
                function markUnprocessedUpdateTime(expirationTime) { if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
                    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
                } }
                function renderDidSuspend() { if (workInProgressRootExitStatus === RootIncomplete) {
                    workInProgressRootExitStatus = RootSuspended;
                } }
                function renderDidSuspendDelayIfPossible() {
                    if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
                        workInProgressRootExitStatus = RootSuspendedWithDelay;
                    }
                    if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
                        markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
                        markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
                    }
                }
                function renderDidError() { if (workInProgressRootExitStatus !== RootCompleted) {
                    workInProgressRootExitStatus = RootErrored;
                } }
                function renderHasNotSuspendedYet() {
                    return workInProgressRootExitStatus === RootIncomplete;
                }
                function inferTimeFromExpirationTime(expirationTime) {
                    var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
                    return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
                }
                function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
                    var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
                    return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
                }
                function workLoopSync() {
                    while (workInProgress !== null) {
                        workInProgress = performUnitOfWork(workInProgress);
                    }
                }
                function workLoopConcurrent() {
                    while (workInProgress !== null && !shouldYield()) {
                        workInProgress = performUnitOfWork(workInProgress);
                    }
                }
                function performUnitOfWork(unitOfWork) {
                    var current = unitOfWork.alternate;
                    startWorkTimer(unitOfWork);
                    setCurrentFiber(unitOfWork);
                    var next;
                    if ((unitOfWork.mode & ProfileMode) !== NoMode) {
                        startProfilerTimer(unitOfWork);
                        next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
                        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
                    }
                    else {
                        next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
                    }
                    resetCurrentFiber();
                    unitOfWork.memoizedProps = unitOfWork.pendingProps;
                    if (next === null) {
                        next = completeUnitOfWork(unitOfWork);
                    }
                    ReactCurrentOwner$2.current = null;
                    return next;
                }
                function completeUnitOfWork(unitOfWork) {
                    workInProgress = unitOfWork;
                    do {
                        var current = workInProgress.alternate;
                        var returnFiber = workInProgress.return;
                        if ((workInProgress.effectTag & Incomplete) === NoEffect) {
                            setCurrentFiber(workInProgress);
                            var next = void 0;
                            if ((workInProgress.mode & ProfileMode) === NoMode) {
                                next = completeWork(current, workInProgress, renderExpirationTime$1);
                            }
                            else {
                                startProfilerTimer(workInProgress);
                                next = completeWork(current, workInProgress, renderExpirationTime$1);
                                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                            }
                            stopWorkTimer(workInProgress);
                            resetCurrentFiber();
                            resetChildExpirationTime(workInProgress);
                            if (next !== null) {
                                return next;
                            }
                            if (returnFiber !== null &&
                                (returnFiber.effectTag & Incomplete) === NoEffect) {
                                if (returnFiber.firstEffect === null) {
                                    returnFiber.firstEffect = workInProgress.firstEffect;
                                }
                                if (workInProgress.lastEffect !== null) {
                                    if (returnFiber.lastEffect !== null) {
                                        returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                                    }
                                    returnFiber.lastEffect = workInProgress.lastEffect;
                                }
                                var effectTag = workInProgress.effectTag;
                                if (effectTag > PerformedWork) {
                                    if (returnFiber.lastEffect !== null) {
                                        returnFiber.lastEffect.nextEffect = workInProgress;
                                    }
                                    else {
                                        returnFiber.firstEffect = workInProgress;
                                    }
                                    returnFiber.lastEffect = workInProgress;
                                }
                            }
                        }
                        else {
                            var _next = unwindWork(workInProgress);
                            if ((workInProgress.mode & ProfileMode) !== NoMode) {
                                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                                var actualDuration = workInProgress.actualDuration;
                                var child = workInProgress.child;
                                while (child !== null) {
                                    actualDuration += child.actualDuration;
                                    child = child.sibling;
                                }
                                workInProgress.actualDuration = actualDuration;
                            }
                            if (_next !== null) {
                                stopFailedWorkTimer(workInProgress);
                                _next.effectTag &= HostEffectMask;
                                return _next;
                            }
                            stopWorkTimer(workInProgress);
                            if (returnFiber !== null) {
                                returnFiber.firstEffect = returnFiber.lastEffect = null;
                                returnFiber.effectTag |= Incomplete;
                            }
                        }
                        var siblingFiber = workInProgress.sibling;
                        if (siblingFiber !== null) {
                            return siblingFiber;
                        }
                        workInProgress = returnFiber;
                    } while (workInProgress !== null);
                    if (workInProgressRootExitStatus === RootIncomplete) {
                        workInProgressRootExitStatus = RootCompleted;
                    }
                    return null;
                }
                function getRemainingExpirationTime(fiber) { var updateExpirationTime = fiber.expirationTime; var childExpirationTime = fiber.childExpirationTime; return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime; }
                function resetChildExpirationTime(completedWork) {
                    if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
                        return;
                    }
                    var newChildExpirationTime = NoWork;
                    if ((completedWork.mode & ProfileMode) !== NoMode) {
                        var actualDuration = completedWork.actualDuration;
                        var treeBaseDuration = completedWork.selfBaseDuration;
                        var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
                        var child = completedWork.child;
                        while (child !== null) {
                            var childUpdateExpirationTime = child.expirationTime;
                            var childChildExpirationTime = child.childExpirationTime;
                            if (childUpdateExpirationTime > newChildExpirationTime) {
                                newChildExpirationTime = childUpdateExpirationTime;
                            }
                            if (childChildExpirationTime > newChildExpirationTime) {
                                newChildExpirationTime = childChildExpirationTime;
                            }
                            if (shouldBubbleActualDurations) {
                                actualDuration += child.actualDuration;
                            }
                            treeBaseDuration += child.treeBaseDuration;
                            child = child.sibling;
                        }
                        completedWork.actualDuration = actualDuration;
                        completedWork.treeBaseDuration = treeBaseDuration;
                    }
                    else {
                        var _child = completedWork.child;
                        while (_child !== null) {
                            var _childUpdateExpirationTime = _child.expirationTime;
                            var _childChildExpirationTime = _child.childExpirationTime;
                            if (_childUpdateExpirationTime > newChildExpirationTime) {
                                newChildExpirationTime = _childUpdateExpirationTime;
                            }
                            if (_childChildExpirationTime > newChildExpirationTime) {
                                newChildExpirationTime = _childChildExpirationTime;
                            }
                            _child = _child.sibling;
                        }
                    }
                    completedWork.childExpirationTime = newChildExpirationTime;
                }
                function commitRoot(root) { var renderPriorityLevel = getCurrentPriorityLevel(); runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel)); return null; }
                function commitRootImpl(root, renderPriorityLevel) {
                    do {
                        flushPassiveEffects();
                    } while (rootWithPendingPassiveEffects !== null);
                    flushRenderPhaseStrictModeWarningsInDEV();
                    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                        {
                            throw Error("Should not already be working.");
                        }
                    }
                    var finishedWork = root.finishedWork;
                    var expirationTime = root.finishedExpirationTime;
                    if (finishedWork === null) {
                        return null;
                    }
                    root.finishedWork = null;
                    root.finishedExpirationTime = NoWork;
                    if (!(finishedWork !== root.current)) {
                        {
                            throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
                        }
                    }
                    root.callbackNode = null;
                    root.callbackExpirationTime = NoWork;
                    root.callbackPriority = NoPriority;
                    root.nextKnownPendingLevel = NoWork;
                    startCommitTimer();
                    var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
                    markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);
                    if (root === workInProgressRoot) {
                        workInProgressRoot = null;
                        workInProgress = null;
                        renderExpirationTime$1 = NoWork;
                    }
                    var firstEffect;
                    if (finishedWork.effectTag > PerformedWork) {
                        if (finishedWork.lastEffect !== null) {
                            finishedWork.lastEffect.nextEffect = finishedWork;
                            firstEffect = finishedWork.firstEffect;
                        }
                        else {
                            firstEffect = finishedWork;
                        }
                    }
                    else {
                        firstEffect = finishedWork.firstEffect;
                    }
                    if (firstEffect !== null) {
                        var prevExecutionContext = executionContext;
                        executionContext |= CommitContext;
                        var prevInteractions = pushInteractions(root);
                        ReactCurrentOwner$2.current = null;
                        startCommitSnapshotEffectsTimer();
                        prepareForCommit(root.containerInfo);
                        nextEffect = firstEffect;
                        do {
                            {
                                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                                if (hasCaughtError()) {
                                    if (!(nextEffect !== null)) {
                                        {
                                            throw Error("Should be working on an effect.");
                                        }
                                    }
                                    var error = clearCaughtError();
                                    captureCommitPhaseError(nextEffect, error);
                                    nextEffect = nextEffect.nextEffect;
                                }
                            }
                        } while (nextEffect !== null);
                        stopCommitSnapshotEffectsTimer();
                        {
                            recordCommitTime();
                        }
                        startCommitHostEffectsTimer();
                        nextEffect = firstEffect;
                        do {
                            {
                                invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
                                if (hasCaughtError()) {
                                    if (!(nextEffect !== null)) {
                                        {
                                            throw Error("Should be working on an effect.");
                                        }
                                    }
                                    var _error = clearCaughtError();
                                    captureCommitPhaseError(nextEffect, _error);
                                    nextEffect = nextEffect.nextEffect;
                                }
                            }
                        } while (nextEffect !== null);
                        stopCommitHostEffectsTimer();
                        resetAfterCommit(root.containerInfo);
                        root.current = finishedWork;
                        startCommitLifeCyclesTimer();
                        nextEffect = firstEffect;
                        do {
                            {
                                invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);
                                if (hasCaughtError()) {
                                    if (!(nextEffect !== null)) {
                                        {
                                            throw Error("Should be working on an effect.");
                                        }
                                    }
                                    var _error2 = clearCaughtError();
                                    captureCommitPhaseError(nextEffect, _error2);
                                    nextEffect = nextEffect.nextEffect;
                                }
                            }
                        } while (nextEffect !== null);
                        stopCommitLifeCyclesTimer();
                        nextEffect = null;
                        requestPaint();
                        {
                            popInteractions(prevInteractions);
                        }
                        executionContext = prevExecutionContext;
                    }
                    else {
                        root.current = finishedWork;
                        startCommitSnapshotEffectsTimer();
                        stopCommitSnapshotEffectsTimer();
                        {
                            recordCommitTime();
                        }
                        startCommitHostEffectsTimer();
                        stopCommitHostEffectsTimer();
                        startCommitLifeCyclesTimer();
                        stopCommitLifeCyclesTimer();
                    }
                    stopCommitTimer();
                    var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
                    if (rootDoesHavePassiveEffects) {
                        rootDoesHavePassiveEffects = false;
                        rootWithPendingPassiveEffects = root;
                        pendingPassiveEffectsExpirationTime = expirationTime;
                        pendingPassiveEffectsRenderPriority = renderPriorityLevel;
                    }
                    else {
                        nextEffect = firstEffect;
                        while (nextEffect !== null) {
                            var nextNextEffect = nextEffect.nextEffect;
                            nextEffect.nextEffect = null;
                            nextEffect = nextNextEffect;
                        }
                    }
                    var remainingExpirationTime = root.firstPendingTime;
                    if (remainingExpirationTime !== NoWork) {
                        {
                            if (spawnedWorkDuringRender !== null) {
                                var expirationTimes = spawnedWorkDuringRender;
                                spawnedWorkDuringRender = null;
                                for (var i = 0; i < expirationTimes.length; i++) {
                                    scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
                                }
                            }
                            schedulePendingInteractions(root, remainingExpirationTime);
                        }
                    }
                    else {
                        legacyErrorBoundariesThatAlreadyFailed = null;
                    }
                    {
                        if (!rootDidHavePassiveEffects) {
                            finishPendingInteractions(root, expirationTime);
                        }
                    }
                    if (remainingExpirationTime === Sync) {
                        if (root === rootWithNestedUpdates) {
                            nestedUpdateCount++;
                        }
                        else {
                            nestedUpdateCount = 0;
                            rootWithNestedUpdates = root;
                        }
                    }
                    else {
                        nestedUpdateCount = 0;
                    }
                    onCommitRoot(finishedWork.stateNode, expirationTime);
                    ensureRootIsScheduled(root);
                    if (hasUncaughtError) {
                        hasUncaughtError = false;
                        var _error3 = firstUncaughtError;
                        firstUncaughtError = null;
                        throw _error3;
                    }
                    if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
                        return null;
                    }
                    flushSyncCallbackQueue();
                    return null;
                }
                function commitBeforeMutationEffects() {
                    while (nextEffect !== null) {
                        var effectTag = nextEffect.effectTag;
                        if ((effectTag & Snapshot) !== NoEffect) {
                            setCurrentFiber(nextEffect);
                            recordEffect();
                            var current = nextEffect.alternate;
                            commitBeforeMutationLifeCycles(current, nextEffect);
                            resetCurrentFiber();
                        }
                        if ((effectTag & Passive) !== NoEffect) {
                            if (!rootDoesHavePassiveEffects) {
                                rootDoesHavePassiveEffects = true;
                                scheduleCallback(NormalPriority, function () { flushPassiveEffects(); return null; });
                            }
                        }
                        nextEffect = nextEffect.nextEffect;
                    }
                }
                function commitMutationEffects(root, renderPriorityLevel) {
                    while (nextEffect !== null) {
                        setCurrentFiber(nextEffect);
                        var effectTag = nextEffect.effectTag;
                        if (effectTag & ContentReset) {
                            commitResetTextContent(nextEffect);
                        }
                        if (effectTag & Ref) {
                            var current = nextEffect.alternate;
                            if (current !== null) {
                                commitDetachRef(current);
                            }
                        }
                        var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
                        switch (primaryEffectTag) {
                            case Placement: {
                                commitPlacement(nextEffect);
                                nextEffect.effectTag &= ~Placement;
                                break;
                            }
                            case PlacementAndUpdate: {
                                commitPlacement(nextEffect);
                                nextEffect.effectTag &= ~Placement;
                                var _current = nextEffect.alternate;
                                commitWork(_current, nextEffect);
                                break;
                            }
                            case Hydrating: {
                                nextEffect.effectTag &= ~Hydrating;
                                break;
                            }
                            case HydratingAndUpdate: {
                                nextEffect.effectTag &= ~Hydrating;
                                var _current2 = nextEffect.alternate;
                                commitWork(_current2, nextEffect);
                                break;
                            }
                            case Update: {
                                var _current3 = nextEffect.alternate;
                                commitWork(_current3, nextEffect);
                                break;
                            }
                            case Deletion: {
                                commitDeletion(root, nextEffect, renderPriorityLevel);
                                break;
                            }
                        }
                        recordEffect();
                        resetCurrentFiber();
                        nextEffect = nextEffect.nextEffect;
                    }
                }
                function commitLayoutEffects(root, committedExpirationTime) {
                    while (nextEffect !== null) {
                        setCurrentFiber(nextEffect);
                        var effectTag = nextEffect.effectTag;
                        if (effectTag & (Update | Callback)) {
                            recordEffect();
                            var current = nextEffect.alternate;
                            commitLifeCycles(root, current, nextEffect);
                        }
                        if (effectTag & Ref) {
                            recordEffect();
                            commitAttachRef(nextEffect);
                        }
                        resetCurrentFiber();
                        nextEffect = nextEffect.nextEffect;
                    }
                }
                function flushPassiveEffects() { if (pendingPassiveEffectsRenderPriority !== NoPriority) {
                    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
                    pendingPassiveEffectsRenderPriority = NoPriority;
                    return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
                } }
                function flushPassiveEffectsImpl() {
                    if (rootWithPendingPassiveEffects === null) {
                        return false;
                    }
                    var root = rootWithPendingPassiveEffects;
                    var expirationTime = pendingPassiveEffectsExpirationTime;
                    rootWithPendingPassiveEffects = null;
                    pendingPassiveEffectsExpirationTime = NoWork;
                    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                        {
                            throw Error("Cannot flush passive effects while already rendering.");
                        }
                    }
                    var prevExecutionContext = executionContext;
                    executionContext |= CommitContext;
                    var prevInteractions = pushInteractions(root);
                    {
                        var _effect2 = root.current.firstEffect;
                        while (_effect2 !== null) {
                            {
                                setCurrentFiber(_effect2);
                                invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
                                if (hasCaughtError()) {
                                    if (!(_effect2 !== null)) {
                                        {
                                            throw Error("Should be working on an effect.");
                                        }
                                    }
                                    var _error5 = clearCaughtError();
                                    captureCommitPhaseError(_effect2, _error5);
                                }
                                resetCurrentFiber();
                            }
                            var nextNextEffect = _effect2.nextEffect;
                            _effect2.nextEffect = null;
                            _effect2 = nextNextEffect;
                        }
                    }
                    {
                        popInteractions(prevInteractions);
                        finishPendingInteractions(root, expirationTime);
                    }
                    executionContext = prevExecutionContext;
                    flushSyncCallbackQueue();
                    nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
                    return true;
                }
                function isAlreadyFailedLegacyErrorBoundary(instance) { return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance); }
                function markLegacyErrorBoundaryAsFailed(instance) { if (legacyErrorBoundariesThatAlreadyFailed === null) {
                    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
                }
                else {
                    legacyErrorBoundariesThatAlreadyFailed.add(instance);
                } }
                function prepareToThrowUncaughtError(error) { if (!hasUncaughtError) {
                    hasUncaughtError = true;
                    firstUncaughtError = error;
                } }
                var onUncaughtError = prepareToThrowUncaughtError;
                function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) { var errorInfo = createCapturedValue(error, sourceFiber); var update = createRootErrorUpdate(rootFiber, errorInfo, Sync); enqueueUpdate(rootFiber, update); var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync); if (root !== null) {
                    ensureRootIsScheduled(root);
                    schedulePendingInteractions(root, Sync);
                } }
                function captureCommitPhaseError(sourceFiber, error) {
                    if (sourceFiber.tag === HostRoot) {
                        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
                        return;
                    }
                    var fiber = sourceFiber.return;
                    while (fiber !== null) {
                        if (fiber.tag === HostRoot) {
                            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
                            return;
                        }
                        else if (fiber.tag === ClassComponent) {
                            var ctor = fiber.type;
                            var instance = fiber.stateNode;
                            if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                                var errorInfo = createCapturedValue(error, sourceFiber);
                                var update = createClassErrorUpdate(fiber, errorInfo, Sync);
                                enqueueUpdate(fiber, update);
                                var root = markUpdateTimeFromFiberToRoot(fiber, Sync);
                                if (root !== null) {
                                    ensureRootIsScheduled(root);
                                    schedulePendingInteractions(root, Sync);
                                }
                                return;
                            }
                        }
                        fiber = fiber.return;
                    }
                }
                function pingSuspendedRoot(root, thenable, suspendedTime) {
                    var pingCache = root.pingCache;
                    if (pingCache !== null) {
                        pingCache.delete(thenable);
                    }
                    if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
                        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                            prepareFreshStack(root, renderExpirationTime$1);
                        }
                        else {
                            workInProgressRootHasPendingPing = true;
                        }
                        return;
                    }
                    if (!isRootSuspendedAtTime(root, suspendedTime)) {
                        return;
                    }
                    var lastPingedTime = root.lastPingedTime;
                    if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
                        return;
                    }
                    root.lastPingedTime = suspendedTime;
                    ensureRootIsScheduled(root);
                    schedulePendingInteractions(root, suspendedTime);
                }
                function retryTimedOutBoundary(boundaryFiber, retryTime) {
                    if (retryTime === NoWork) {
                        var suspenseConfig = null;
                        var currentTime = requestCurrentTimeForUpdate();
                        retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
                    }
                    var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
                    if (root !== null) {
                        ensureRootIsScheduled(root);
                        schedulePendingInteractions(root, retryTime);
                    }
                }
                function resolveRetryThenable(boundaryFiber, thenable) {
                    var retryTime = NoWork;
                    var retryCache;
                    {
                        retryCache = boundaryFiber.stateNode;
                    }
                    if (retryCache !== null) {
                        retryCache.delete(thenable);
                    }
                    retryTimedOutBoundary(boundaryFiber, retryTime);
                }
                function jnd(timeElapsed) { return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960; }
                function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
                    var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
                    if (busyMinDurationMs <= 0) {
                        return 0;
                    }
                    var busyDelayMs = suspenseConfig.busyDelayMs | 0;
                    var currentTimeMs = now();
                    var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
                    var timeElapsed = currentTimeMs - eventTimeMs;
                    if (timeElapsed <= busyDelayMs) {
                        return 0;
                    }
                    var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
                    return msUntilTimeout;
                }
                function checkForNestedUpdates() { if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                    nestedUpdateCount = 0;
                    rootWithNestedUpdates = null;
                    {
                        {
                            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                        }
                    }
                } {
                    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                        nestedPassiveUpdateCount = 0;
                        error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
                    }
                } }
                function flushRenderPhaseStrictModeWarningsInDEV() { {
                    ReactStrictModeWarnings.flushLegacyContextWarning();
                    {
                        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
                    }
                } }
                function stopFinishedWorkLoopTimer() { var didCompleteRoot = true; stopWorkLoopTimer(interruptedBy, didCompleteRoot); interruptedBy = null; }
                function stopInterruptedWorkLoopTimer() {
                    var didCompleteRoot = false;
                    stopWorkLoopTimer(interruptedBy, didCompleteRoot);
                    interruptedBy = null;
                }
                function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) { if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
                    interruptedBy = fiberThatReceivedUpdate;
                } }
                var didWarnStateUpdateForUnmountedComponent = null;
                function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
                    {
                        var tag = fiber.tag;
                        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                            return;
                        }
                        var componentName = getComponentName(fiber.type) || 'ReactComponent';
                        if (didWarnStateUpdateForUnmountedComponent !== null) {
                            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                                return;
                            }
                            didWarnStateUpdateForUnmountedComponent.add(componentName);
                        }
                        else {
                            didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
                        }
                        error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
                    }
                }
                var beginWork$1;
                {
                    var dummyFiber = null;
                    beginWork$1 = function beginWork$1(current, unitOfWork, expirationTime) {
                        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
                        try {
                            return beginWork(current, unitOfWork, expirationTime);
                        }
                        catch (originalError) {
                            if (originalError !== null && (typeof originalError === 'undefined' ? 'undefined' : _typeof(originalError)) === 'object' && typeof originalError.then === 'function') {
                                throw originalError;
                            }
                            resetContextDependencies();
                            resetHooksAfterThrow();
                            unwindInterruptedWork(unitOfWork);
                            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                            if (unitOfWork.mode & ProfileMode) {
                                startProfilerTimer(unitOfWork);
                            }
                            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);
                            if (hasCaughtError()) {
                                var replayError = clearCaughtError();
                                throw replayError;
                            }
                            else {
                                throw originalError;
                            }
                        }
                    };
                }
                var didWarnAboutUpdateInRender = false;
                var didWarnAboutUpdateInGetChildContext = false;
                function warnAboutRenderPhaseUpdatesInDEV(fiber) { {
                    if ((executionContext & RenderContext) !== NoContext) {
                        switch (fiber.tag) {
                            case FunctionComponent:
                            case ForwardRef:
                            case SimpleMemoComponent: {
                                error('Cannot update a component from inside the function body of a ' + 'different component.');
                                break;
                            }
                            case ClassComponent: {
                                switch (phase) {
                                    case 'getChildContext':
                                        if (didWarnAboutUpdateInGetChildContext) {
                                            return;
                                        }
                                        error('setState(...): Cannot call setState() inside getChildContext()');
                                        didWarnAboutUpdateInGetChildContext = true;
                                        break;
                                    case 'render':
                                        if (didWarnAboutUpdateInRender) {
                                            return;
                                        }
                                        error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');
                                        didWarnAboutUpdateInRender = true;
                                        break;
                                }
                                break;
                            }
                        }
                    }
                } }
                var IsThisRendererActing = { current: false };
                function warnIfNotScopedWithMatchingAct(fiber) { {
                    if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                        error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
                    }
                } }
                function warnIfNotCurrentlyActingEffectsInDEV(fiber) { {
                    if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                        error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
                    }
                } }
                function warnIfNotCurrentlyActingUpdatesInDEV(fiber) { {
                    if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
                    }
                } }
                var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
                var didWarnAboutUnmockedScheduler = false;
                function warnIfUnmockedScheduler(fiber) { {
                    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
                        if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                            didWarnAboutUnmockedScheduler = true;
                            error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
                        }
                    }
                } }
                function computeThreadID(root, expirationTime) {
                    return expirationTime * 1000 + root.interactionThreadID;
                }
                function markSpawnedWork(expirationTime) { if (spawnedWorkDuringRender === null) {
                    spawnedWorkDuringRender = [expirationTime];
                }
                else {
                    spawnedWorkDuringRender.push(expirationTime);
                } }
                function scheduleInteractions(root, expirationTime, interactions) {
                    if (interactions.size > 0) {
                        var pendingInteractionMap = root.pendingInteractionMap;
                        var pendingInteractions = pendingInteractionMap.get(expirationTime);
                        if (pendingInteractions != null) {
                            interactions.forEach(function (interaction) {
                                if (!pendingInteractions.has(interaction)) {
                                    interaction.__count++;
                                }
                                pendingInteractions.add(interaction);
                            });
                        }
                        else {
                            pendingInteractionMap.set(expirationTime, new Set(interactions));
                            interactions.forEach(function (interaction) { interaction.__count++; });
                        }
                        var subscriber = tracing.__subscriberRef.current;
                        if (subscriber !== null) {
                            var threadID = computeThreadID(root, expirationTime);
                            subscriber.onWorkScheduled(interactions, threadID);
                        }
                    }
                }
                function schedulePendingInteractions(root, expirationTime) { scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current); }
                function startWorkOnPendingInteractions(root, expirationTime) {
                    var interactions = new Set();
                    root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) { if (scheduledExpirationTime >= expirationTime) {
                        scheduledInteractions.forEach(function (interaction) { return interactions.add(interaction); });
                    } });
                    root.memoizedInteractions = interactions;
                    if (interactions.size > 0) {
                        var subscriber = tracing.__subscriberRef.current;
                        if (subscriber !== null) {
                            var threadID = computeThreadID(root, expirationTime);
                            try {
                                subscriber.onWorkStarted(interactions, threadID);
                            }
                            catch (error) {
                                scheduleCallback(ImmediatePriority, function () { throw error; });
                            }
                        }
                    }
                }
                function finishPendingInteractions(root, committedExpirationTime) {
                    var earliestRemainingTimeAfterCommit = root.firstPendingTime;
                    var subscriber;
                    try {
                        subscriber = tracing.__subscriberRef.current;
                        if (subscriber !== null && root.memoizedInteractions.size > 0) {
                            var threadID = computeThreadID(root, committedExpirationTime);
                            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
                        }
                    }
                    catch (error) {
                        scheduleCallback(ImmediatePriority, function () { throw error; });
                    }
                    finally {
                        var pendingInteractionMap = root.pendingInteractionMap;
                        pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
                            if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                                pendingInteractionMap.delete(scheduledExpirationTime);
                                scheduledInteractions.forEach(function (interaction) {
                                    interaction.__count--;
                                    if (subscriber !== null && interaction.__count === 0) {
                                        try {
                                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                                        }
                                        catch (error) {
                                            scheduleCallback(ImmediatePriority, function () { throw error; });
                                        }
                                    }
                                });
                            }
                        });
                    }
                }
                var onScheduleFiberRoot = null;
                var onCommitFiberRoot = null;
                var onCommitFiberUnmount = null;
                var hasLoggedError = false;
                var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
                function injectInternals(internals) {
                    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                        return false;
                    }
                    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
                    if (hook.isDisabled) {
                        return true;
                    }
                    if (!hook.supportsFiber) {
                        {
                            error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
                        }
                        return true;
                    }
                    try {
                        var rendererID = hook.inject(internals);
                        if (true) {
                            if (typeof hook.onScheduleFiberRoot === 'function') {
                                onScheduleFiberRoot = function onScheduleFiberRoot(root, children) { try {
                                    hook.onScheduleFiberRoot(rendererID, root, children);
                                }
                                catch (err) {
                                    if (true && !hasLoggedError) {
                                        hasLoggedError = true;
                                        error('React instrumentation encountered an error: %s', err);
                                    }
                                } };
                            }
                        }
                        onCommitFiberRoot = function onCommitFiberRoot(root, expirationTime) { try {
                            var didError = (root.current.effectTag & DidCapture) === DidCapture;
                            if (enableProfilerTimer) {
                                var currentTime = getCurrentTime();
                                var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                                hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
                            }
                            else {
                                hook.onCommitFiberRoot(rendererID, root, undefined, didError);
                            }
                        }
                        catch (err) {
                            if (true) {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error('React instrumentation encountered an error: %s', err);
                                }
                            }
                        } };
                        onCommitFiberUnmount = function onCommitFiberUnmount(fiber) { try {
                            hook.onCommitFiberUnmount(rendererID, fiber);
                        }
                        catch (err) {
                            if (true) {
                                if (!hasLoggedError) {
                                    hasLoggedError = true;
                                    error('React instrumentation encountered an error: %s', err);
                                }
                            }
                        } };
                    }
                    catch (err) {
                        {
                            error('React instrumentation encountered an error: %s.', err);
                        }
                    }
                    return true;
                }
                function onScheduleRoot(root, children) { if (typeof onScheduleFiberRoot === 'function') {
                    onScheduleFiberRoot(root, children);
                } }
                function onCommitRoot(root, expirationTime) { if (typeof onCommitFiberRoot === 'function') {
                    onCommitFiberRoot(root, expirationTime);
                } }
                function onCommitUnmount(fiber) { if (typeof onCommitFiberUnmount === 'function') {
                    onCommitFiberUnmount(fiber);
                } }
                var hasBadMapPolyfill;
                {
                    hasBadMapPolyfill = false;
                    try {
                        var nonExtensibleObject = Object.preventExtensions({});
                        var testMap = new Map([[nonExtensibleObject, null]]);
                        var testSet = new Set([nonExtensibleObject]);
                        testMap.set(0, 0);
                        testSet.add(0);
                    }
                    catch (e) {
                        hasBadMapPolyfill = true;
                    }
                }
                var debugCounter = 1;
                function FiberNode(tag, pendingProps, key, mode) {
                    this.tag = tag;
                    this.key = key;
                    this.elementType = null;
                    this.type = null;
                    this.stateNode = null;
                    this.return = null;
                    this.child = null;
                    this.sibling = null;
                    this.index = 0;
                    this.ref = null;
                    this.pendingProps = pendingProps;
                    this.memoizedProps = null;
                    this.updateQueue = null;
                    this.memoizedState = null;
                    this.dependencies = null;
                    this.mode = mode;
                    this.effectTag = NoEffect;
                    this.nextEffect = null;
                    this.firstEffect = null;
                    this.lastEffect = null;
                    this.expirationTime = NoWork;
                    this.childExpirationTime = NoWork;
                    this.alternate = null;
                    {
                        this.actualDuration = Number.NaN;
                        this.actualStartTime = Number.NaN;
                        this.selfBaseDuration = Number.NaN;
                        this.treeBaseDuration = Number.NaN;
                        this.actualDuration = 0;
                        this.actualStartTime = -1;
                        this.selfBaseDuration = 0;
                        this.treeBaseDuration = 0;
                    }
                    {
                        this._debugID = debugCounter++;
                        this._debugIsCurrentlyTiming = false;
                    }
                    {
                        this._debugSource = null;
                        this._debugOwner = null;
                        this._debugNeedsRemount = false;
                        this._debugHookTypes = null;
                        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
                            Object.preventExtensions(this);
                        }
                    }
                }
                var createFiber = function createFiber(tag, pendingProps, key, mode) {
                    return new FiberNode(tag, pendingProps, key, mode);
                };
                function shouldConstruct(Component) { var prototype = Component.prototype; return !!(prototype && prototype.isReactComponent); }
                function isSimpleFunctionComponent(type) { return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined; }
                function resolveLazyComponentTag(Component) { if (typeof Component === 'function') {
                    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
                }
                else if (Component !== undefined && Component !== null) {
                    var $$typeof = Component.$$typeof;
                    if ($$typeof === REACT_FORWARD_REF_TYPE) {
                        return ForwardRef;
                    }
                    if ($$typeof === REACT_MEMO_TYPE) {
                        return MemoComponent;
                    }
                } return IndeterminateComponent; }
                function createWorkInProgress(current, pendingProps) {
                    var workInProgress = current.alternate;
                    if (workInProgress === null) {
                        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
                        workInProgress.elementType = current.elementType;
                        workInProgress.type = current.type;
                        workInProgress.stateNode = current.stateNode;
                        {
                            {
                                workInProgress._debugID = current._debugID;
                            }
                            workInProgress._debugSource = current._debugSource;
                            workInProgress._debugOwner = current._debugOwner;
                            workInProgress._debugHookTypes = current._debugHookTypes;
                        }
                        workInProgress.alternate = current;
                        current.alternate = workInProgress;
                    }
                    else {
                        workInProgress.pendingProps = pendingProps;
                        workInProgress.effectTag = NoEffect;
                        workInProgress.nextEffect = null;
                        workInProgress.firstEffect = null;
                        workInProgress.lastEffect = null;
                        {
                            workInProgress.actualDuration = 0;
                            workInProgress.actualStartTime = -1;
                        }
                    }
                    workInProgress.childExpirationTime = current.childExpirationTime;
                    workInProgress.expirationTime = current.expirationTime;
                    workInProgress.child = current.child;
                    workInProgress.memoizedProps = current.memoizedProps;
                    workInProgress.memoizedState = current.memoizedState;
                    workInProgress.updateQueue = current.updateQueue;
                    var currentDependencies = current.dependencies;
                    workInProgress.dependencies = currentDependencies === null ? null : { expirationTime: currentDependencies.expirationTime, firstContext: currentDependencies.firstContext, responders: currentDependencies.responders };
                    workInProgress.sibling = current.sibling;
                    workInProgress.index = current.index;
                    workInProgress.ref = current.ref;
                    {
                        workInProgress.selfBaseDuration = current.selfBaseDuration;
                        workInProgress.treeBaseDuration = current.treeBaseDuration;
                    }
                    {
                        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
                        switch (workInProgress.tag) {
                            case IndeterminateComponent:
                            case FunctionComponent:
                            case SimpleMemoComponent:
                                workInProgress.type = resolveFunctionForHotReloading(current.type);
                                break;
                            case ClassComponent:
                                workInProgress.type = resolveClassForHotReloading(current.type);
                                break;
                            case ForwardRef:
                                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                                break;
                        }
                    }
                    return workInProgress;
                }
                function resetWorkInProgress(workInProgress, renderExpirationTime) {
                    workInProgress.effectTag &= Placement;
                    workInProgress.nextEffect = null;
                    workInProgress.firstEffect = null;
                    workInProgress.lastEffect = null;
                    var current = workInProgress.alternate;
                    if (current === null) {
                        workInProgress.childExpirationTime = NoWork;
                        workInProgress.expirationTime = renderExpirationTime;
                        workInProgress.child = null;
                        workInProgress.memoizedProps = null;
                        workInProgress.memoizedState = null;
                        workInProgress.updateQueue = null;
                        workInProgress.dependencies = null;
                        {
                            workInProgress.selfBaseDuration = 0;
                            workInProgress.treeBaseDuration = 0;
                        }
                    }
                    else {
                        workInProgress.childExpirationTime = current.childExpirationTime;
                        workInProgress.expirationTime = current.expirationTime;
                        workInProgress.child = current.child;
                        workInProgress.memoizedProps = current.memoizedProps;
                        workInProgress.memoizedState = current.memoizedState;
                        workInProgress.updateQueue = current.updateQueue;
                        var currentDependencies = current.dependencies;
                        workInProgress.dependencies = currentDependencies === null ? null : { expirationTime: currentDependencies.expirationTime, firstContext: currentDependencies.firstContext, responders: currentDependencies.responders };
                        {
                            workInProgress.selfBaseDuration = current.selfBaseDuration;
                            workInProgress.treeBaseDuration = current.treeBaseDuration;
                        }
                    }
                    return workInProgress;
                }
                function createHostRootFiber(tag) {
                    var mode;
                    if (tag === ConcurrentRoot) {
                        mode = ConcurrentMode | BlockingMode | StrictMode;
                    }
                    else if (tag === BlockingRoot) {
                        mode = BlockingMode | StrictMode;
                    }
                    else {
                        mode = NoMode;
                    }
                    if (isDevToolsPresent) {
                        mode |= ProfileMode;
                    }
                    return createFiber(HostRoot, null, null, mode);
                }
                function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
                    var fiber;
                    var fiberTag = IndeterminateComponent;
                    var resolvedType = type;
                    if (typeof type === 'function') {
                        if (shouldConstruct(type)) {
                            fiberTag = ClassComponent;
                            {
                                resolvedType = resolveClassForHotReloading(resolvedType);
                            }
                        }
                        else {
                            {
                                resolvedType = resolveFunctionForHotReloading(resolvedType);
                            }
                        }
                    }
                    else if (typeof type === 'string') {
                        fiberTag = HostComponent;
                    }
                    else {
                        getTag: switch (type) {
                            case REACT_FRAGMENT_TYPE: return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
                            case REACT_CONCURRENT_MODE_TYPE:
                                fiberTag = Mode;
                                mode |= ConcurrentMode | BlockingMode | StrictMode;
                                break;
                            case REACT_STRICT_MODE_TYPE:
                                fiberTag = Mode;
                                mode |= StrictMode;
                                break;
                            case REACT_PROFILER_TYPE: return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
                            case REACT_SUSPENSE_TYPE: return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
                            case REACT_SUSPENSE_LIST_TYPE: return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
                            default: {
                                if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null) {
                                    switch (type.$$typeof) {
                                        case REACT_PROVIDER_TYPE:
                                            fiberTag = ContextProvider;
                                            break getTag;
                                        case REACT_CONTEXT_TYPE:
                                            fiberTag = ContextConsumer;
                                            break getTag;
                                        case REACT_FORWARD_REF_TYPE:
                                            fiberTag = ForwardRef;
                                            {
                                                resolvedType = resolveForwardRefForHotReloading(resolvedType);
                                            }
                                            break getTag;
                                        case REACT_MEMO_TYPE:
                                            fiberTag = MemoComponent;
                                            break getTag;
                                        case REACT_LAZY_TYPE:
                                            fiberTag = LazyComponent;
                                            resolvedType = null;
                                            break getTag;
                                        case REACT_BLOCK_TYPE:
                                            fiberTag = Block;
                                            break getTag;
                                    }
                                }
                                var info = '';
                                {
                                    if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
                                        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                                    }
                                    var ownerName = owner ? getComponentName(owner.type) : null;
                                    if (ownerName) {
                                        info += '\n\nCheck the render method of `' + ownerName + '`.';
                                    }
                                }
                                {
                                    {
                                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type)) + "." + info);
                                    }
                                }
                            }
                        }
                    }
                    fiber = createFiber(fiberTag, pendingProps, key, mode);
                    fiber.elementType = type;
                    fiber.type = resolvedType;
                    fiber.expirationTime = expirationTime;
                    return fiber;
                }
                function createFiberFromElement(element, mode, expirationTime) { var owner = null; {
                    owner = element._owner;
                } var type = element.type; var key = element.key; var pendingProps = element.props; var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime); {
                    fiber._debugSource = element._source;
                    fiber._debugOwner = element._owner;
                } return fiber; }
                function createFiberFromFragment(elements, mode, expirationTime, key) { var fiber = createFiber(Fragment, elements, key, mode); fiber.expirationTime = expirationTime; return fiber; }
                function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
                    {
                        if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
                            error('Profiler must specify an "id" string and "onRender" function as props');
                        }
                    }
                    var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
                    fiber.elementType = REACT_PROFILER_TYPE;
                    fiber.type = REACT_PROFILER_TYPE;
                    fiber.expirationTime = expirationTime;
                    return fiber;
                }
                function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
                    var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
                    fiber.type = REACT_SUSPENSE_TYPE;
                    fiber.elementType = REACT_SUSPENSE_TYPE;
                    fiber.expirationTime = expirationTime;
                    return fiber;
                }
                function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
                    var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
                    {
                        fiber.type = REACT_SUSPENSE_LIST_TYPE;
                    }
                    fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
                    fiber.expirationTime = expirationTime;
                    return fiber;
                }
                function createFiberFromText(content, mode, expirationTime) { var fiber = createFiber(HostText, content, null, mode); fiber.expirationTime = expirationTime; return fiber; }
                function createFiberFromHostInstanceForDeletion() {
                    var fiber = createFiber(HostComponent, null, null, NoMode);
                    fiber.elementType = 'DELETED';
                    fiber.type = 'DELETED';
                    return fiber;
                }
                function createFiberFromPortal(portal, mode, expirationTime) {
                    var pendingProps = portal.children !== null ? portal.children : [];
                    var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
                    fiber.expirationTime = expirationTime;
                    fiber.stateNode = { containerInfo: portal.containerInfo, pendingChildren: null,
                        implementation: portal.implementation };
                    return fiber;
                }
                function assignFiberPropertiesInDEV(target, source) {
                    if (target === null) {
                        target = createFiber(IndeterminateComponent, null, null, NoMode);
                    }
                    target.tag = source.tag;
                    target.key = source.key;
                    target.elementType = source.elementType;
                    target.type = source.type;
                    target.stateNode = source.stateNode;
                    target.return = source.return;
                    target.child = source.child;
                    target.sibling = source.sibling;
                    target.index = source.index;
                    target.ref = source.ref;
                    target.pendingProps = source.pendingProps;
                    target.memoizedProps = source.memoizedProps;
                    target.updateQueue = source.updateQueue;
                    target.memoizedState = source.memoizedState;
                    target.dependencies = source.dependencies;
                    target.mode = source.mode;
                    target.effectTag = source.effectTag;
                    target.nextEffect = source.nextEffect;
                    target.firstEffect = source.firstEffect;
                    target.lastEffect = source.lastEffect;
                    target.expirationTime = source.expirationTime;
                    target.childExpirationTime = source.childExpirationTime;
                    target.alternate = source.alternate;
                    {
                        target.actualDuration = source.actualDuration;
                        target.actualStartTime = source.actualStartTime;
                        target.selfBaseDuration = source.selfBaseDuration;
                        target.treeBaseDuration = source.treeBaseDuration;
                    }
                    {
                        target._debugID = source._debugID;
                    }
                    target._debugSource = source._debugSource;
                    target._debugOwner = source._debugOwner;
                    target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
                    target._debugNeedsRemount = source._debugNeedsRemount;
                    target._debugHookTypes = source._debugHookTypes;
                    return target;
                }
                function FiberRootNode(containerInfo, tag, hydrate) { this.tag = tag; this.current = null; this.containerInfo = containerInfo; this.pendingChildren = null; this.pingCache = null; this.finishedExpirationTime = NoWork; this.finishedWork = null; this.timeoutHandle = noTimeout; this.context = null; this.pendingContext = null; this.hydrate = hydrate; this.callbackNode = null; this.callbackPriority = NoPriority; this.firstPendingTime = NoWork; this.firstSuspendedTime = NoWork; this.lastSuspendedTime = NoWork; this.nextKnownPendingLevel = NoWork; this.lastPingedTime = NoWork; this.lastExpiredTime = NoWork; {
                    this.interactionThreadID = tracing.unstable_getThreadID();
                    this.memoizedInteractions = new Set();
                    this.pendingInteractionMap = new Map();
                } }
                function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
                    var root = new FiberRootNode(containerInfo, tag, hydrate);
                    var uninitializedFiber = createHostRootFiber(tag);
                    root.current = uninitializedFiber;
                    uninitializedFiber.stateNode = root;
                    initializeUpdateQueue(uninitializedFiber);
                    return root;
                }
                function isRootSuspendedAtTime(root, expirationTime) { var firstSuspendedTime = root.firstSuspendedTime; var lastSuspendedTime = root.lastSuspendedTime; return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime; }
                function markRootSuspendedAtTime(root, expirationTime) { var firstSuspendedTime = root.firstSuspendedTime; var lastSuspendedTime = root.lastSuspendedTime; if (firstSuspendedTime < expirationTime) {
                    root.firstSuspendedTime = expirationTime;
                } if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
                    root.lastSuspendedTime = expirationTime;
                } if (expirationTime <= root.lastPingedTime) {
                    root.lastPingedTime = NoWork;
                } if (expirationTime <= root.lastExpiredTime) {
                    root.lastExpiredTime = NoWork;
                } }
                function markRootUpdatedAtTime(root, expirationTime) {
                    var firstPendingTime = root.firstPendingTime;
                    if (expirationTime > firstPendingTime) {
                        root.firstPendingTime = expirationTime;
                    }
                    var firstSuspendedTime = root.firstSuspendedTime;
                    if (firstSuspendedTime !== NoWork) {
                        if (expirationTime >= firstSuspendedTime) {
                            root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
                        }
                        else if (expirationTime >= root.lastSuspendedTime) {
                            root.lastSuspendedTime = expirationTime + 1;
                        }
                        if (expirationTime > root.nextKnownPendingLevel) {
                            root.nextKnownPendingLevel = expirationTime;
                        }
                    }
                }
                function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
                    root.firstPendingTime = remainingExpirationTime;
                    if (finishedExpirationTime <= root.lastSuspendedTime) {
                        root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
                    }
                    else if (finishedExpirationTime <= root.firstSuspendedTime) {
                        root.firstSuspendedTime = finishedExpirationTime - 1;
                    }
                    if (finishedExpirationTime <= root.lastPingedTime) {
                        root.lastPingedTime = NoWork;
                    }
                    if (finishedExpirationTime <= root.lastExpiredTime) {
                        root.lastExpiredTime = NoWork;
                    }
                }
                function markRootExpiredAtTime(root, expirationTime) { var lastExpiredTime = root.lastExpiredTime; if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
                    root.lastExpiredTime = expirationTime;
                } }
                var didWarnAboutNestedUpdates;
                var didWarnAboutFindNodeInStrictMode;
                {
                    didWarnAboutNestedUpdates = false;
                    didWarnAboutFindNodeInStrictMode = {};
                }
                function getContextForSubtree(parentComponent) { if (!parentComponent) {
                    return emptyContextObject;
                } var fiber = get(parentComponent); var parentContext = findCurrentUnmaskedContext(fiber); if (fiber.tag === ClassComponent) {
                    var Component = fiber.type;
                    if (isContextProvider(Component)) {
                        return processChildContext(fiber, Component, parentContext);
                    }
                } return parentContext; }
                function findHostInstanceWithWarning(component, methodName) { {
                    var fiber = get(component);
                    if (fiber === undefined) {
                        if (typeof component.render === 'function') {
                            {
                                {
                                    throw Error("Unable to find node on an unmounted component.");
                                }
                            }
                        }
                        else {
                            {
                                {
                                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                                }
                            }
                        }
                    }
                    var hostFiber = findCurrentHostFiber(fiber);
                    if (hostFiber === null) {
                        return null;
                    }
                    if (hostFiber.mode & StrictMode) {
                        var componentName = getComponentName(fiber.type) || 'Component';
                        if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                            didWarnAboutFindNodeInStrictMode[componentName] = true;
                            if (fiber.mode & StrictMode) {
                                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                            }
                            else {
                                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                            }
                        }
                    }
                    return hostFiber.stateNode;
                } }
                function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) { return createFiberRoot(containerInfo, tag, hydrate); }
                function updateContainer(element, container, parentComponent, callback) {
                    {
                        onScheduleRoot(container, element);
                    }
                    var current$1 = container.current;
                    var currentTime = requestCurrentTimeForUpdate();
                    {
                        if ('undefined' !== typeof jest) {
                            warnIfUnmockedScheduler(current$1);
                            warnIfNotScopedWithMatchingAct(current$1);
                        }
                    }
                    var suspenseConfig = requestCurrentSuspenseConfig();
                    var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
                    var context = getContextForSubtree(parentComponent);
                    if (container.context === null) {
                        container.context = context;
                    }
                    else {
                        container.pendingContext = context;
                    }
                    {
                        if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
                            didWarnAboutNestedUpdates = true;
                            error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
                        }
                    }
                    var update = createUpdate(expirationTime, suspenseConfig);
                    update.payload = { element: element };
                    callback = callback === undefined ? null : callback;
                    if (callback !== null) {
                        {
                            if (typeof callback !== 'function') {
                                error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
                            }
                        }
                        update.callback = callback;
                    }
                    enqueueUpdate(current$1, update);
                    scheduleWork(current$1, expirationTime);
                    return expirationTime;
                }
                function getPublicRootInstance(container) { var containerFiber = container.current; if (!containerFiber.child) {
                    return null;
                } switch (containerFiber.child.tag) {
                    case HostComponent: return getPublicInstance(containerFiber.child.stateNode);
                    default: return containerFiber.child.stateNode;
                } }
                function markRetryTimeImpl(fiber, retryTime) { var suspenseState = fiber.memoizedState; if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    if (suspenseState.retryTime < retryTime) {
                        suspenseState.retryTime = retryTime;
                    }
                } }
                function markRetryTimeIfNotHydrated(fiber, retryTime) { markRetryTimeImpl(fiber, retryTime); var alternate = fiber.alternate; if (alternate) {
                    markRetryTimeImpl(alternate, retryTime);
                } }
                function attemptUserBlockingHydration$1(fiber) {
                    if (fiber.tag !== SuspenseComponent) {
                        return;
                    }
                    var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
                    scheduleWork(fiber, expTime);
                    markRetryTimeIfNotHydrated(fiber, expTime);
                }
                function attemptContinuousHydration$1(fiber) {
                    if (fiber.tag !== SuspenseComponent) {
                        return;
                    }
                    scheduleWork(fiber, ContinuousHydration);
                    markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
                }
                function attemptHydrationAtCurrentPriority$1(fiber) {
                    if (fiber.tag !== SuspenseComponent) {
                        return;
                    }
                    var currentTime = requestCurrentTimeForUpdate();
                    var expTime = computeExpirationForFiber(currentTime, fiber, null);
                    scheduleWork(fiber, expTime);
                    markRetryTimeIfNotHydrated(fiber, expTime);
                }
                function findHostInstanceWithNoPortals(fiber) { var hostFiber = findCurrentHostFiberWithNoPortals(fiber); if (hostFiber === null) {
                    return null;
                } if (hostFiber.tag === FundamentalComponent) {
                    return hostFiber.stateNode.instance;
                } return hostFiber.stateNode; }
                var shouldSuspendImpl = function shouldSuspendImpl(fiber) { return false; };
                function shouldSuspend(fiber) { return shouldSuspendImpl(fiber); }
                var overrideHookState = null;
                var overrideProps = null;
                var scheduleUpdate = null;
                var setSuspenseHandler = null;
                {
                    var copyWithSetImpl = function copyWithSetImpl(obj, path, idx, value) {
                        if (idx >= path.length) {
                            return value;
                        }
                        var key = path[idx];
                        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
                        updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
                        return updated;
                    };
                    var copyWithSet = function copyWithSet(obj, path, value) { return copyWithSetImpl(obj, path, 0, value); };
                    overrideHookState = function overrideHookState(fiber, id, path, value) {
                        var currentHook = fiber.memoizedState;
                        while (currentHook !== null && id > 0) {
                            currentHook = currentHook.next;
                            id--;
                        }
                        if (currentHook !== null) {
                            var newState = copyWithSet(currentHook.memoizedState, path, value);
                            currentHook.memoizedState = newState;
                            currentHook.baseState = newState;
                            fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                            scheduleWork(fiber, Sync);
                        }
                    };
                    overrideProps = function overrideProps(fiber, path, value) { fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value); if (fiber.alternate) {
                        fiber.alternate.pendingProps = fiber.pendingProps;
                    } scheduleWork(fiber, Sync); };
                    scheduleUpdate = function scheduleUpdate(fiber) { scheduleWork(fiber, Sync); };
                    setSuspenseHandler = function setSuspenseHandler(newShouldSuspendImpl) { shouldSuspendImpl = newShouldSuspendImpl; };
                }
                function injectIntoDevTools(devToolsConfig) {
                    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
                    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
                    return injectInternals(_assign({}, devToolsConfig, { overrideHookState: overrideHookState, overrideProps: overrideProps, setSuspenseHandler: setSuspenseHandler, scheduleUpdate: scheduleUpdate, currentDispatcherRef: ReactCurrentDispatcher, findHostInstanceByFiber: function findHostInstanceByFiber(fiber) { var hostFiber = findCurrentHostFiber(fiber); if (hostFiber === null) {
                            return null;
                        } return hostFiber.stateNode; }, findFiberByHostInstance: function findFiberByHostInstance(instance) {
                            if (!_findFiberByHostInstance) {
                                return null;
                            }
                            return _findFiberByHostInstance(instance);
                        },
                        findHostInstancesForRefresh: findHostInstancesForRefresh, scheduleRefresh: scheduleRefresh, scheduleRoot: scheduleRoot, setRefreshHandler: setRefreshHandler,
                        getCurrentFiber: function getCurrentFiber() { return current; } }));
                }
                var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
                function ReactDOMRoot(container, options) { this._internalRoot = createRootImpl(container, ConcurrentRoot, options); }
                function ReactDOMBlockingRoot(container, tag, options) { this._internalRoot = createRootImpl(container, tag, options); }
                ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) { var root = this._internalRoot; {
                    if (typeof arguments[1] === 'function') {
                        error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
                    }
                    var container = root.containerInfo;
                    if (container.nodeType !== COMMENT_NODE) {
                        var hostInstance = findHostInstanceWithNoPortals(root.current);
                        if (hostInstance) {
                            if (hostInstance.parentNode !== container) {
                                error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
                            }
                        }
                    }
                } updateContainer(children, root, null, null); };
                ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () { {
                    if (typeof arguments[0] === 'function') {
                        error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
                    }
                } var root = this._internalRoot; var container = root.containerInfo; updateContainer(null, root, null, function () { unmarkContainerAsRoot(container); }); };
                function createRootImpl(container, tag, options) {
                    var hydrate = options != null && options.hydrate === true;
                    var hydrationCallbacks = options != null && options.hydrationOptions || null;
                    var root = createContainer(container, tag, hydrate);
                    markContainerAsRoot(root.current, container);
                    if (hydrate && tag !== LegacyRoot) {
                        var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
                        eagerlyTrapReplayableEvents(container, doc);
                    }
                    return root;
                }
                function createLegacyRoot(container, options) { return new ReactDOMBlockingRoot(container, LegacyRoot, options); }
                function isValidContainer(node) { return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable ')); }
                var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
                var topLevelUpdateWarnings;
                var warnedAboutHydrateAPI = false;
                {
                    topLevelUpdateWarnings = function topLevelUpdateWarnings(container) { if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                        var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                        if (hostInstance) {
                            if (hostInstance.parentNode !== container) {
                                error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
                            }
                        }
                    } var isRootRenderedBySomeReact = !!container._reactRootContainer; var rootEl = getReactRootElementInContainer(container); var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl)); if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                        error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
                    } if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
                        error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
                    } };
                }
                function getReactRootElementInContainer(container) { if (!container) {
                    return null;
                } if (container.nodeType === DOCUMENT_NODE) {
                    return container.documentElement;
                }
                else {
                    return container.firstChild;
                } }
                function shouldHydrateDueToLegacyHeuristic(container) { var rootElement = getReactRootElementInContainer(container); return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME)); }
                function legacyCreateRootFromDOMContainer(container, forceHydrate) {
                    var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
                    if (!shouldHydrate) {
                        var warned = false;
                        var rootSibling;
                        while (rootSibling = container.lastChild) {
                            {
                                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                                    warned = true;
                                    error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
                                }
                            }
                            container.removeChild(rootSibling);
                        }
                    }
                    {
                        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                            warnedAboutHydrateAPI = true;
                            warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
                        }
                    }
                    return createLegacyRoot(container, shouldHydrate ? { hydrate: true } : undefined);
                }
                function warnOnInvalidCallback$1(callback, callerName) { {
                    if (callback !== null && typeof callback !== 'function') {
                        error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
                    }
                } }
                function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
                    {
                        topLevelUpdateWarnings(container);
                        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
                    }
                    var root = container._reactRootContainer;
                    var fiberRoot;
                    if (!root) {
                        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
                        fiberRoot = root._internalRoot;
                        if (typeof callback === 'function') {
                            var originalCallback = callback;
                            callback = function callback() { var instance = getPublicRootInstance(fiberRoot); originalCallback.call(instance); };
                        }
                        unbatchedUpdates(function () { updateContainer(children, fiberRoot, parentComponent, callback); });
                    }
                    else {
                        fiberRoot = root._internalRoot;
                        if (typeof callback === 'function') {
                            var _originalCallback = callback;
                            callback = function callback() { var instance = getPublicRootInstance(fiberRoot); _originalCallback.call(instance); };
                        }
                        updateContainer(children, fiberRoot, parentComponent, callback);
                    }
                    return getPublicRootInstance(fiberRoot);
                }
                function findDOMNode(componentOrElement) { {
                    var owner = ReactCurrentOwner$3.current;
                    if (owner !== null && owner.stateNode !== null) {
                        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                        if (!warnedAboutRefsInRender) {
                            error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
                        }
                        owner.stateNode._warnedAboutRefsInRender = true;
                    }
                } if (componentOrElement == null) {
                    return null;
                } if (componentOrElement.nodeType === ELEMENT_NODE) {
                    return componentOrElement;
                } {
                    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
                } }
                function hydrate(element, container, callback) {
                    if (!isValidContainer(container)) {
                        {
                            throw Error("Target container is not a DOM element.");
                        }
                    }
                    {
                        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
                        if (isModernRoot) {
                            error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
                        }
                    }
                    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
                }
                function render(element, container, callback) { if (!isValidContainer(container)) {
                    {
                        throw Error("Target container is not a DOM element.");
                    }
                } {
                    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
                    if (isModernRoot) {
                        error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
                    }
                } return legacyRenderSubtreeIntoContainer(null, element, container, false, callback); }
                function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) { if (!isValidContainer(containerNode)) {
                    {
                        throw Error("Target container is not a DOM element.");
                    }
                } if (!(parentComponent != null && has(parentComponent))) {
                    {
                        throw Error("parentComponent must be a valid React Component");
                    }
                } return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback); }
                function unmountComponentAtNode(container) {
                    if (!isValidContainer(container)) {
                        {
                            throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
                        }
                    }
                    {
                        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
                        if (isModernRoot) {
                            error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
                        }
                    }
                    if (container._reactRootContainer) {
                        {
                            var rootEl = getReactRootElementInContainer(container);
                            var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
                            if (renderedByDifferentReact) {
                                error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
                            }
                        }
                        unbatchedUpdates(function () {
                            legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
                                container._reactRootContainer = null;
                                unmarkContainerAsRoot(container);
                            });
                        });
                        return true;
                    }
                    else {
                        {
                            var _rootEl = getReactRootElementInContainer(container);
                            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
                            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                            if (hasNonRootReactChild) {
                                error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
                            }
                        }
                        return false;
                    }
                }
                function createPortal(children, containerInfo, implementation) {
                    var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                    return {
                        $$typeof: REACT_PORTAL_TYPE, key: key == null ? null : '' + key, children: children, containerInfo: containerInfo, implementation: implementation
                    };
                }
                var ReactVersion = '16.13.0';
                setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
                setAttemptContinuousHydration(attemptContinuousHydration$1);
                setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
                var didWarnAboutUnstableCreatePortal = false;
                {
                    if (typeof Map !== 'function' ||
                        Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
                        Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
                        error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
                    }
                }
                setRestoreImplementation(restoreControlledState$3);
                setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
                function createPortal$1(children, container) {
                    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                    if (!isValidContainer(container)) {
                        {
                            throw Error("Target container is not a DOM element.");
                        }
                    }
                    return createPortal(children, container, null, key);
                }
                function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) { return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback); }
                function unstable_createPortal(children, container) { var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null; {
                    if (!didWarnAboutUnstableCreatePortal) {
                        didWarnAboutUnstableCreatePortal = true;
                        warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
                    }
                } return createPortal$1(children, container, key); }
                var Internals = {
                    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
                };
                var foundDevTools = injectIntoDevTools({ findFiberByHostInstance: getClosestInstanceFromNode, bundleType: 1, version: ReactVersion, rendererPackageName: 'react-dom' });
                {
                    if (!foundDevTools && canUseDOM && window.top === window.self) {
                        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
                            var protocol = window.location.protocol;
                            if (/^(https?|file):$/.test(protocol)) {
                                console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
                            }
                        }
                    }
                }
                exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
                exports.createPortal = createPortal$1;
                exports.findDOMNode = findDOMNode;
                exports.flushSync = flushSync;
                exports.hydrate = hydrate;
                exports.render = render;
                exports.unmountComponentAtNode = unmountComponentAtNode;
                exports.unstable_batchedUpdates = batchedUpdates$1;
                exports.unstable_createPortal = unstable_createPortal;
                exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
                exports.version = ReactVersion;
            })();
        }
    }),
    "./node_modules/react-dom/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        function checkDCE() {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
                return;
            }
            if (true) {
                throw new Error('^_^');
            }
            try {
                __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
            }
            catch (err) {
                console.error(err);
            }
        }
        if (false) { }
        else {
            module.exports = __webpack_require__("./node_modules/react-dom/cjs/react-dom.development.js");
        }
    }),
    "./node_modules/react-is/cjs/react-is.development.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        if (true) {
            (function () {
                'use strict';
                var hasSymbol = typeof Symbol === 'function' && Symbol.for;
                var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
                var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
                var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
                var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
                var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
                var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
                var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
                var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
                var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
                var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
                var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
                var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
                var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
                var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
                var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
                var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
                var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
                var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
                function isValidElementType(type) {
                    return typeof type === 'string' || typeof type === 'function' ||
                        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
                }
                function typeOf(object) {
                    if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null) {
                        var $$typeof = object.$$typeof;
                        switch ($$typeof) {
                            case REACT_ELEMENT_TYPE:
                                var type = object.type;
                                switch (type) {
                                    case REACT_ASYNC_MODE_TYPE:
                                    case REACT_CONCURRENT_MODE_TYPE:
                                    case REACT_FRAGMENT_TYPE:
                                    case REACT_PROFILER_TYPE:
                                    case REACT_STRICT_MODE_TYPE:
                                    case REACT_SUSPENSE_TYPE:
                                        return type;
                                    default:
                                        var $$typeofType = type && type.$$typeof;
                                        switch ($$typeofType) {
                                            case REACT_CONTEXT_TYPE:
                                            case REACT_FORWARD_REF_TYPE:
                                            case REACT_LAZY_TYPE:
                                            case REACT_MEMO_TYPE:
                                            case REACT_PROVIDER_TYPE:
                                                return $$typeofType;
                                            default:
                                                return $$typeof;
                                        }
                                }
                            case REACT_PORTAL_TYPE:
                                return $$typeof;
                        }
                    }
                    return undefined;
                }
                var AsyncMode = REACT_ASYNC_MODE_TYPE;
                var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
                var ContextConsumer = REACT_CONTEXT_TYPE;
                var ContextProvider = REACT_PROVIDER_TYPE;
                var Element = REACT_ELEMENT_TYPE;
                var ForwardRef = REACT_FORWARD_REF_TYPE;
                var Fragment = REACT_FRAGMENT_TYPE;
                var Lazy = REACT_LAZY_TYPE;
                var Memo = REACT_MEMO_TYPE;
                var Portal = REACT_PORTAL_TYPE;
                var Profiler = REACT_PROFILER_TYPE;
                var StrictMode = REACT_STRICT_MODE_TYPE;
                var Suspense = REACT_SUSPENSE_TYPE;
                var hasWarnedAboutDeprecatedIsAsyncMode = false;
                function isAsyncMode(object) {
                    {
                        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                            hasWarnedAboutDeprecatedIsAsyncMode = true;
                            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
                        }
                    }
                    return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
                }
                function isConcurrentMode(object) {
                    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
                }
                function isContextConsumer(object) {
                    return typeOf(object) === REACT_CONTEXT_TYPE;
                }
                function isContextProvider(object) {
                    return typeOf(object) === REACT_PROVIDER_TYPE;
                }
                function isElement(object) {
                    return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                }
                function isForwardRef(object) {
                    return typeOf(object) === REACT_FORWARD_REF_TYPE;
                }
                function isFragment(object) {
                    return typeOf(object) === REACT_FRAGMENT_TYPE;
                }
                function isLazy(object) {
                    return typeOf(object) === REACT_LAZY_TYPE;
                }
                function isMemo(object) {
                    return typeOf(object) === REACT_MEMO_TYPE;
                }
                function isPortal(object) {
                    return typeOf(object) === REACT_PORTAL_TYPE;
                }
                function isProfiler(object) {
                    return typeOf(object) === REACT_PROFILER_TYPE;
                }
                function isStrictMode(object) {
                    return typeOf(object) === REACT_STRICT_MODE_TYPE;
                }
                function isSuspense(object) {
                    return typeOf(object) === REACT_SUSPENSE_TYPE;
                }
                exports.AsyncMode = AsyncMode;
                exports.ConcurrentMode = ConcurrentMode;
                exports.ContextConsumer = ContextConsumer;
                exports.ContextProvider = ContextProvider;
                exports.Element = Element;
                exports.ForwardRef = ForwardRef;
                exports.Fragment = Fragment;
                exports.Lazy = Lazy;
                exports.Memo = Memo;
                exports.Portal = Portal;
                exports.Profiler = Profiler;
                exports.StrictMode = StrictMode;
                exports.Suspense = Suspense;
                exports.isAsyncMode = isAsyncMode;
                exports.isConcurrentMode = isConcurrentMode;
                exports.isContextConsumer = isContextConsumer;
                exports.isContextProvider = isContextProvider;
                exports.isElement = isElement;
                exports.isForwardRef = isForwardRef;
                exports.isFragment = isFragment;
                exports.isLazy = isLazy;
                exports.isMemo = isMemo;
                exports.isPortal = isPortal;
                exports.isProfiler = isProfiler;
                exports.isStrictMode = isStrictMode;
                exports.isSuspense = isSuspense;
                exports.isValidElementType = isValidElementType;
                exports.typeOf = typeOf;
            })();
        }
    }),
    "./node_modules/react-is/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        if (false) { }
        else {
            module.exports = __webpack_require__("./node_modules/react-is/cjs/react-is.development.js");
        }
    }),
    "./node_modules/react-redux/es/components/Context.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ReactReduxContext = undefined;
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var ReactReduxContext = exports.ReactReduxContext = _react2.default.createContext(null);
        if (true) {
            ReactReduxContext.displayName = 'ReactRedux';
        }
        exports.default = ReactReduxContext;
    }),
    "./node_modules/react-redux/es/components/Provider.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _Context = __webpack_require__("./node_modules/react-redux/es/components/Context.js");
        var _Subscription = __webpack_require__("./node_modules/react-redux/es/utils/Subscription.js");
        var _Subscription2 = _interopRequireDefault(_Subscription);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function Provider(_ref) {
            var store = _ref.store, context = _ref.context, children = _ref.children;
            var contextValue = (0, _react.useMemo)(function () {
                var subscription = new _Subscription2.default(store);
                subscription.onStateChange = subscription.notifyNestedSubs;
                return {
                    store: store,
                    subscription: subscription
                };
            }, [store]);
            var previousState = (0, _react.useMemo)(function () {
                return store.getState();
            }, [store]);
            (0, _react.useEffect)(function () {
                var subscription = contextValue.subscription;
                subscription.trySubscribe();
                if (previousState !== store.getState()) {
                    subscription.notifyNestedSubs();
                }
                return function () {
                    subscription.tryUnsubscribe();
                    subscription.onStateChange = null;
                };
            }, [contextValue, previousState]);
            var Context = context || _Context.ReactReduxContext;
            return _react2.default.createElement(Context.Provider, {
                value: contextValue
            }, children);
        }
        if (true) {
            Provider.propTypes = {
                store: _propTypes2.default.shape({
                    subscribe: _propTypes2.default.func.isRequired,
                    dispatch: _propTypes2.default.func.isRequired,
                    getState: _propTypes2.default.func.isRequired
                }),
                context: _propTypes2.default.object,
                children: _propTypes2.default.any
            };
        }
        exports.default = Provider;
    }),
    "./node_modules/react-redux/es/components/connectAdvanced.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = connectAdvanced;
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _hoistNonReactStatics = __webpack_require__("./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
        var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _reactIs = __webpack_require__("./node_modules/react-is/index.js");
        var _Subscription = __webpack_require__("./node_modules/react-redux/es/utils/Subscription.js");
        var _Subscription2 = _interopRequireDefault(_Subscription);
        var _useIsomorphicLayoutEffect = __webpack_require__("./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js");
        var _Context = __webpack_require__("./node_modules/react-redux/es/components/Context.js");
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var EMPTY_ARRAY = [];
        var NO_SUBSCRIPTION_ARRAY = [null, null];
        var stringifyComponent = function stringifyComponent(Comp) {
            try {
                return JSON.stringify(Comp);
            }
            catch (err) {
                return String(Comp);
            }
        };
        function storeStateUpdatesReducer(state, action) {
            var updateCount = state[1];
            return [action.payload, updateCount + 1];
        }
        function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
            (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
                return effectFunc.apply(void 0, effectArgs);
            }, dependencies);
        }
        function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
            lastWrapperProps.current = wrapperProps;
            lastChildProps.current = actualChildProps;
            renderIsScheduled.current = false;
            if (childPropsFromStoreUpdate.current) {
                childPropsFromStoreUpdate.current = null;
                notifyNestedSubs();
            }
        }
        function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
            if (!shouldHandleStateChanges)
                return;
            var didUnsubscribe = false;
            var lastThrownError = null;
            var checkForUpdates = function checkForUpdates() {
                if (didUnsubscribe) {
                    return;
                }
                var latestStoreState = store.getState();
                var newChildProps, error;
                try {
                    newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
                }
                catch (e) {
                    error = e;
                    lastThrownError = e;
                }
                if (!error) {
                    lastThrownError = null;
                }
                if (newChildProps === lastChildProps.current) {
                    if (!renderIsScheduled.current) {
                        notifyNestedSubs();
                    }
                }
                else {
                    lastChildProps.current = newChildProps;
                    childPropsFromStoreUpdate.current = newChildProps;
                    renderIsScheduled.current = true;
                    forceComponentUpdateDispatch({
                        type: 'STORE_UPDATED',
                        payload: {
                            error: error
                        }
                    });
                }
            };
            subscription.onStateChange = checkForUpdates;
            subscription.trySubscribe();
            checkForUpdates();
            var unsubscribeWrapper = function unsubscribeWrapper() {
                didUnsubscribe = true;
                subscription.tryUnsubscribe();
                subscription.onStateChange = null;
                if (lastThrownError) {
                    throw lastThrownError;
                }
            };
            return unsubscribeWrapper;
        }
        var initStateUpdates = function initStateUpdates() {
            return [null, 0];
        };
        function connectAdvanced(selectorFactory, _ref) {
            if (_ref === void 0) {
                _ref = {};
            }
            var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
                return "ConnectAdvanced(" + name + ")";
            } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context = _ref2$context === void 0 ? _Context.ReactReduxContext : _ref2$context, connectOptions = (0, _objectWithoutPropertiesLoose3.default)(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);
            if (true) {
                if (renderCountProp !== undefined) {
                    throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
                }
                if (withRef) {
                    throw new Error('withRef is removed. To access the wrapped instance, use a ref on the connected component');
                }
                var customStoreWarningMessage = 'To use a custom Redux store for specific components, create a custom React context with ' + "React.createContext(), and pass the context object to React Redux's Provider and specific components" + ' like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. ' + 'You may also pass a {context : MyContext} option to connect';
                if (storeKey !== 'store') {
                    throw new Error('storeKey has been removed and does not do anything. ' + customStoreWarningMessage);
                }
            }
            var Context = context;
            return function wrapWithConnect(WrappedComponent) {
                if (true && !(0, _reactIs.isValidElementType)(WrappedComponent)) {
                    throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
                }
                var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
                var displayName = getDisplayName(wrappedComponentName);
                var selectorFactoryOptions = (0, _extends3.default)({}, connectOptions, {
                    getDisplayName: getDisplayName,
                    methodName: methodName,
                    renderCountProp: renderCountProp,
                    shouldHandleStateChanges: shouldHandleStateChanges,
                    storeKey: storeKey,
                    displayName: displayName,
                    wrappedComponentName: wrappedComponentName,
                    WrappedComponent: WrappedComponent
                });
                var pure = connectOptions.pure;
                function createChildSelector(store) {
                    return selectorFactory(store.dispatch, selectorFactoryOptions);
                }
                var usePureOnlyMemo = pure ? _react.useMemo : function (callback) {
                    return callback();
                };
                function ConnectFunction(props) {
                    var _useMemo = (0, _react.useMemo)(function () {
                        var forwardedRef = props.forwardedRef, wrapperProps = (0, _objectWithoutPropertiesLoose3.default)(props, ["forwardedRef"]);
                        return [props.context, forwardedRef, wrapperProps];
                    }, [props]), propsContext = _useMemo[0], forwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
                    var ContextToUse = (0, _react.useMemo)(function () {
                        return propsContext && propsContext.Consumer && (0, _reactIs.isContextConsumer)(_react2.default.createElement(propsContext.Consumer, null)) ? propsContext : Context;
                    }, [propsContext, Context]);
                    var contextValue = (0, _react.useContext)(ContextToUse);
                    var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
                    var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
                    if (true && !didStoreComeFromProps && !didStoreComeFromContext) {
                        throw new Error("Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
                    }
                    var store = didStoreComeFromProps ? props.store : contextValue.store;
                    var childPropsSelector = (0, _react.useMemo)(function () {
                        return createChildSelector(store);
                    }, [store]);
                    var _useMemo2 = (0, _react.useMemo)(function () {
                        if (!shouldHandleStateChanges)
                            return NO_SUBSCRIPTION_ARRAY;
                        var subscription = new _Subscription2.default(store, didStoreComeFromProps ? null : contextValue.subscription);
                        var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);
                        return [subscription, notifyNestedSubs];
                    }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
                    var overriddenContextValue = (0, _react.useMemo)(function () {
                        if (didStoreComeFromProps) {
                            return contextValue;
                        }
                        return (0, _extends3.default)({}, contextValue, {
                            subscription: subscription
                        });
                    }, [didStoreComeFromProps, contextValue, subscription]);
                    var _useReducer = (0, _react.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
                    if (previousStateUpdateResult && previousStateUpdateResult.error) {
                        throw previousStateUpdateResult.error;
                    }
                    var lastChildProps = (0, _react.useRef)();
                    var lastWrapperProps = (0, _react.useRef)(wrapperProps);
                    var childPropsFromStoreUpdate = (0, _react.useRef)();
                    var renderIsScheduled = (0, _react.useRef)(false);
                    var actualChildProps = usePureOnlyMemo(function () {
                        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
                            return childPropsFromStoreUpdate.current;
                        }
                        return childPropsSelector(store.getState(), wrapperProps);
                    }, [store, previousStateUpdateResult, wrapperProps]);
                    useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
                    useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
                    var renderedWrappedComponent = (0, _react.useMemo)(function () {
                        return _react2.default.createElement(WrappedComponent, (0, _extends3.default)({}, actualChildProps, {
                            ref: forwardedRef
                        }));
                    }, [forwardedRef, WrappedComponent, actualChildProps]);
                    var renderedChild = (0, _react.useMemo)(function () {
                        if (shouldHandleStateChanges) {
                            return _react2.default.createElement(ContextToUse.Provider, {
                                value: overriddenContextValue
                            }, renderedWrappedComponent);
                        }
                        return renderedWrappedComponent;
                    }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
                    return renderedChild;
                }
                var Connect = pure ? _react2.default.memo(ConnectFunction) : ConnectFunction;
                Connect.WrappedComponent = WrappedComponent;
                Connect.displayName = displayName;
                if (forwardRef) {
                    var forwarded = _react2.default.forwardRef(function forwardConnectRef(props, ref) {
                        return _react2.default.createElement(Connect, (0, _extends3.default)({}, props, {
                            forwardedRef: ref
                        }));
                    });
                    forwarded.displayName = displayName;
                    forwarded.WrappedComponent = WrappedComponent;
                    return (0, _hoistNonReactStatics2.default)(forwarded, WrappedComponent);
                }
                return (0, _hoistNonReactStatics2.default)(Connect, WrappedComponent);
            };
        }
    }),
    "./node_modules/react-redux/es/connect/connect.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        exports.createConnect = createConnect;
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _connectAdvanced = __webpack_require__("./node_modules/react-redux/es/components/connectAdvanced.js");
        var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);
        var _shallowEqual = __webpack_require__("./node_modules/react-redux/es/utils/shallowEqual.js");
        var _shallowEqual2 = _interopRequireDefault(_shallowEqual);
        var _mapDispatchToProps = __webpack_require__("./node_modules/react-redux/es/connect/mapDispatchToProps.js");
        var _mapDispatchToProps2 = _interopRequireDefault(_mapDispatchToProps);
        var _mapStateToProps = __webpack_require__("./node_modules/react-redux/es/connect/mapStateToProps.js");
        var _mapStateToProps2 = _interopRequireDefault(_mapStateToProps);
        var _mergeProps = __webpack_require__("./node_modules/react-redux/es/connect/mergeProps.js");
        var _mergeProps2 = _interopRequireDefault(_mergeProps);
        var _selectorFactory = __webpack_require__("./node_modules/react-redux/es/connect/selectorFactory.js");
        var _selectorFactory2 = _interopRequireDefault(_selectorFactory);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function match(arg, factories, name) {
            for (var i = factories.length - 1; i >= 0; i--) {
                var result = factories[i](arg);
                if (result)
                    return result;
            }
            return function (dispatch, options) {
                throw new Error("Invalid value of type " + (typeof arg === "undefined" ? "undefined" : _typeof(arg)) + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
            };
        }
        function strictEqual(a, b) {
            return a === b;
        }
        function createConnect(_temp) {
            var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? _connectAdvanced2.default : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToProps2.default : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToProps2.default : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergeProps2.default : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactory2.default : _ref$selectorFactory;
            return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
                if (_ref2 === void 0) {
                    _ref2 = {};
                }
                var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _shallowEqual2.default : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _shallowEqual2.default : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _shallowEqual2.default : _ref3$areMergedPropsE, extraOptions = (0, _objectWithoutPropertiesLoose3.default)(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);
                var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
                var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
                var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
                return connectHOC(selectorFactory, (0, _extends3.default)({
                    methodName: 'connect',
                    getDisplayName: function getDisplayName(name) {
                        return "Connect(" + name + ")";
                    },
                    shouldHandleStateChanges: Boolean(mapStateToProps),
                    initMapStateToProps: initMapStateToProps,
                    initMapDispatchToProps: initMapDispatchToProps,
                    initMergeProps: initMergeProps,
                    pure: pure,
                    areStatesEqual: areStatesEqual,
                    areOwnPropsEqual: areOwnPropsEqual,
                    areStatePropsEqual: areStatePropsEqual,
                    areMergedPropsEqual: areMergedPropsEqual
                }, extraOptions));
            };
        }
        exports.default =
            createConnect();
    }),
    "./node_modules/react-redux/es/connect/mapDispatchToProps.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
        exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
        exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;
        var _redux = __webpack_require__("./node_modules/redux/es/redux.js");
        var _wrapMapToProps = __webpack_require__("./node_modules/react-redux/es/connect/wrapMapToProps.js");
        function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
            return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
        }
        function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
            return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
                return {
                    dispatch: dispatch
                };
            }) : undefined;
        }
        function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
            return mapDispatchToProps && (typeof mapDispatchToProps === 'undefined' ? 'undefined' : _typeof(mapDispatchToProps)) === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
                return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);
            }) : undefined;
        }
        exports.default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
    }),
    "./node_modules/react-redux/es/connect/mapStateToProps.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
        exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;
        var _wrapMapToProps = __webpack_require__("./node_modules/react-redux/es/connect/wrapMapToProps.js");
        function whenMapStateToPropsIsFunction(mapStateToProps) {
            return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
        }
        function whenMapStateToPropsIsMissing(mapStateToProps) {
            return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {
                return {};
            }) : undefined;
        }
        exports.default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
    }),
    "./node_modules/react-redux/es/connect/mergeProps.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.defaultMergeProps = defaultMergeProps;
        exports.wrapMergePropsFunc = wrapMergePropsFunc;
        exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
        exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _verifyPlainObject = __webpack_require__("./node_modules/react-redux/es/utils/verifyPlainObject.js");
        var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function defaultMergeProps(stateProps, dispatchProps, ownProps) {
            return (0, _extends3.default)({}, ownProps, {}, stateProps, {}, dispatchProps);
        }
        function wrapMergePropsFunc(mergeProps) {
            return function initMergePropsProxy(dispatch, _ref) {
                var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
                var hasRunOnce = false;
                var mergedProps;
                return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
                    var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                    if (hasRunOnce) {
                        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps))
                            mergedProps = nextMergedProps;
                    }
                    else {
                        hasRunOnce = true;
                        mergedProps = nextMergedProps;
                        if (true)
                            (0, _verifyPlainObject2.default)(mergedProps, displayName, 'mergeProps');
                    }
                    return mergedProps;
                };
            };
        }
        function whenMergePropsIsFunction(mergeProps) {
            return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
        }
        function whenMergePropsIsOmitted(mergeProps) {
            return !mergeProps ? function () {
                return defaultMergeProps;
            } : undefined;
        }
        exports.default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
    }),
    "./node_modules/react-redux/es/connect/selectorFactory.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
        exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;
        exports.default = finalPropsSelectorFactory;
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _verifySubselectors = __webpack_require__("./node_modules/react-redux/es/connect/verifySubselectors.js");
        var _verifySubselectors2 = _interopRequireDefault(_verifySubselectors);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
            return function impureFinalPropsSelector(state, ownProps) {
                return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
            };
        }
        function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
            var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
            var hasRunAtLeastOnce = false;
            var state;
            var ownProps;
            var stateProps;
            var dispatchProps;
            var mergedProps;
            function handleFirstCall(firstState, firstOwnProps) {
                state = firstState;
                ownProps = firstOwnProps;
                stateProps = mapStateToProps(state, ownProps);
                dispatchProps = mapDispatchToProps(dispatch, ownProps);
                mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                hasRunAtLeastOnce = true;
                return mergedProps;
            }
            function handleNewPropsAndNewState() {
                stateProps = mapStateToProps(state, ownProps);
                if (mapDispatchToProps.dependsOnOwnProps)
                    dispatchProps = mapDispatchToProps(dispatch, ownProps);
                mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                return mergedProps;
            }
            function handleNewProps() {
                if (mapStateToProps.dependsOnOwnProps)
                    stateProps = mapStateToProps(state, ownProps);
                if (mapDispatchToProps.dependsOnOwnProps)
                    dispatchProps = mapDispatchToProps(dispatch, ownProps);
                mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                return mergedProps;
            }
            function handleNewState() {
                var nextStateProps = mapStateToProps(state, ownProps);
                var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
                stateProps = nextStateProps;
                if (statePropsChanged)
                    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
                return mergedProps;
            }
            function handleSubsequentCalls(nextState, nextOwnProps) {
                var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
                var stateChanged = !areStatesEqual(nextState, state);
                state = nextState;
                ownProps = nextOwnProps;
                if (propsChanged && stateChanged)
                    return handleNewPropsAndNewState();
                if (propsChanged)
                    return handleNewProps();
                if (stateChanged)
                    return handleNewState();
                return mergedProps;
            }
            return function pureFinalPropsSelector(nextState, nextOwnProps) {
                return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
            };
        }
        function finalPropsSelectorFactory(dispatch, _ref2) {
            var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = (0, _objectWithoutPropertiesLoose3.default)(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);
            var mapStateToProps = initMapStateToProps(dispatch, options);
            var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
            var mergeProps = initMergeProps(dispatch, options);
            if (true) {
                (0, _verifySubselectors2.default)(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
            }
            var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
            return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
        }
    }),
    "./node_modules/react-redux/es/connect/verifySubselectors.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = verifySubselectors;
        var _warning = __webpack_require__("./node_modules/react-redux/es/utils/warning.js");
        var _warning2 = _interopRequireDefault(_warning);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function verify(selector, methodName, displayName) {
            if (!selector) {
                throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
            }
            else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
                if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {
                    (0, _warning2.default)("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
                }
            }
        }
        function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
            verify(mapStateToProps, 'mapStateToProps', displayName);
            verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
            verify(mergeProps, 'mergeProps', displayName);
        }
    }),
    "./node_modules/react-redux/es/connect/wrapMapToProps.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
        exports.getDependsOnOwnProps = getDependsOnOwnProps;
        exports.wrapMapToPropsFunc = wrapMapToPropsFunc;
        var _verifyPlainObject = __webpack_require__("./node_modules/react-redux/es/utils/verifyPlainObject.js");
        var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function wrapMapToPropsConstant(getConstant) {
            return function initConstantSelector(dispatch, options) {
                var constant = getConstant(dispatch, options);
                function constantSelector() {
                    return constant;
                }
                constantSelector.dependsOnOwnProps = false;
                return constantSelector;
            };
        }
        function getDependsOnOwnProps(mapToProps) {
            return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
        }
        function wrapMapToPropsFunc(mapToProps, methodName) {
            return function initProxySelector(dispatch, _ref) {
                var displayName = _ref.displayName;
                var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
                    return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
                };
                proxy.dependsOnOwnProps = true;
                proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
                    proxy.mapToProps = mapToProps;
                    proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
                    var props = proxy(stateOrDispatch, ownProps);
                    if (typeof props === 'function') {
                        proxy.mapToProps = props;
                        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
                        props = proxy(stateOrDispatch, ownProps);
                    }
                    if (true)
                        (0, _verifyPlainObject2.default)(props, displayName, methodName);
                    return props;
                };
                return proxy;
            };
        }
    }),
    "./node_modules/react-redux/es/hooks/useDispatch.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.useDispatch = undefined;
        exports.createDispatchHook = createDispatchHook;
        var _Context = __webpack_require__("./node_modules/react-redux/es/components/Context.js");
        var _useStore = __webpack_require__("./node_modules/react-redux/es/hooks/useStore.js");
        function createDispatchHook(context) {
            if (context === void 0) {
                context = _Context.ReactReduxContext;
            }
            var useStore = context === _Context.ReactReduxContext ? _useStore.useStore : (0, _useStore.createStoreHook)(context);
            return function useDispatch() {
                var store = useStore();
                return store.dispatch;
            };
        }
        var useDispatch = exports.useDispatch = createDispatchHook();
    }),
    "./node_modules/react-redux/es/hooks/useReduxContext.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.useReduxContext = useReduxContext;
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _Context = __webpack_require__("./node_modules/react-redux/es/components/Context.js");
        function useReduxContext() {
            var contextValue = (0, _react.useContext)(_Context.ReactReduxContext);
            if (true && !contextValue) {
                throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');
            }
            return contextValue;
        }
    }),
    "./node_modules/react-redux/es/hooks/useSelector.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.useSelector = undefined;
        exports.createSelectorHook = createSelectorHook;
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _useReduxContext2 = __webpack_require__("./node_modules/react-redux/es/hooks/useReduxContext.js");
        var _Subscription = __webpack_require__("./node_modules/react-redux/es/utils/Subscription.js");
        var _Subscription2 = _interopRequireDefault(_Subscription);
        var _useIsomorphicLayoutEffect = __webpack_require__("./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js");
        var _Context = __webpack_require__("./node_modules/react-redux/es/components/Context.js");
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var refEquality = function refEquality(a, b) {
            return a === b;
        };
        function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
            var _useReducer = (0, _react.useReducer)(function (s) {
                return s + 1;
            }, 0), forceRender = _useReducer[1];
            var subscription = (0, _react.useMemo)(function () {
                return new _Subscription2.default(store, contextSub);
            }, [store, contextSub]);
            var latestSubscriptionCallbackError = (0, _react.useRef)();
            var latestSelector = (0, _react.useRef)();
            var latestSelectedState = (0, _react.useRef)();
            var selectedState;
            try {
                if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {
                    selectedState = selector(store.getState());
                }
                else {
                    selectedState = latestSelectedState.current;
                }
            }
            catch (err) {
                if (latestSubscriptionCallbackError.current) {
                    err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
                }
                throw err;
            }
            (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
                latestSelector.current = selector;
                latestSelectedState.current = selectedState;
                latestSubscriptionCallbackError.current = undefined;
            });
            (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
                function checkForUpdates() {
                    try {
                        var newSelectedState = latestSelector.current(store.getState());
                        if (equalityFn(newSelectedState, latestSelectedState.current)) {
                            return;
                        }
                        latestSelectedState.current = newSelectedState;
                    }
                    catch (err) {
                        latestSubscriptionCallbackError.current = err;
                    }
                    forceRender({});
                }
                subscription.onStateChange = checkForUpdates;
                subscription.trySubscribe();
                checkForUpdates();
                return function () {
                    return subscription.tryUnsubscribe();
                };
            }, [store, subscription]);
            return selectedState;
        }
        function createSelectorHook(context) {
            if (context === void 0) {
                context = _Context.ReactReduxContext;
            }
            var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {
                return (0, _react.useContext)(context);
            };
            return function useSelector(selector, equalityFn) {
                if (equalityFn === void 0) {
                    equalityFn = refEquality;
                }
                if (true && !selector) {
                    throw new Error("You must pass a selector to useSelectors");
                }
                var _useReduxContext = useReduxContext(), store = _useReduxContext.store, contextSub = _useReduxContext.subscription;
                return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
            };
        }
        var useSelector = exports.useSelector = createSelectorHook();
    }),
    "./node_modules/react-redux/es/hooks/useStore.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.useStore = undefined;
        exports.createStoreHook = createStoreHook;
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _Context = __webpack_require__("./node_modules/react-redux/es/components/Context.js");
        var _useReduxContext2 = __webpack_require__("./node_modules/react-redux/es/hooks/useReduxContext.js");
        function createStoreHook(context) {
            if (context === void 0) {
                context = _Context.ReactReduxContext;
            }
            var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {
                return (0, _react.useContext)(context);
            };
            return function useStore() {
                var _useReduxContext = useReduxContext(), store = _useReduxContext.store;
                return store;
            };
        }
        var useStore = exports.useStore = createStoreHook();
    }),
    "./node_modules/react-redux/es/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.shallowEqual = exports.createStoreHook = exports.useStore = exports.createSelectorHook = exports.useSelector = exports.createDispatchHook = exports.useDispatch = exports.batch = exports.connect = exports.ReactReduxContext = exports.connectAdvanced = exports.Provider = undefined;
        var _Provider = __webpack_require__("./node_modules/react-redux/es/components/Provider.js");
        var _Provider2 = _interopRequireDefault(_Provider);
        var _connectAdvanced = __webpack_require__("./node_modules/react-redux/es/components/connectAdvanced.js");
        var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);
        var _Context = __webpack_require__("./node_modules/react-redux/es/components/Context.js");
        var _connect = __webpack_require__("./node_modules/react-redux/es/connect/connect.js");
        var _connect2 = _interopRequireDefault(_connect);
        var _useDispatch = __webpack_require__("./node_modules/react-redux/es/hooks/useDispatch.js");
        var _useSelector = __webpack_require__("./node_modules/react-redux/es/hooks/useSelector.js");
        var _useStore = __webpack_require__("./node_modules/react-redux/es/hooks/useStore.js");
        var _batch = __webpack_require__("./node_modules/react-redux/es/utils/batch.js");
        var _reactBatchedUpdates = __webpack_require__("./node_modules/react-redux/es/utils/reactBatchedUpdates.js");
        var _shallowEqual = __webpack_require__("./node_modules/react-redux/es/utils/shallowEqual.js");
        var _shallowEqual2 = _interopRequireDefault(_shallowEqual);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        (0, _batch.setBatch)(_reactBatchedUpdates.unstable_batchedUpdates);
        exports.Provider = _Provider2.default;
        exports.connectAdvanced = _connectAdvanced2.default;
        exports.ReactReduxContext = _Context.ReactReduxContext;
        exports.connect = _connect2.default;
        exports.batch = _reactBatchedUpdates.unstable_batchedUpdates;
        exports.useDispatch = _useDispatch.useDispatch;
        exports.createDispatchHook = _useDispatch.createDispatchHook;
        exports.useSelector = _useSelector.useSelector;
        exports.createSelectorHook = _useSelector.createSelectorHook;
        exports.useStore = _useStore.useStore;
        exports.createStoreHook = _useStore.createStoreHook;
        exports.shallowEqual = _shallowEqual2.default;
    }),
    "./node_modules/react-redux/es/utils/Subscription.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = undefined;
        var _batch = __webpack_require__("./node_modules/react-redux/es/utils/batch.js");
        var nullListeners = {
            notify: function notify() { }
        };
        function createListenerCollection() {
            var batch = (0, _batch.getBatch)();
            var first = null;
            var last = null;
            return {
                clear: function clear() {
                    first = null;
                    last = null;
                },
                notify: function notify() {
                    batch(function () {
                        var listener = first;
                        while (listener) {
                            listener.callback();
                            listener = listener.next;
                        }
                    });
                },
                get: function get() {
                    var listeners = [];
                    var listener = first;
                    while (listener) {
                        listeners.push(listener);
                        listener = listener.next;
                    }
                    return listeners;
                },
                subscribe: function subscribe(callback) {
                    var isSubscribed = true;
                    var listener = last = {
                        callback: callback,
                        next: null,
                        prev: last
                    };
                    if (listener.prev) {
                        listener.prev.next = listener;
                    }
                    else {
                        first = listener;
                    }
                    return function unsubscribe() {
                        if (!isSubscribed || first === null)
                            return;
                        isSubscribed = false;
                        if (listener.next) {
                            listener.next.prev = listener.prev;
                        }
                        else {
                            last = listener.prev;
                        }
                        if (listener.prev) {
                            listener.prev.next = listener.next;
                        }
                        else {
                            first = listener.next;
                        }
                    };
                }
            };
        }
        var Subscription = function () {
            function Subscription(store, parentSub) {
                this.store = store;
                this.parentSub = parentSub;
                this.unsubscribe = null;
                this.listeners = nullListeners;
                this.handleChangeWrapper = this.handleChangeWrapper.bind(this);
            }
            var _proto = Subscription.prototype;
            _proto.addNestedSub = function addNestedSub(listener) {
                this.trySubscribe();
                return this.listeners.subscribe(listener);
            };
            _proto.notifyNestedSubs = function notifyNestedSubs() {
                this.listeners.notify();
            };
            _proto.handleChangeWrapper = function handleChangeWrapper() {
                if (this.onStateChange) {
                    this.onStateChange();
                }
            };
            _proto.isSubscribed = function isSubscribed() {
                return Boolean(this.unsubscribe);
            };
            _proto.trySubscribe = function trySubscribe() {
                if (!this.unsubscribe) {
                    this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);
                    this.listeners = createListenerCollection();
                }
            };
            _proto.tryUnsubscribe = function tryUnsubscribe() {
                if (this.unsubscribe) {
                    this.unsubscribe();
                    this.unsubscribe = null;
                    this.listeners.clear();
                    this.listeners = nullListeners;
                }
            };
            return Subscription;
        }();
        exports.default = Subscription;
    }),
    "./node_modules/react-redux/es/utils/batch.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function defaultNoopBatch(callback) {
            callback();
        }
        var batch = defaultNoopBatch;
        var setBatch = exports.setBatch = function setBatch(newBatch) {
            return batch = newBatch;
        };
        var getBatch = exports.getBatch = function getBatch() {
            return batch;
        };
    }),
    "./node_modules/react-redux/es/utils/isPlainObject.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        exports.default = isPlainObject;
        function isPlainObject(obj) {
            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null)
                return false;
            var proto = Object.getPrototypeOf(obj);
            if (proto === null)
                return true;
            var baseProto = proto;
            while (Object.getPrototypeOf(baseProto) !== null) {
                baseProto = Object.getPrototypeOf(baseProto);
            }
            return proto === baseProto;
        }
    }),
    "./node_modules/react-redux/es/utils/reactBatchedUpdates.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reactDom = __webpack_require__("./node_modules/react-dom/index.js");
        Object.defineProperty(exports, 'unstable_batchedUpdates', {
            enumerable: true,
            get: function get() {
                return _reactDom.unstable_batchedUpdates;
            }
        });
    }),
    "./node_modules/react-redux/es/utils/shallowEqual.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        exports.default = shallowEqual;
        function is(x, y) {
            if (x === y) {
                return x !== 0 || y !== 0 || 1 / x === 1 / y;
            }
            else {
                return x !== x && y !== y;
            }
        }
        function shallowEqual(objA, objB) {
            if (is(objA, objB))
                return true;
            if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
                return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length)
                return false;
            for (var i = 0; i < keysA.length; i++) {
                if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
                    return false;
                }
            }
            return true;
        }
    }),
    "./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.useIsomorphicLayoutEffect = undefined;
        var _react = __webpack_require__("./node_modules/react/index.js");
        var useIsomorphicLayoutEffect = exports.useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? _react.useLayoutEffect : _react.useEffect;
    }),
    "./node_modules/react-redux/es/utils/verifyPlainObject.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = verifyPlainObject;
        var _isPlainObject = __webpack_require__("./node_modules/react-redux/es/utils/isPlainObject.js");
        var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
        var _warning = __webpack_require__("./node_modules/react-redux/es/utils/warning.js");
        var _warning2 = _interopRequireDefault(_warning);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function verifyPlainObject(value, displayName, methodName) {
            if (!(0, _isPlainObject2.default)(value)) {
                (0, _warning2.default)(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
            }
        }
    }),
    "./node_modules/react-redux/es/utils/warning.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = warning;
        function warning(message) {
            if (typeof console !== 'undefined' && typeof console.error === 'function') {
                console.error(message);
            }
            try {
                throw new Error(message);
            }
            catch (e) { }
        }
    }),
    "./node_modules/react-router-dom/esm/react-router-dom.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.NavLink = exports.Link = exports.HashRouter = exports.BrowserRouter = exports.withRouter = exports.useRouteMatch = exports.useParams = exports.useLocation = exports.useHistory = exports.matchPath = exports.generatePath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.MemoryRouter = undefined;
        var _reactRouter = __webpack_require__("./node_modules/react-router/esm/react-router.js");
        Object.defineProperty(exports, 'MemoryRouter', {
            enumerable: true,
            get: function get() {
                return _reactRouter.MemoryRouter;
            }
        });
        Object.defineProperty(exports, 'Prompt', {
            enumerable: true,
            get: function get() {
                return _reactRouter.Prompt;
            }
        });
        Object.defineProperty(exports, 'Redirect', {
            enumerable: true,
            get: function get() {
                return _reactRouter.Redirect;
            }
        });
        Object.defineProperty(exports, 'Route', {
            enumerable: true,
            get: function get() {
                return _reactRouter.Route;
            }
        });
        Object.defineProperty(exports, 'Router', {
            enumerable: true,
            get: function get() {
                return _reactRouter.Router;
            }
        });
        Object.defineProperty(exports, 'StaticRouter', {
            enumerable: true,
            get: function get() {
                return _reactRouter.StaticRouter;
            }
        });
        Object.defineProperty(exports, 'Switch', {
            enumerable: true,
            get: function get() {
                return _reactRouter.Switch;
            }
        });
        Object.defineProperty(exports, 'generatePath', {
            enumerable: true,
            get: function get() {
                return _reactRouter.generatePath;
            }
        });
        Object.defineProperty(exports, 'matchPath', {
            enumerable: true,
            get: function get() {
                return _reactRouter.matchPath;
            }
        });
        Object.defineProperty(exports, 'useHistory', {
            enumerable: true,
            get: function get() {
                return _reactRouter.useHistory;
            }
        });
        Object.defineProperty(exports, 'useLocation', {
            enumerable: true,
            get: function get() {
                return _reactRouter.useLocation;
            }
        });
        Object.defineProperty(exports, 'useParams', {
            enumerable: true,
            get: function get() {
                return _reactRouter.useParams;
            }
        });
        Object.defineProperty(exports, 'useRouteMatch', {
            enumerable: true,
            get: function get() {
                return _reactRouter.useRouteMatch;
            }
        });
        Object.defineProperty(exports, 'withRouter', {
            enumerable: true,
            get: function get() {
                return _reactRouter.withRouter;
            }
        });
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _history = __webpack_require__("./node_modules/history/esm/history.js");
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _tinyWarning = __webpack_require__("./node_modules/tiny-warning/dist/tiny-warning.esm.js");
        var _tinyWarning2 = _interopRequireDefault(_tinyWarning);
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _tinyInvariant = __webpack_require__("./node_modules/tiny-invariant/dist/tiny-invariant.esm.js");
        var _tinyInvariant2 = _interopRequireDefault(_tinyInvariant);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var BrowserRouter = function (_React$Component) {
            (0, _inheritsLoose3.default)(BrowserRouter, _React$Component);
            function BrowserRouter() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
                _this.history = (0, _history.createBrowserHistory)(_this.props);
                return _this;
            }
            var _proto = BrowserRouter.prototype;
            _proto.render = function render() {
                return _react2.default.createElement(_reactRouter.Router, {
                    history: this.history,
                    children: this.props.children
                });
            };
            return BrowserRouter;
        }(_react2.default.Component);
        if (true) {
            BrowserRouter.propTypes = {
                basename: _propTypes2.default.string,
                children: _propTypes2.default.node,
                forceRefresh: _propTypes2.default.bool,
                getUserConfirmation: _propTypes2.default.func,
                keyLength: _propTypes2.default.number
            };
            BrowserRouter.prototype.componentDidMount = function () {
                true ? (0, _tinyWarning2.default)(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") : undefined;
            };
        }
        var HashRouter = function (_React$Component) {
            (0, _inheritsLoose3.default)(HashRouter, _React$Component);
            function HashRouter() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
                _this.history = (0, _history.createHashHistory)(_this.props);
                return _this;
            }
            var _proto = HashRouter.prototype;
            _proto.render = function render() {
                return _react2.default.createElement(_reactRouter.Router, {
                    history: this.history,
                    children: this.props.children
                });
            };
            return HashRouter;
        }(_react2.default.Component);
        if (true) {
            HashRouter.propTypes = {
                basename: _propTypes2.default.string,
                children: _propTypes2.default.node,
                getUserConfirmation: _propTypes2.default.func,
                hashType: _propTypes2.default.oneOf(["hashbang", "noslash", "slash"])
            };
            HashRouter.prototype.componentDidMount = function () {
                true ? (0, _tinyWarning2.default)(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") : undefined;
            };
        }
        var resolveToLocation = function resolveToLocation(to, currentLocation) {
            return typeof to === "function" ? to(currentLocation) : to;
        };
        var normalizeToLocation = function normalizeToLocation(to, currentLocation) {
            return typeof to === "string" ? (0, _history.createLocation)(to, null, null, currentLocation) : to;
        };
        var forwardRefShim = function forwardRefShim(C) {
            return C;
        };
        var forwardRef = _react2.default.forwardRef;
        if (typeof forwardRef === "undefined") {
            forwardRef = forwardRefShim;
        }
        function isModifiedEvent(event) {
            return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
        }
        var LinkAnchor = forwardRef(function (_ref, forwardedRef) {
            var innerRef = _ref.innerRef, navigate = _ref.navigate, _onClick = _ref.onClick, rest = (0, _objectWithoutPropertiesLoose3.default)(_ref, ["innerRef", "navigate", "onClick"]);
            var target = rest.target;
            var props = (0, _extends3.default)({}, rest, {
                onClick: function onClick(event) {
                    try {
                        if (_onClick)
                            _onClick(event);
                    }
                    catch (ex) {
                        event.preventDefault();
                        throw ex;
                    }
                    if (!event.defaultPrevented &&
                        event.button === 0 && (!target || target === "_self") &&
                        !isModifiedEvent(event)) {
                        event.preventDefault();
                        navigate();
                    }
                }
            });
            if (forwardRefShim !== forwardRef) {
                props.ref = forwardedRef || innerRef;
            }
            else {
                props.ref = innerRef;
            }
            return _react2.default.createElement("a", props);
        });
        if (true) {
            LinkAnchor.displayName = "LinkAnchor";
        }
        var Link = forwardRef(function (_ref2, forwardedRef) {
            var _ref2$component = _ref2.component, component = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace = _ref2.replace, to = _ref2.to, innerRef = _ref2.innerRef, rest = (0, _objectWithoutPropertiesLoose3.default)(_ref2, ["component", "replace", "to", "innerRef"]);
            return _react2.default.createElement(_reactRouter.__RouterContext.Consumer, null, function (context) {
                !context ? true ? (0, _tinyInvariant2.default)(false, "You should not use <Link> outside a <Router>") : undefined : void 0;
                var history = context.history;
                var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
                var href = location ? history.createHref(location) : "";
                var props = (0, _extends3.default)({}, rest, {
                    href: href,
                    navigate: function navigate() {
                        var location = resolveToLocation(to, context.location);
                        var method = replace ? history.replace : history.push;
                        method(location);
                    }
                });
                if (forwardRefShim !== forwardRef) {
                    props.ref = forwardedRef || innerRef;
                }
                else {
                    props.innerRef = innerRef;
                }
                return _react2.default.createElement(component, props);
            });
        });
        if (true) {
            var toType = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.func]);
            var refType = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.shape({
                    current: _propTypes2.default.any
                })]);
            Link.displayName = "Link";
            Link.propTypes = {
                innerRef: refType,
                onClick: _propTypes2.default.func,
                replace: _propTypes2.default.bool,
                target: _propTypes2.default.string,
                to: toType.isRequired
            };
        }
        var forwardRefShim$1 = function forwardRefShim(C) {
            return C;
        };
        var forwardRef$1 = _react2.default.forwardRef;
        if (typeof forwardRef$1 === "undefined") {
            forwardRef$1 = forwardRefShim$1;
        }
        function joinClassnames() {
            for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
                classnames[_key] = arguments[_key];
            }
            return classnames.filter(function (i) {
                return i;
            }).join(" ");
        }
        var NavLink = forwardRef$1(function (_ref, forwardedRef) {
            var _ref$ariaCurrent = _ref["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref.activeStyle, classNameProp = _ref.className, exact = _ref.exact, isActiveProp = _ref.isActive, locationProp = _ref.location, sensitive = _ref.sensitive, strict = _ref.strict, styleProp = _ref.style, to = _ref.to, innerRef = _ref.innerRef, rest = (0, _objectWithoutPropertiesLoose3.default)(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);
            return _react2.default.createElement(_reactRouter.__RouterContext.Consumer, null, function (context) {
                !context ? true ? (0, _tinyInvariant2.default)(false, "You should not use <NavLink> outside a <Router>") : undefined : void 0;
                var currentLocation = locationProp || context.location;
                var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
                var path = toLocation.pathname;
                var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
                var match = escapedPath ? (0, _reactRouter.matchPath)(currentLocation.pathname, {
                    path: escapedPath,
                    exact: exact,
                    sensitive: sensitive,
                    strict: strict
                }) : null;
                var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
                var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
                var style = isActive ? (0, _extends3.default)({}, styleProp, {}, activeStyle) : styleProp;
                var props = (0, _extends3.default)({
                    "aria-current": isActive && ariaCurrent || null,
                    className: className,
                    style: style,
                    to: toLocation
                }, rest);
                if (forwardRefShim$1 !== forwardRef$1) {
                    props.ref = forwardedRef || innerRef;
                }
                else {
                    props.innerRef = innerRef;
                }
                return _react2.default.createElement(Link, props);
            });
        });
        if (true) {
            NavLink.displayName = "NavLink";
            var ariaCurrentType = _propTypes2.default.oneOf(["page", "step", "location", "date", "time", "true"]);
            NavLink.propTypes = (0, _extends3.default)({}, Link.propTypes, {
                "aria-current": ariaCurrentType,
                activeClassName: _propTypes2.default.string,
                activeStyle: _propTypes2.default.object,
                className: _propTypes2.default.string,
                exact: _propTypes2.default.bool,
                isActive: _propTypes2.default.func,
                location: _propTypes2.default.object,
                sensitive: _propTypes2.default.bool,
                strict: _propTypes2.default.bool,
                style: _propTypes2.default.object
            });
        }
        exports.BrowserRouter = BrowserRouter;
        exports.HashRouter = HashRouter;
        exports.Link = Link;
        exports.NavLink = NavLink;
    }),
    "./node_modules/react-router/esm/react-router.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.withRouter = exports.useRouteMatch = exports.useParams = exports.useLocation = exports.useHistory = exports.matchPath = exports.generatePath = exports.__RouterContext = exports.__HistoryContext = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.MemoryRouter = undefined;
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _history = __webpack_require__("./node_modules/history/esm/history.js");
        var _tinyWarning = __webpack_require__("./node_modules/tiny-warning/dist/tiny-warning.esm.js");
        var _tinyWarning2 = _interopRequireDefault(_tinyWarning);
        var _miniCreateReactContext = __webpack_require__("./node_modules/mini-create-react-context/dist/esm/index.js");
        var _miniCreateReactContext2 = _interopRequireDefault(_miniCreateReactContext);
        var _tinyInvariant = __webpack_require__("./node_modules/tiny-invariant/dist/tiny-invariant.esm.js");
        var _tinyInvariant2 = _interopRequireDefault(_tinyInvariant);
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _pathToRegexp = __webpack_require__("./node_modules/path-to-regexp/index.js");
        var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);
        var _reactIs = __webpack_require__("./node_modules/react-is/index.js");
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _hoistNonReactStatics = __webpack_require__("./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
        var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var createNamedContext = function createNamedContext(name) {
            var context = (0, _miniCreateReactContext2.default)();
            context.displayName = name;
            return context;
        };
        var historyContext = createNamedContext("Router-History");
        var createNamedContext$1 = function createNamedContext(name) {
            var context = (0, _miniCreateReactContext2.default)();
            context.displayName = name;
            return context;
        };
        var context = createNamedContext$1("Router");
        var Router = function (_React$Component) {
            (0, _inheritsLoose3.default)(Router, _React$Component);
            Router.computeRootMatch = function computeRootMatch(pathname) {
                return {
                    path: "/",
                    url: "/",
                    params: {},
                    isExact: pathname === "/"
                };
            };
            function Router(props) {
                var _this;
                _this = _React$Component.call(this, props) || this;
                _this.state = {
                    location: props.history.location
                };
                _this._isMounted = false;
                _this._pendingLocation = null;
                if (!props.staticContext) {
                    _this.unlisten = props.history.listen(function (location) {
                        if (_this._isMounted) {
                            _this.setState({
                                location: location
                            });
                        }
                        else {
                            _this._pendingLocation = location;
                        }
                    });
                }
                return _this;
            }
            var _proto = Router.prototype;
            _proto.componentDidMount = function componentDidMount() {
                this._isMounted = true;
                if (this._pendingLocation) {
                    this.setState({
                        location: this._pendingLocation
                    });
                }
            };
            _proto.componentWillUnmount = function componentWillUnmount() {
                if (this.unlisten)
                    this.unlisten();
            };
            _proto.render = function render() {
                return _react2.default.createElement(context.Provider, {
                    value: {
                        history: this.props.history,
                        location: this.state.location,
                        match: Router.computeRootMatch(this.state.location.pathname),
                        staticContext: this.props.staticContext
                    }
                }, _react2.default.createElement(historyContext.Provider, {
                    children: this.props.children || null,
                    value: this.props.history
                }));
            };
            return Router;
        }(_react2.default.Component);
        if (true) {
            Router.propTypes = {
                children: _propTypes2.default.node,
                history: _propTypes2.default.object.isRequired,
                staticContext: _propTypes2.default.object
            };
            Router.prototype.componentDidUpdate = function (prevProps) {
                true ? (0, _tinyWarning2.default)(prevProps.history === this.props.history, "You cannot change <Router history>") : undefined;
            };
        }
        var MemoryRouter = function (_React$Component) {
            (0, _inheritsLoose3.default)(MemoryRouter, _React$Component);
            function MemoryRouter() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
                _this.history = (0, _history.createMemoryHistory)(_this.props);
                return _this;
            }
            var _proto = MemoryRouter.prototype;
            _proto.render = function render() {
                return _react2.default.createElement(Router, {
                    history: this.history,
                    children: this.props.children
                });
            };
            return MemoryRouter;
        }(_react2.default.Component);
        if (true) {
            MemoryRouter.propTypes = {
                initialEntries: _propTypes2.default.array,
                initialIndex: _propTypes2.default.number,
                getUserConfirmation: _propTypes2.default.func,
                keyLength: _propTypes2.default.number,
                children: _propTypes2.default.node
            };
            MemoryRouter.prototype.componentDidMount = function () {
                true ? (0, _tinyWarning2.default)(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.") : undefined;
            };
        }
        var Lifecycle = function (_React$Component) {
            (0, _inheritsLoose3.default)(Lifecycle, _React$Component);
            function Lifecycle() {
                return _React$Component.apply(this, arguments) || this;
            }
            var _proto = Lifecycle.prototype;
            _proto.componentDidMount = function componentDidMount() {
                if (this.props.onMount)
                    this.props.onMount.call(this, this);
            };
            _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
                if (this.props.onUpdate)
                    this.props.onUpdate.call(this, this, prevProps);
            };
            _proto.componentWillUnmount = function componentWillUnmount() {
                if (this.props.onUnmount)
                    this.props.onUnmount.call(this, this);
            };
            _proto.render = function render() {
                return null;
            };
            return Lifecycle;
        }(_react2.default.Component);
        function Prompt(_ref) {
            var message = _ref.message, _ref$when = _ref.when, when = _ref$when === void 0 ? true : _ref$when;
            return _react2.default.createElement(context.Consumer, null, function (context) {
                !context ? true ? (0, _tinyInvariant2.default)(false, "You should not use <Prompt> outside a <Router>") : undefined : void 0;
                if (!when || context.staticContext)
                    return null;
                var method = context.history.block;
                return _react2.default.createElement(Lifecycle, {
                    onMount: function onMount(self) {
                        self.release = method(message);
                    },
                    onUpdate: function onUpdate(self, prevProps) {
                        if (prevProps.message !== message) {
                            self.release();
                            self.release = method(message);
                        }
                    },
                    onUnmount: function onUnmount(self) {
                        self.release();
                    },
                    message: message
                });
            });
        }
        if (true) {
            var messageType = _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]);
            Prompt.propTypes = {
                when: _propTypes2.default.bool,
                message: messageType.isRequired
            };
        }
        var cache = {};
        var cacheLimit = 10000;
        var cacheCount = 0;
        function compilePath(path) {
            if (cache[path])
                return cache[path];
            var generator = _pathToRegexp2.default.compile(path);
            if (cacheCount < cacheLimit) {
                cache[path] = generator;
                cacheCount++;
            }
            return generator;
        }
        function generatePath(path, params) {
            if (path === void 0) {
                path = "/";
            }
            if (params === void 0) {
                params = {};
            }
            return path === "/" ? path : compilePath(path)(params, {
                pretty: true
            });
        }
        function Redirect(_ref) {
            var computedMatch = _ref.computedMatch, to = _ref.to, _ref$push = _ref.push, push = _ref$push === void 0 ? false : _ref$push;
            return _react2.default.createElement(context.Consumer, null, function (context) {
                !context ? true ? (0, _tinyInvariant2.default)(false, "You should not use <Redirect> outside a <Router>") : undefined : void 0;
                var history = context.history, staticContext = context.staticContext;
                var method = push ? history.push : history.replace;
                var location = (0, _history.createLocation)(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : (0, _extends3.default)({}, to, {
                    pathname: generatePath(to.pathname, computedMatch.params)
                }) : to);
                if (staticContext) {
                    method(location);
                    return null;
                }
                return _react2.default.createElement(Lifecycle, {
                    onMount: function onMount() {
                        method(location);
                    },
                    onUpdate: function onUpdate(self, prevProps) {
                        var prevLocation = (0, _history.createLocation)(prevProps.to);
                        if (!(0, _history.locationsAreEqual)(prevLocation, (0, _extends3.default)({}, location, {
                            key: prevLocation.key
                        }))) {
                            method(location);
                        }
                    },
                    to: to
                });
            });
        }
        if (true) {
            Redirect.propTypes = {
                push: _propTypes2.default.bool,
                from: _propTypes2.default.string,
                to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
            };
        }
        var cache$1 = {};
        var cacheLimit$1 = 10000;
        var cacheCount$1 = 0;
        function compilePath$1(path, options) {
            var cacheKey = "" + options.end + options.strict + options.sensitive;
            var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
            if (pathCache[path])
                return pathCache[path];
            var keys = [];
            var regexp = (0, _pathToRegexp2.default)(path, keys, options);
            var result = {
                regexp: regexp,
                keys: keys
            };
            if (cacheCount$1 < cacheLimit$1) {
                pathCache[path] = result;
                cacheCount$1++;
            }
            return result;
        }
        function matchPath(pathname, options) {
            if (options === void 0) {
                options = {};
            }
            if (typeof options === "string" || Array.isArray(options)) {
                options = {
                    path: options
                };
            }
            var _options = options, path = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
            var paths = [].concat(path);
            return paths.reduce(function (matched, path) {
                if (!path && path !== "")
                    return null;
                if (matched)
                    return matched;
                var _compilePath = compilePath$1(path, {
                    end: exact,
                    strict: strict,
                    sensitive: sensitive
                }), regexp = _compilePath.regexp, keys = _compilePath.keys;
                var match = regexp.exec(pathname);
                if (!match)
                    return null;
                var url = match[0], values = match.slice(1);
                var isExact = pathname === url;
                if (exact && !isExact)
                    return null;
                return {
                    path: path,
                    url: path === "/" && url === "" ? "/" : url,
                    isExact: isExact,
                    params: keys.reduce(function (memo, key, index) {
                        memo[key.name] = values[index];
                        return memo;
                    }, {})
                };
            }, null);
        }
        function isEmptyChildren(children) {
            return _react2.default.Children.count(children) === 0;
        }
        function evalChildrenDev(children, props, path) {
            var value = children(props);
            true ? (0, _tinyWarning2.default)(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") : undefined;
            return value || null;
        }
        var Route = function (_React$Component) {
            (0, _inheritsLoose3.default)(Route, _React$Component);
            function Route() {
                return _React$Component.apply(this, arguments) || this;
            }
            var _proto = Route.prototype;
            _proto.render = function render() {
                var _this = this;
                return _react2.default.createElement(context.Consumer, null, function (context$1) {
                    !context$1 ? true ? (0, _tinyInvariant2.default)(false, "You should not use <Route> outside a <Router>") : undefined : void 0;
                    var location = _this.props.location || context$1.location;
                    var match = _this.props.computedMatch ? _this.props.computedMatch
                        : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;
                    var props = (0, _extends3.default)({}, context$1, {
                        location: location,
                        match: match
                    });
                    var _this$props = _this.props, children = _this$props.children, component = _this$props.component, render = _this$props.render;
                    if (Array.isArray(children) && children.length === 0) {
                        children = null;
                    }
                    return _react2.default.createElement(context.Provider, {
                        value: props
                    }, props.match ? children ? typeof children === "function" ? true ? evalChildrenDev(children, props, _this.props.path) : undefined : children : component ? _react2.default.createElement(component, props) : render ? render(props) : null : typeof children === "function" ? true ? evalChildrenDev(children, props, _this.props.path) : undefined : null);
                });
            };
            return Route;
        }(_react2.default.Component);
        if (true) {
            Route.propTypes = {
                children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
                component: function component(props, propName) {
                    if (props[propName] && !(0, _reactIs.isValidElementType)(props[propName])) {
                        return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
                    }
                },
                exact: _propTypes2.default.bool,
                location: _propTypes2.default.object,
                path: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
                render: _propTypes2.default.func,
                sensitive: _propTypes2.default.bool,
                strict: _propTypes2.default.bool
            };
            Route.prototype.componentDidMount = function () {
                true ? (0, _tinyWarning2.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") : undefined;
                true ? (0, _tinyWarning2.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") : undefined;
                true ? (0, _tinyWarning2.default)(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") : undefined;
            };
            Route.prototype.componentDidUpdate = function (prevProps) {
                true ? (0, _tinyWarning2.default)(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : undefined;
                true ? (0, _tinyWarning2.default)(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : undefined;
            };
        }
        function addLeadingSlash(path) {
            return path.charAt(0) === "/" ? path : "/" + path;
        }
        function addBasename(basename, location) {
            if (!basename)
                return location;
            return (0, _extends3.default)({}, location, {
                pathname: addLeadingSlash(basename) + location.pathname
            });
        }
        function stripBasename(basename, location) {
            if (!basename)
                return location;
            var base = addLeadingSlash(basename);
            if (location.pathname.indexOf(base) !== 0)
                return location;
            return (0, _extends3.default)({}, location, {
                pathname: location.pathname.substr(base.length)
            });
        }
        function createURL(location) {
            return typeof location === "string" ? location : (0, _history.createPath)(location);
        }
        function staticHandler(methodName) {
            return function () {
                true ? (0, _tinyInvariant2.default)(false, "You cannot %s with <StaticRouter>", methodName) : undefined;
            };
        }
        function noop() { }
        var StaticRouter = function (_React$Component) {
            (0, _inheritsLoose3.default)(StaticRouter, _React$Component);
            function StaticRouter() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
                _this.handlePush = function (location) {
                    return _this.navigateTo(location, "PUSH");
                };
                _this.handleReplace = function (location) {
                    return _this.navigateTo(location, "REPLACE");
                };
                _this.handleListen = function () {
                    return noop;
                };
                _this.handleBlock = function () {
                    return noop;
                };
                return _this;
            }
            var _proto = StaticRouter.prototype;
            _proto.navigateTo = function navigateTo(location, action) {
                var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context = _this$props$context === void 0 ? {} : _this$props$context;
                context.action = action;
                context.location = addBasename(basename, (0, _history.createLocation)(location));
                context.url = createURL(context.location);
            };
            _proto.render = function render() {
                var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context = _this$props2$context === void 0 ? {} : _this$props2$context, _this$props2$location = _this$props2.location, location = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props2, ["basename", "context", "location"]);
                var history = {
                    createHref: function createHref(path) {
                        return addLeadingSlash(basename + createURL(path));
                    },
                    action: "POP",
                    location: stripBasename(basename, (0, _history.createLocation)(location)),
                    push: this.handlePush,
                    replace: this.handleReplace,
                    go: staticHandler("go"),
                    goBack: staticHandler("goBack"),
                    goForward: staticHandler("goForward"),
                    listen: this.handleListen,
                    block: this.handleBlock
                };
                return _react2.default.createElement(Router, (0, _extends3.default)({}, rest, {
                    history: history,
                    staticContext: context
                }));
            };
            return StaticRouter;
        }(_react2.default.Component);
        if (true) {
            StaticRouter.propTypes = {
                basename: _propTypes2.default.string,
                context: _propTypes2.default.object,
                location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
            };
            StaticRouter.prototype.componentDidMount = function () {
                true ? (0, _tinyWarning2.default)(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.") : undefined;
            };
        }
        var Switch = function (_React$Component) {
            (0, _inheritsLoose3.default)(Switch, _React$Component);
            function Switch() {
                return _React$Component.apply(this, arguments) || this;
            }
            var _proto = Switch.prototype;
            _proto.render = function render() {
                var _this = this;
                return _react2.default.createElement(context.Consumer, null, function (context) {
                    !context ? true ? (0, _tinyInvariant2.default)(false, "You should not use <Switch> outside a <Router>") : undefined : void 0;
                    var location = _this.props.location || context.location;
                    var element, match;
                    _react2.default.Children.forEach(_this.props.children, function (child) {
                        if (match == null && _react2.default.isValidElement(child)) {
                            element = child;
                            var path = child.props.path || child.props.from;
                            match = path ? matchPath(location.pathname, (0, _extends3.default)({}, child.props, {
                                path: path
                            })) : context.match;
                        }
                    });
                    return match ? _react2.default.cloneElement(element, {
                        location: location,
                        computedMatch: match
                    }) : null;
                });
            };
            return Switch;
        }(_react2.default.Component);
        if (true) {
            Switch.propTypes = {
                children: _propTypes2.default.node,
                location: _propTypes2.default.object
            };
            Switch.prototype.componentDidUpdate = function (prevProps) {
                true ? (0, _tinyWarning2.default)(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : undefined;
                true ? (0, _tinyWarning2.default)(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : undefined;
            };
        }
        function withRouter(Component) {
            var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
            var C = function C(props) {
                var wrappedComponentRef = props.wrappedComponentRef, remainingProps = (0, _objectWithoutPropertiesLoose3.default)(props, ["wrappedComponentRef"]);
                return _react2.default.createElement(context.Consumer, null, function (context) {
                    !context ? true ? (0, _tinyInvariant2.default)(false, "You should not use <" + displayName + " /> outside a <Router>") : undefined : void 0;
                    return _react2.default.createElement(Component, (0, _extends3.default)({}, remainingProps, context, {
                        ref: wrappedComponentRef
                    }));
                });
            };
            C.displayName = displayName;
            C.WrappedComponent = Component;
            if (true) {
                C.propTypes = {
                    wrappedComponentRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.object])
                };
            }
            return (0, _hoistNonReactStatics2.default)(C, Component);
        }
        var useContext = _react2.default.useContext;
        function useHistory() {
            if (true) {
                !(typeof useContext === "function") ? true ? (0, _tinyInvariant2.default)(false, "You must use React >= 16.8 in order to use useHistory()") : undefined : void 0;
            }
            return useContext(historyContext);
        }
        function useLocation() {
            if (true) {
                !(typeof useContext === "function") ? true ? (0, _tinyInvariant2.default)(false, "You must use React >= 16.8 in order to use useLocation()") : undefined : void 0;
            }
            return useContext(context).location;
        }
        function useParams() {
            if (true) {
                !(typeof useContext === "function") ? true ? (0, _tinyInvariant2.default)(false, "You must use React >= 16.8 in order to use useParams()") : undefined : void 0;
            }
            var match = useContext(context).match;
            return match ? match.params : {};
        }
        function useRouteMatch(path) {
            if (true) {
                !(typeof useContext === "function") ? true ? (0, _tinyInvariant2.default)(false, "You must use React >= 16.8 in order to use useRouteMatch()") : undefined : void 0;
            }
            var location = useLocation();
            var match = useContext(context).match;
            return path ? matchPath(location.pathname, path) : match;
        }
        if (true) {
            if (typeof window !== "undefined") {
                var global = window;
                var key = "__react_router_build__";
                var buildNames = {
                    cjs: "CommonJS",
                    esm: "ES modules",
                    umd: "UMD"
                };
                if (global[key] && global[key] !== "esm") {
                    var initialBuildName = buildNames[global[key]];
                    var secondaryBuildName = buildNames["esm"];
                    throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
                }
                global[key] = "esm";
            }
        }
        exports.MemoryRouter = MemoryRouter;
        exports.Prompt = Prompt;
        exports.Redirect = Redirect;
        exports.Route = Route;
        exports.Router = Router;
        exports.StaticRouter = StaticRouter;
        exports.Switch = Switch;
        exports.__HistoryContext = historyContext;
        exports.__RouterContext = context;
        exports.generatePath = generatePath;
        exports.matchPath = matchPath;
        exports.useHistory = useHistory;
        exports.useLocation = useLocation;
        exports.useParams = useParams;
        exports.useRouteMatch = useRouteMatch;
        exports.withRouter = withRouter;
    }),
    "./node_modules/react/cjs/react.development.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        if (true) {
            (function () {
                'use strict';
                var _assign = __webpack_require__("./node_modules/object-assign/index.js");
                var checkPropTypes = __webpack_require__("./node_modules/prop-types/checkPropTypes.js");
                var ReactVersion = '16.13.0';
                var hasSymbol = typeof Symbol === 'function' && Symbol.for;
                var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
                var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
                var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
                var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
                var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
                var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
                var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
                var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
                var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
                var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
                var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
                var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
                var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
                var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
                var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
                var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
                var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
                var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = '@@iterator';
                function getIteratorFn(maybeIterable) {
                    if (maybeIterable === null || (typeof maybeIterable === 'undefined' ? 'undefined' : _typeof(maybeIterable)) !== 'object') {
                        return null;
                    }
                    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
                    if (typeof maybeIterator === 'function') {
                        return maybeIterator;
                    }
                    return null;
                }
                var ReactCurrentDispatcher = {
                    current: null
                };
                var ReactCurrentBatchConfig = {
                    suspense: null
                };
                var ReactCurrentOwner = {
                    current: null
                };
                var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
                function describeComponentFrame(name, source, ownerName) {
                    var sourceInfo = '';
                    if (source) {
                        var path = source.fileName;
                        var fileName = path.replace(BEFORE_SLASH_RE, '');
                        {
                            if (/^index\./.test(fileName)) {
                                var match = path.match(BEFORE_SLASH_RE);
                                if (match) {
                                    var pathBeforeSlash = match[1];
                                    if (pathBeforeSlash) {
                                        var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                                        fileName = folderName + '/' + fileName;
                                    }
                                }
                            }
                        }
                        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
                    }
                    else if (ownerName) {
                        sourceInfo = ' (created by ' + ownerName + ')';
                    }
                    return '\n    in ' + (name || 'Unknown') + sourceInfo;
                }
                var Resolved = 1;
                function refineResolvedLazyComponent(lazyComponent) {
                    return lazyComponent._status === Resolved ? lazyComponent._result : null;
                }
                function getWrappedName(outerType, innerType, wrapperName) {
                    var functionName = innerType.displayName || innerType.name || '';
                    return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
                }
                function getComponentName(type) {
                    if (type == null) {
                        return null;
                    }
                    {
                        if (typeof type.tag === 'number') {
                            error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
                        }
                    }
                    if (typeof type === 'function') {
                        return type.displayName || type.name || null;
                    }
                    if (typeof type === 'string') {
                        return type;
                    }
                    switch (type) {
                        case REACT_FRAGMENT_TYPE:
                            return 'Fragment';
                        case REACT_PORTAL_TYPE:
                            return 'Portal';
                        case REACT_PROFILER_TYPE:
                            return "Profiler";
                        case REACT_STRICT_MODE_TYPE:
                            return 'StrictMode';
                        case REACT_SUSPENSE_TYPE:
                            return 'Suspense';
                        case REACT_SUSPENSE_LIST_TYPE:
                            return 'SuspenseList';
                    }
                    if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {
                        switch (type.$$typeof) {
                            case REACT_CONTEXT_TYPE:
                                return 'Context.Consumer';
                            case REACT_PROVIDER_TYPE:
                                return 'Context.Provider';
                            case REACT_FORWARD_REF_TYPE:
                                return getWrappedName(type, type.render, 'ForwardRef');
                            case REACT_MEMO_TYPE:
                                return getComponentName(type.type);
                            case REACT_BLOCK_TYPE:
                                return getComponentName(type.render);
                            case REACT_LAZY_TYPE:
                                {
                                    var thenable = type;
                                    var resolvedThenable = refineResolvedLazyComponent(thenable);
                                    if (resolvedThenable) {
                                        return getComponentName(resolvedThenable);
                                    }
                                    break;
                                }
                        }
                    }
                    return null;
                }
                var ReactDebugCurrentFrame = {};
                var currentlyValidatingElement = null;
                function setCurrentlyValidatingElement(element) {
                    {
                        currentlyValidatingElement = element;
                    }
                }
                {
                    ReactDebugCurrentFrame.getCurrentStack = null;
                    ReactDebugCurrentFrame.getStackAddendum = function () {
                        var stack = '';
                        if (currentlyValidatingElement) {
                            var name = getComponentName(currentlyValidatingElement.type);
                            var owner = currentlyValidatingElement._owner;
                            stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
                        }
                        var impl = ReactDebugCurrentFrame.getCurrentStack;
                        if (impl) {
                            stack += impl() || '';
                        }
                        return stack;
                    };
                }
                var IsSomeRendererActing = {
                    current: false
                };
                var ReactSharedInternals = {
                    ReactCurrentDispatcher: ReactCurrentDispatcher,
                    ReactCurrentBatchConfig: ReactCurrentBatchConfig,
                    ReactCurrentOwner: ReactCurrentOwner,
                    IsSomeRendererActing: IsSomeRendererActing,
                    assign: _assign
                };
                {
                    _assign(ReactSharedInternals, {
                        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
                        ReactComponentTreeHook: {}
                    });
                }
                function warn(format) {
                    {
                        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            args[_key - 1] = arguments[_key];
                        }
                        printWarning('warn', format, args);
                    }
                }
                function error(format) {
                    {
                        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                            args[_key2 - 1] = arguments[_key2];
                        }
                        printWarning('error', format, args);
                    }
                }
                function printWarning(level, format, args) {
                    {
                        var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;
                        if (!hasExistingStack) {
                            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                            var stack = ReactDebugCurrentFrame.getStackAddendum();
                            if (stack !== '') {
                                format += '%s';
                                args = args.concat([stack]);
                            }
                        }
                        var argsWithFormat = args.map(function (item) {
                            return '' + item;
                        });
                        argsWithFormat.unshift('Warning: ' + format);
                        Function.prototype.apply.call(console[level], console, argsWithFormat);
                        try {
                            var argIndex = 0;
                            var message = 'Warning: ' + format.replace(/%s/g, function () {
                                return args[argIndex++];
                            });
                            throw new Error(message);
                        }
                        catch (x) { }
                    }
                }
                var didWarnStateUpdateForUnmountedComponent = {};
                function warnNoop(publicInstance, callerName) {
                    {
                        var _constructor = publicInstance.constructor;
                        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
                        var warningKey = componentName + "." + callerName;
                        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                            return;
                        }
                        error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
                        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
                    }
                }
                var ReactNoopUpdateQueue = {
                    isMounted: function isMounted(publicInstance) {
                        return false;
                    },
                    enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
                        warnNoop(publicInstance, 'forceUpdate');
                    },
                    enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
                        warnNoop(publicInstance, 'replaceState');
                    },
                    enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
                        warnNoop(publicInstance, 'setState');
                    }
                };
                var emptyObject = {};
                {
                    Object.freeze(emptyObject);
                }
                function Component(props, context, updater) {
                    this.props = props;
                    this.context = context;
                    this.refs = emptyObject;
                    this.updater = updater || ReactNoopUpdateQueue;
                }
                Component.prototype.isReactComponent = {};
                Component.prototype.setState = function (partialState, callback) {
                    if (!((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null)) {
                        {
                            throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
                        }
                    }
                    this.updater.enqueueSetState(this, partialState, callback, 'setState');
                };
                Component.prototype.forceUpdate = function (callback) {
                    this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
                };
                {
                    var deprecatedAPIs = {
                        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
                        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
                    };
                    var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
                        Object.defineProperty(Component.prototype, methodName, {
                            get: function get() {
                                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                                return undefined;
                            }
                        });
                    };
                    for (var fnName in deprecatedAPIs) {
                        if (deprecatedAPIs.hasOwnProperty(fnName)) {
                            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                        }
                    }
                }
                function ComponentDummy() { }
                ComponentDummy.prototype = Component.prototype;
                function PureComponent(props, context, updater) {
                    this.props = props;
                    this.context = context;
                    this.refs = emptyObject;
                    this.updater = updater || ReactNoopUpdateQueue;
                }
                var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
                pureComponentPrototype.constructor = PureComponent;
                _assign(pureComponentPrototype, Component.prototype);
                pureComponentPrototype.isPureReactComponent = true;
                function createRef() {
                    var refObject = {
                        current: null
                    };
                    {
                        Object.seal(refObject);
                    }
                    return refObject;
                }
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var RESERVED_PROPS = {
                    key: true,
                    ref: true,
                    __self: true,
                    __source: true
                };
                var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
                {
                    didWarnAboutStringRefs = {};
                }
                function hasValidRef(config) {
                    {
                        if (hasOwnProperty.call(config, 'ref')) {
                            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
                            if (getter && getter.isReactWarning) {
                                return false;
                            }
                        }
                    }
                    return config.ref !== undefined;
                }
                function hasValidKey(config) {
                    {
                        if (hasOwnProperty.call(config, 'key')) {
                            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
                            if (getter && getter.isReactWarning) {
                                return false;
                            }
                        }
                    }
                    return config.key !== undefined;
                }
                function defineKeyPropWarningGetter(props, displayName) {
                    var warnAboutAccessingKey = function warnAboutAccessingKey() {
                        {
                            if (!specialPropKeyWarningShown) {
                                specialPropKeyWarningShown = true;
                                error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
                            }
                        }
                    };
                    warnAboutAccessingKey.isReactWarning = true;
                    Object.defineProperty(props, 'key', {
                        get: warnAboutAccessingKey,
                        configurable: true
                    });
                }
                function defineRefPropWarningGetter(props, displayName) {
                    var warnAboutAccessingRef = function warnAboutAccessingRef() {
                        {
                            if (!specialPropRefWarningShown) {
                                specialPropRefWarningShown = true;
                                error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
                            }
                        }
                    };
                    warnAboutAccessingRef.isReactWarning = true;
                    Object.defineProperty(props, 'ref', {
                        get: warnAboutAccessingRef,
                        configurable: true
                    });
                }
                function warnIfStringRefCannotBeAutoConverted(config) {
                    {
                        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                            var componentName = getComponentName(ReactCurrentOwner.current.type);
                            if (!didWarnAboutStringRefs[componentName]) {
                                error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                                didWarnAboutStringRefs[componentName] = true;
                            }
                        }
                    }
                }
                var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
                    var element = {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: type,
                        key: key,
                        ref: ref,
                        props: props,
                        _owner: owner
                    };
                    {
                        element._store = {};
                        Object.defineProperty(element._store, 'validated', {
                            configurable: false,
                            enumerable: false,
                            writable: true,
                            value: false
                        });
                        Object.defineProperty(element, '_self', {
                            configurable: false,
                            enumerable: false,
                            writable: false,
                            value: self
                        });
                        Object.defineProperty(element, '_source', {
                            configurable: false,
                            enumerable: false,
                            writable: false,
                            value: source
                        });
                        if (Object.freeze) {
                            Object.freeze(element.props);
                            Object.freeze(element);
                        }
                    }
                    return element;
                };
                function createElement(type, config, children) {
                    var propName;
                    var props = {};
                    var key = null;
                    var ref = null;
                    var self = null;
                    var source = null;
                    if (config != null) {
                        if (hasValidRef(config)) {
                            ref = config.ref;
                            {
                                warnIfStringRefCannotBeAutoConverted(config);
                            }
                        }
                        if (hasValidKey(config)) {
                            key = '' + config.key;
                        }
                        self = config.__self === undefined ? null : config.__self;
                        source = config.__source === undefined ? null : config.__source;
                        for (propName in config) {
                            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                                props[propName] = config[propName];
                            }
                        }
                    }
                    var childrenLength = arguments.length - 2;
                    if (childrenLength === 1) {
                        props.children = children;
                    }
                    else if (childrenLength > 1) {
                        var childArray = Array(childrenLength);
                        for (var i = 0; i < childrenLength; i++) {
                            childArray[i] = arguments[i + 2];
                        }
                        {
                            if (Object.freeze) {
                                Object.freeze(childArray);
                            }
                        }
                        props.children = childArray;
                    }
                    if (type && type.defaultProps) {
                        var defaultProps = type.defaultProps;
                        for (propName in defaultProps) {
                            if (props[propName] === undefined) {
                                props[propName] = defaultProps[propName];
                            }
                        }
                    }
                    {
                        if (key || ref) {
                            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
                            if (key) {
                                defineKeyPropWarningGetter(props, displayName);
                            }
                            if (ref) {
                                defineRefPropWarningGetter(props, displayName);
                            }
                        }
                    }
                    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
                }
                function cloneAndReplaceKey(oldElement, newKey) {
                    var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
                    return newElement;
                }
                function cloneElement(element, config, children) {
                    if (!!(element === null || element === undefined)) {
                        {
                            throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
                        }
                    }
                    var propName;
                    var props = _assign({}, element.props);
                    var key = element.key;
                    var ref = element.ref;
                    var self = element._self;
                    var source = element._source;
                    var owner = element._owner;
                    if (config != null) {
                        if (hasValidRef(config)) {
                            ref = config.ref;
                            owner = ReactCurrentOwner.current;
                        }
                        if (hasValidKey(config)) {
                            key = '' + config.key;
                        }
                        var defaultProps;
                        if (element.type && element.type.defaultProps) {
                            defaultProps = element.type.defaultProps;
                        }
                        for (propName in config) {
                            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                                if (config[propName] === undefined && defaultProps !== undefined) {
                                    props[propName] = defaultProps[propName];
                                }
                                else {
                                    props[propName] = config[propName];
                                }
                            }
                        }
                    }
                    var childrenLength = arguments.length - 2;
                    if (childrenLength === 1) {
                        props.children = children;
                    }
                    else if (childrenLength > 1) {
                        var childArray = Array(childrenLength);
                        for (var i = 0; i < childrenLength; i++) {
                            childArray[i] = arguments[i + 2];
                        }
                        props.children = childArray;
                    }
                    return ReactElement(element.type, key, ref, self, source, owner, props);
                }
                function isValidElement(object) {
                    return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                }
                var SEPARATOR = '.';
                var SUBSEPARATOR = ':';
                function escape(key) {
                    var escapeRegex = /[=:]/g;
                    var escaperLookup = {
                        '=': '=0',
                        ':': '=2'
                    };
                    var escapedString = ('' + key).replace(escapeRegex, function (match) {
                        return escaperLookup[match];
                    });
                    return '$' + escapedString;
                }
                var didWarnAboutMaps = false;
                var userProvidedKeyEscapeRegex = /\/+/g;
                function escapeUserProvidedKey(text) {
                    return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
                }
                var POOL_SIZE = 10;
                var traverseContextPool = [];
                function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
                    if (traverseContextPool.length) {
                        var traverseContext = traverseContextPool.pop();
                        traverseContext.result = mapResult;
                        traverseContext.keyPrefix = keyPrefix;
                        traverseContext.func = mapFunction;
                        traverseContext.context = mapContext;
                        traverseContext.count = 0;
                        return traverseContext;
                    }
                    else {
                        return {
                            result: mapResult,
                            keyPrefix: keyPrefix,
                            func: mapFunction,
                            context: mapContext,
                            count: 0
                        };
                    }
                }
                function releaseTraverseContext(traverseContext) {
                    traverseContext.result = null;
                    traverseContext.keyPrefix = null;
                    traverseContext.func = null;
                    traverseContext.context = null;
                    traverseContext.count = 0;
                    if (traverseContextPool.length < POOL_SIZE) {
                        traverseContextPool.push(traverseContext);
                    }
                }
                function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
                    var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);
                    if (type === 'undefined' || type === 'boolean') {
                        children = null;
                    }
                    var invokeCallback = false;
                    if (children === null) {
                        invokeCallback = true;
                    }
                    else {
                        switch (type) {
                            case 'string':
                            case 'number':
                                invokeCallback = true;
                                break;
                            case 'object':
                                switch (children.$$typeof) {
                                    case REACT_ELEMENT_TYPE:
                                    case REACT_PORTAL_TYPE:
                                        invokeCallback = true;
                                }
                        }
                    }
                    if (invokeCallback) {
                        callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
                        return 1;
                    }
                    var child;
                    var nextName;
                    var subtreeCount = 0;
                    var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                    if (Array.isArray(children)) {
                        for (var i = 0; i < children.length; i++) {
                            child = children[i];
                            nextName = nextNamePrefix + getComponentKey(child, i);
                            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                        }
                    }
                    else {
                        var iteratorFn = getIteratorFn(children);
                        if (typeof iteratorFn === 'function') {
                            {
                                if (iteratorFn === children.entries) {
                                    if (!didWarnAboutMaps) {
                                        warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
                                    }
                                    didWarnAboutMaps = true;
                                }
                            }
                            var iterator = iteratorFn.call(children);
                            var step;
                            var ii = 0;
                            while (!(step = iterator.next()).done) {
                                child = step.value;
                                nextName = nextNamePrefix + getComponentKey(child, ii++);
                                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                            }
                        }
                        else if (type === 'object') {
                            var addendum = '';
                            {
                                addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
                            }
                            var childrenString = '' + children;
                            {
                                {
                                    throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum);
                                }
                            }
                        }
                    }
                    return subtreeCount;
                }
                function traverseAllChildren(children, callback, traverseContext) {
                    if (children == null) {
                        return 0;
                    }
                    return traverseAllChildrenImpl(children, '', callback, traverseContext);
                }
                function getComponentKey(component, index) {
                    if ((typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component !== null && component.key != null) {
                        return escape(component.key);
                    }
                    return index.toString(36);
                }
                function forEachSingleChild(bookKeeping, child, name) {
                    var func = bookKeeping.func, context = bookKeeping.context;
                    func.call(context, child, bookKeeping.count++);
                }
                function forEachChildren(children, forEachFunc, forEachContext) {
                    if (children == null) {
                        return children;
                    }
                    var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
                    traverseAllChildren(children, forEachSingleChild, traverseContext);
                    releaseTraverseContext(traverseContext);
                }
                function mapSingleChildIntoContext(bookKeeping, child, childKey) {
                    var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
                    var mappedChild = func.call(context, child, bookKeeping.count++);
                    if (Array.isArray(mappedChild)) {
                        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
                            return c;
                        });
                    }
                    else if (mappedChild != null) {
                        if (isValidElement(mappedChild)) {
                            mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
                        }
                        result.push(mappedChild);
                    }
                }
                function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
                    var escapedPrefix = '';
                    if (prefix != null) {
                        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
                    }
                    var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
                    traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
                    releaseTraverseContext(traverseContext);
                }
                function mapChildren(children, func, context) {
                    if (children == null) {
                        return children;
                    }
                    var result = [];
                    mapIntoWithKeyPrefixInternal(children, result, null, func, context);
                    return result;
                }
                function countChildren(children) {
                    return traverseAllChildren(children, function () {
                        return null;
                    }, null);
                }
                function toArray(children) {
                    var result = [];
                    mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
                        return child;
                    });
                    return result;
                }
                function onlyChild(children) {
                    if (!isValidElement(children)) {
                        {
                            throw Error("React.Children.only expected to receive a single React element child.");
                        }
                    }
                    return children;
                }
                function createContext(defaultValue, calculateChangedBits) {
                    if (calculateChangedBits === undefined) {
                        calculateChangedBits = null;
                    }
                    else {
                        {
                            if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
                                error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
                            }
                        }
                    }
                    var context = {
                        $$typeof: REACT_CONTEXT_TYPE,
                        _calculateChangedBits: calculateChangedBits,
                        _currentValue: defaultValue,
                        _currentValue2: defaultValue,
                        _threadCount: 0,
                        Provider: null,
                        Consumer: null
                    };
                    context.Provider = {
                        $$typeof: REACT_PROVIDER_TYPE,
                        _context: context
                    };
                    var hasWarnedAboutUsingNestedContextConsumers = false;
                    var hasWarnedAboutUsingConsumerProvider = false;
                    {
                        var Consumer = {
                            $$typeof: REACT_CONTEXT_TYPE,
                            _context: context,
                            _calculateChangedBits: context._calculateChangedBits
                        };
                        Object.defineProperties(Consumer, {
                            Provider: {
                                get: function get() {
                                    if (!hasWarnedAboutUsingConsumerProvider) {
                                        hasWarnedAboutUsingConsumerProvider = true;
                                        error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
                                    }
                                    return context.Provider;
                                },
                                set: function set(_Provider) {
                                    context.Provider = _Provider;
                                }
                            },
                            _currentValue: {
                                get: function get() {
                                    return context._currentValue;
                                },
                                set: function set(_currentValue) {
                                    context._currentValue = _currentValue;
                                }
                            },
                            _currentValue2: {
                                get: function get() {
                                    return context._currentValue2;
                                },
                                set: function set(_currentValue2) {
                                    context._currentValue2 = _currentValue2;
                                }
                            },
                            _threadCount: {
                                get: function get() {
                                    return context._threadCount;
                                },
                                set: function set(_threadCount) {
                                    context._threadCount = _threadCount;
                                }
                            },
                            Consumer: {
                                get: function get() {
                                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                                        hasWarnedAboutUsingNestedContextConsumers = true;
                                        error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                                    }
                                    return context.Consumer;
                                }
                            }
                        });
                        context.Consumer = Consumer;
                    }
                    {
                        context._currentRenderer = null;
                        context._currentRenderer2 = null;
                    }
                    return context;
                }
                function lazy(ctor) {
                    var lazyType = {
                        $$typeof: REACT_LAZY_TYPE,
                        _ctor: ctor,
                        _status: -1,
                        _result: null
                    };
                    {
                        var defaultProps;
                        var propTypes;
                        Object.defineProperties(lazyType, {
                            defaultProps: {
                                configurable: true,
                                get: function get() {
                                    return defaultProps;
                                },
                                set: function set(newDefaultProps) {
                                    error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                                    defaultProps = newDefaultProps;
                                    Object.defineProperty(lazyType, 'defaultProps', {
                                        enumerable: true
                                    });
                                }
                            },
                            propTypes: {
                                configurable: true,
                                get: function get() {
                                    return propTypes;
                                },
                                set: function set(newPropTypes) {
                                    error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                                    propTypes = newPropTypes;
                                    Object.defineProperty(lazyType, 'propTypes', {
                                        enumerable: true
                                    });
                                }
                            }
                        });
                    }
                    return lazyType;
                }
                function forwardRef(render) {
                    {
                        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                            error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
                        }
                        else if (typeof render !== 'function') {
                            error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render === 'undefined' ? 'undefined' : _typeof(render));
                        }
                        else {
                            if (render.length !== 0 && render.length !== 2) {
                                error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
                            }
                        }
                        if (render != null) {
                            if (render.defaultProps != null || render.propTypes != null) {
                                error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
                            }
                        }
                    }
                    return {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: render
                    };
                }
                function isValidElementType(type) {
                    return typeof type === 'string' || typeof type === 'function' ||
                        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
                }
                function memo(type, compare) {
                    {
                        if (!isValidElementType(type)) {
                            error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type === 'undefined' ? 'undefined' : _typeof(type));
                        }
                    }
                    return {
                        $$typeof: REACT_MEMO_TYPE,
                        type: type,
                        compare: compare === undefined ? null : compare
                    };
                }
                function resolveDispatcher() {
                    var dispatcher = ReactCurrentDispatcher.current;
                    if (!(dispatcher !== null)) {
                        {
                            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
                        }
                    }
                    return dispatcher;
                }
                function useContext(Context, unstable_observedBits) {
                    var dispatcher = resolveDispatcher();
                    {
                        if (unstable_observedBits !== undefined) {
                            error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
                        }
                        if (Context._context !== undefined) {
                            var realContext = Context._context;
                            if (realContext.Consumer === Context) {
                                error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
                            }
                            else if (realContext.Provider === Context) {
                                error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
                            }
                        }
                    }
                    return dispatcher.useContext(Context, unstable_observedBits);
                }
                function useState(initialState) {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useState(initialState);
                }
                function useReducer(reducer, initialArg, init) {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useReducer(reducer, initialArg, init);
                }
                function useRef(initialValue) {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useRef(initialValue);
                }
                function useEffect(create, deps) {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useEffect(create, deps);
                }
                function useLayoutEffect(create, deps) {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useLayoutEffect(create, deps);
                }
                function useCallback(callback, deps) {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useCallback(callback, deps);
                }
                function useMemo(create, deps) {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useMemo(create, deps);
                }
                function useImperativeHandle(ref, create, deps) {
                    var dispatcher = resolveDispatcher();
                    return dispatcher.useImperativeHandle(ref, create, deps);
                }
                function useDebugValue(value, formatterFn) {
                    {
                        var dispatcher = resolveDispatcher();
                        return dispatcher.useDebugValue(value, formatterFn);
                    }
                }
                var propTypesMisspellWarningShown;
                {
                    propTypesMisspellWarningShown = false;
                }
                function getDeclarationErrorAddendum() {
                    if (ReactCurrentOwner.current) {
                        var name = getComponentName(ReactCurrentOwner.current.type);
                        if (name) {
                            return '\n\nCheck the render method of `' + name + '`.';
                        }
                    }
                    return '';
                }
                function getSourceInfoErrorAddendum(source) {
                    if (source !== undefined) {
                        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                        var lineNumber = source.lineNumber;
                        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
                    }
                    return '';
                }
                function getSourceInfoErrorAddendumForProps(elementProps) {
                    if (elementProps !== null && elementProps !== undefined) {
                        return getSourceInfoErrorAddendum(elementProps.__source);
                    }
                    return '';
                }
                var ownerHasKeyUseWarning = {};
                function getCurrentComponentErrorInfo(parentType) {
                    var info = getDeclarationErrorAddendum();
                    if (!info) {
                        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
                        if (parentName) {
                            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                        }
                    }
                    return info;
                }
                function validateExplicitKey(element, parentType) {
                    if (!element._store || element._store.validated || element.key != null) {
                        return;
                    }
                    element._store.validated = true;
                    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
                    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                        return;
                    }
                    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                    var childOwner = '';
                    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
                        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
                    }
                    setCurrentlyValidatingElement(element);
                    {
                        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
                    }
                    setCurrentlyValidatingElement(null);
                }
                function validateChildKeys(node, parentType) {
                    if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
                        return;
                    }
                    if (Array.isArray(node)) {
                        for (var i = 0; i < node.length; i++) {
                            var child = node[i];
                            if (isValidElement(child)) {
                                validateExplicitKey(child, parentType);
                            }
                        }
                    }
                    else if (isValidElement(node)) {
                        if (node._store) {
                            node._store.validated = true;
                        }
                    }
                    else if (node) {
                        var iteratorFn = getIteratorFn(node);
                        if (typeof iteratorFn === 'function') {
                            if (iteratorFn !== node.entries) {
                                var iterator = iteratorFn.call(node);
                                var step;
                                while (!(step = iterator.next()).done) {
                                    if (isValidElement(step.value)) {
                                        validateExplicitKey(step.value, parentType);
                                    }
                                }
                            }
                        }
                    }
                }
                function validatePropTypes(element) {
                    {
                        var type = element.type;
                        if (type === null || type === undefined || typeof type === 'string') {
                            return;
                        }
                        var name = getComponentName(type);
                        var propTypes;
                        if (typeof type === 'function') {
                            propTypes = type.propTypes;
                        }
                        else if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
                            type.$$typeof === REACT_MEMO_TYPE)) {
                            propTypes = type.propTypes;
                        }
                        else {
                            return;
                        }
                        if (propTypes) {
                            setCurrentlyValidatingElement(element);
                            checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
                            setCurrentlyValidatingElement(null);
                        }
                        else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                            propTypesMisspellWarningShown = true;
                            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
                        }
                        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
                            error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
                        }
                    }
                }
                function validateFragmentProps(fragment) {
                    {
                        setCurrentlyValidatingElement(fragment);
                        var keys = Object.keys(fragment.props);
                        for (var i = 0; i < keys.length; i++) {
                            var key = keys[i];
                            if (key !== 'children' && key !== 'key') {
                                error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
                                break;
                            }
                        }
                        if (fragment.ref !== null) {
                            error('Invalid attribute `ref` supplied to `React.Fragment`.');
                        }
                        setCurrentlyValidatingElement(null);
                    }
                }
                function createElementWithValidation(type, props, children) {
                    var validType = isValidElementType(type);
                    if (!validType) {
                        var info = '';
                        if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
                            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
                        }
                        var sourceInfo = getSourceInfoErrorAddendumForProps(props);
                        if (sourceInfo) {
                            info += sourceInfo;
                        }
                        else {
                            info += getDeclarationErrorAddendum();
                        }
                        var typeString;
                        if (type === null) {
                            typeString = 'null';
                        }
                        else if (Array.isArray(type)) {
                            typeString = 'array';
                        }
                        else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                            typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                            info = ' Did you accidentally export a JSX literal instead of a component?';
                        }
                        else {
                            typeString = typeof type === 'undefined' ? 'undefined' : _typeof(type);
                        }
                        {
                            error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
                        }
                    }
                    var element = createElement.apply(this, arguments);
                    if (element == null) {
                        return element;
                    }
                    if (validType) {
                        for (var i = 2; i < arguments.length; i++) {
                            validateChildKeys(arguments[i], type);
                        }
                    }
                    if (type === REACT_FRAGMENT_TYPE) {
                        validateFragmentProps(element);
                    }
                    else {
                        validatePropTypes(element);
                    }
                    return element;
                }
                var didWarnAboutDeprecatedCreateFactory = false;
                function createFactoryWithValidation(type) {
                    var validatedFactory = createElementWithValidation.bind(null, type);
                    validatedFactory.type = type;
                    {
                        if (!didWarnAboutDeprecatedCreateFactory) {
                            didWarnAboutDeprecatedCreateFactory = true;
                            warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
                        }
                        Object.defineProperty(validatedFactory, 'type', {
                            enumerable: false,
                            get: function get() {
                                warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
                                Object.defineProperty(this, 'type', {
                                    value: type
                                });
                                return type;
                            }
                        });
                    }
                    return validatedFactory;
                }
                function cloneElementWithValidation(element, props, children) {
                    var newElement = cloneElement.apply(this, arguments);
                    for (var i = 2; i < arguments.length; i++) {
                        validateChildKeys(arguments[i], newElement.type);
                    }
                    validatePropTypes(newElement);
                    return newElement;
                }
                {
                    try {
                        var frozenObject = Object.freeze({});
                        var testMap = new Map([[frozenObject, null]]);
                        var testSet = new Set([frozenObject]);
                        testMap.set(0, 0);
                        testSet.add(0);
                    }
                    catch (e) { }
                }
                var createElement$1 = createElementWithValidation;
                var cloneElement$1 = cloneElementWithValidation;
                var createFactory = createFactoryWithValidation;
                var Children = {
                    map: mapChildren,
                    forEach: forEachChildren,
                    count: countChildren,
                    toArray: toArray,
                    only: onlyChild
                };
                exports.Children = Children;
                exports.Component = Component;
                exports.Fragment = REACT_FRAGMENT_TYPE;
                exports.Profiler = REACT_PROFILER_TYPE;
                exports.PureComponent = PureComponent;
                exports.StrictMode = REACT_STRICT_MODE_TYPE;
                exports.Suspense = REACT_SUSPENSE_TYPE;
                exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
                exports.cloneElement = cloneElement$1;
                exports.createContext = createContext;
                exports.createElement = createElement$1;
                exports.createFactory = createFactory;
                exports.createRef = createRef;
                exports.forwardRef = forwardRef;
                exports.isValidElement = isValidElement;
                exports.lazy = lazy;
                exports.memo = memo;
                exports.useCallback = useCallback;
                exports.useContext = useContext;
                exports.useDebugValue = useDebugValue;
                exports.useEffect = useEffect;
                exports.useImperativeHandle = useImperativeHandle;
                exports.useLayoutEffect = useLayoutEffect;
                exports.useMemo = useMemo;
                exports.useReducer = useReducer;
                exports.useRef = useRef;
                exports.useState = useState;
                exports.version = ReactVersion;
            })();
        }
    }),
    "./node_modules/react/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        if (false) { }
        else {
            module.exports = __webpack_require__("./node_modules/react/cjs/react.development.js");
        }
    }),
    "./node_modules/redux-form/es/ConnectedField.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _createFieldProps2 = __webpack_require__("./node_modules/redux-form/es/createFieldProps.js");
        var _createFieldProps3 = _interopRequireDefault(_createFieldProps2);
        var _onChangeValue = __webpack_require__("./node_modules/redux-form/es/events/onChangeValue.js");
        var _onChangeValue2 = _interopRequireDefault(_onChangeValue);
        var _eventConsts = __webpack_require__("./node_modules/redux-form/es/util/eventConsts.js");
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        var _isReactNative = __webpack_require__("./node_modules/redux-form/es/isReactNative.js");
        var _isReactNative2 = _interopRequireDefault(_isReactNative);
        var _validateComponentProp = __webpack_require__("./node_modules/redux-form/es/util/validateComponentProp.js");
        var _validateComponentProp2 = _interopRequireDefault(_validateComponentProp);
        var _isEvent = __webpack_require__("./node_modules/redux-form/es/events/isEvent.js");
        var _isEvent2 = _interopRequireDefault(_isEvent);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var propsToNotUpdateFor = ['_reduxForm'];
        var isObject = function isObject(entity) {
            return entity && (typeof entity === "undefined" ? "undefined" : _typeof(entity)) === 'object';
        };
        var isFunction = function isFunction(entity) {
            return entity && typeof entity === 'function';
        };
        var eventPreventDefault = function eventPreventDefault(event) {
            if (isObject(event) && isFunction(event.preventDefault)) {
                event.preventDefault();
            }
        };
        var eventDataTransferGetData = function eventDataTransferGetData(event, key) {
            if (isObject(event) && isObject(event.dataTransfer) && isFunction(event.dataTransfer.getData)) {
                return event.dataTransfer.getData(key);
            }
        };
        var eventDataTransferSetData = function eventDataTransferSetData(event, key, value) {
            if (isObject(event) && isObject(event.dataTransfer) && isFunction(event.dataTransfer.setData)) {
                event.dataTransfer.setData(key, value);
            }
        };
        function createConnectedField(structure) {
            var deepEqual = structure.deepEqual, getIn = structure.getIn;
            var getSyncError = function getSyncError(syncErrors, name) {
                var error = _plain2.default.getIn(syncErrors, name);
                return error && error._error ? error._error : error;
            };
            var getSyncWarning = function getSyncWarning(syncWarnings, name) {
                var warning = getIn(syncWarnings, name);
                return warning && warning._warning ? warning._warning : warning;
            };
            var ConnectedField = function (_Component) {
                (0, _inheritsLoose3.default)(ConnectedField, _Component);
                function ConnectedField() {
                    var _this;
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
                    _this.ref = _react2.default.createRef();
                    _this.isPristine = function () {
                        return _this.props.pristine;
                    };
                    _this.getValue = function () {
                        return _this.props.value;
                    };
                    _this.handleChange = function (event) {
                        var _this$props = _this.props, name = _this$props.name, dispatch = _this$props.dispatch, parse = _this$props.parse, normalize = _this$props.normalize, onChange = _this$props.onChange, _reduxForm = _this$props._reduxForm, previousValue = _this$props.value;
                        var newValue = (0, _onChangeValue2.default)(event, {
                            name: name,
                            parse: parse,
                            normalize: normalize
                        });
                        var defaultPrevented = false;
                        if (onChange) {
                            if (!_isReactNative2.default && (0, _isEvent2.default)(event)) {
                                onChange((0, _extends3.default)({}, event, {
                                    preventDefault: function preventDefault() {
                                        defaultPrevented = true;
                                        return eventPreventDefault(event);
                                    }
                                }), newValue, previousValue, name);
                            }
                            else {
                                var onChangeResult = onChange(event, newValue, previousValue, name);
                                if (_isReactNative2.default) {
                                    defaultPrevented = onChangeResult;
                                }
                            }
                        }
                        if (!defaultPrevented) {
                            dispatch(_reduxForm.change(name, newValue));
                            if (_reduxForm.asyncValidate) {
                                _reduxForm.asyncValidate(name, newValue, 'change');
                            }
                        }
                    };
                    _this.handleFocus = function (event) {
                        var _this$props2 = _this.props, name = _this$props2.name, dispatch = _this$props2.dispatch, onFocus = _this$props2.onFocus, _reduxForm = _this$props2._reduxForm;
                        var defaultPrevented = false;
                        if (onFocus) {
                            if (!_isReactNative2.default) {
                                onFocus((0, _extends3.default)({}, event, {
                                    preventDefault: function preventDefault() {
                                        defaultPrevented = true;
                                        return eventPreventDefault(event);
                                    }
                                }), name);
                            }
                            else {
                                defaultPrevented = onFocus(event, name);
                            }
                        }
                        if (!defaultPrevented) {
                            dispatch(_reduxForm.focus(name));
                        }
                    };
                    _this.handleBlur = function (event) {
                        var _this$props3 = _this.props, name = _this$props3.name, dispatch = _this$props3.dispatch, parse = _this$props3.parse, normalize = _this$props3.normalize, onBlur = _this$props3.onBlur, _reduxForm = _this$props3._reduxForm, _value = _this$props3._value, previousValue = _this$props3.value;
                        var newValue = (0, _onChangeValue2.default)(event, {
                            name: name,
                            parse: parse,
                            normalize: normalize
                        });
                        if (newValue === _value && _value !== undefined) {
                            newValue = previousValue;
                        }
                        var defaultPrevented = false;
                        if (onBlur) {
                            if (!_isReactNative2.default) {
                                onBlur((0, _extends3.default)({}, event, {
                                    preventDefault: function preventDefault() {
                                        defaultPrevented = true;
                                        return eventPreventDefault(event);
                                    }
                                }), newValue, previousValue, name);
                            }
                            else {
                                defaultPrevented = onBlur(event, newValue, previousValue, name);
                            }
                        }
                        if (!defaultPrevented) {
                            dispatch(_reduxForm.blur(name, newValue));
                            if (_reduxForm.asyncValidate) {
                                _reduxForm.asyncValidate(name, newValue, 'blur');
                            }
                        }
                    };
                    _this.handleDragStart = function (event) {
                        var _this$props4 = _this.props, name = _this$props4.name, onDragStart = _this$props4.onDragStart, value = _this$props4.value;
                        eventDataTransferSetData(event, _eventConsts.dataKey, value == null ? '' : value);
                        if (onDragStart) {
                            onDragStart(event, name);
                        }
                    };
                    _this.handleDrop = function (event) {
                        var _this$props5 = _this.props, name = _this$props5.name, dispatch = _this$props5.dispatch, onDrop = _this$props5.onDrop, _reduxForm = _this$props5._reduxForm, previousValue = _this$props5.value;
                        var newValue = eventDataTransferGetData(event, _eventConsts.dataKey);
                        var defaultPrevented = false;
                        if (onDrop) {
                            onDrop((0, _extends3.default)({}, event, {
                                preventDefault: function preventDefault() {
                                    defaultPrevented = true;
                                    return eventPreventDefault(event);
                                }
                            }), newValue, previousValue, name);
                        }
                        if (!defaultPrevented) {
                            dispatch(_reduxForm.change(name, newValue));
                            eventPreventDefault(event);
                        }
                    };
                    return _this;
                }
                var _proto = ConnectedField.prototype;
                _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
                    var _this2 = this;
                    var nextPropsKeys = Object.keys(nextProps);
                    var thisPropsKeys = Object.keys(this.props);
                    return !!(this.props.children || nextProps.children || nextPropsKeys.length !== thisPropsKeys.length || nextPropsKeys.some(function (prop) {
                        if (~(nextProps.immutableProps || []).indexOf(prop)) {
                            return _this2.props[prop] !== nextProps[prop];
                        }
                        return !~propsToNotUpdateFor.indexOf(prop) && !deepEqual(_this2.props[prop], nextProps[prop]);
                    }));
                };
                _proto.getRenderedComponent = function getRenderedComponent() {
                    return this.ref.current;
                };
                _proto.render = function render() {
                    var _this$props6 = this.props, component = _this$props6.component, forwardRef = _this$props6.forwardRef, name = _this$props6.name, _reduxForm = _this$props6._reduxForm, normalize = _this$props6.normalize, onBlur = _this$props6.onBlur, onChange = _this$props6.onChange, onFocus = _this$props6.onFocus, onDragStart = _this$props6.onDragStart, onDrop = _this$props6.onDrop, immutableProps = _this$props6.immutableProps, rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props6, ["component", "forwardRef", "name", "_reduxForm", "normalize", "onBlur", "onChange", "onFocus", "onDragStart", "onDrop", "immutableProps"]);
                    var _createFieldProps = (0, _createFieldProps3.default)(structure, name, (0, _extends3.default)({}, rest, {
                        form: _reduxForm.form,
                        onBlur: this.handleBlur,
                        onChange: this.handleChange,
                        onDrop: this.handleDrop,
                        onDragStart: this.handleDragStart,
                        onFocus: this.handleFocus
                    })), custom = _createFieldProps.custom, props = (0, _objectWithoutPropertiesLoose3.default)(_createFieldProps, ["custom"]);
                    if (forwardRef) {
                        custom.ref = this.ref;
                    }
                    if (typeof component === 'string') {
                        var input = props.input, meta = props.meta;
                        return (0, _react.createElement)(component, (0, _extends3.default)({}, input, {}, custom));
                    }
                    else {
                        return (0, _react.createElement)(component, (0, _extends3.default)({}, props, {}, custom));
                    }
                };
                return ConnectedField;
            }(_react.Component);
            ConnectedField.propTypes = {
                component: _validateComponentProp2.default,
                props: _propTypes2.default.object
            };
            var connector = (0, _reactRedux.connect)(function (state, ownProps) {
                var name = ownProps.name, _ownProps$_reduxForm = ownProps._reduxForm, initialValues = _ownProps$_reduxForm.initialValues, getFormState = _ownProps$_reduxForm.getFormState;
                var formState = getFormState(state);
                var initialState = getIn(formState, "initial." + name);
                var initial = initialState !== undefined ? initialState : initialValues && getIn(initialValues, name);
                var value = getIn(formState, "values." + name);
                var submitting = getIn(formState, 'submitting');
                var syncError = getSyncError(getIn(formState, 'syncErrors'), name);
                var syncWarning = getSyncWarning(getIn(formState, 'syncWarnings'), name);
                var pristine = deepEqual(value, initial);
                return {
                    asyncError: getIn(formState, "asyncErrors." + name),
                    asyncValidating: getIn(formState, 'asyncValidating') === name,
                    dirty: !pristine,
                    pristine: pristine,
                    state: getIn(formState, "fields." + name),
                    submitError: getIn(formState, "submitErrors." + name),
                    submitFailed: getIn(formState, 'submitFailed'),
                    submitting: submitting,
                    syncError: syncError,
                    syncWarning: syncWarning,
                    initial: initial,
                    value: value,
                    _value: ownProps.value
                };
            }, undefined, undefined, {
                forwardRef: true
            });
            return connector(ConnectedField);
        }
        exports.default = createConnectedField;
    }),
    "./node_modules/redux-form/es/ConnectedFieldArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createConnectedFieldArray;
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _createClass2 = __webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js");
        var _createClass3 = _interopRequireDefault(_createClass2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _mapValues2 = __webpack_require__("./node_modules/lodash/mapValues.js");
        var _mapValues3 = _interopRequireDefault(_mapValues2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _redux = __webpack_require__("./node_modules/redux/es/redux.js");
        var _createFieldArrayProps = __webpack_require__("./node_modules/redux-form/es/createFieldArrayProps.js");
        var _createFieldArrayProps2 = _interopRequireDefault(_createFieldArrayProps);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        var _validateComponentProp = __webpack_require__("./node_modules/redux-form/es/util/validateComponentProp.js");
        var _validateComponentProp2 = _interopRequireDefault(_validateComponentProp);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var propsToNotUpdateFor = ['_reduxForm', 'value'];
        function createConnectedFieldArray(structure) {
            var deepEqual = structure.deepEqual, getIn = structure.getIn, size = structure.size, equals = structure.equals, orderChanged = structure.orderChanged;
            var getSyncError = function getSyncError(syncErrors, name) {
                return _plain2.default.getIn(syncErrors, name + "._error");
            };
            var getSyncWarning = function getSyncWarning(syncWarnings, name) {
                return getIn(syncWarnings, name + "._warning");
            };
            var ConnectedFieldArray = function (_Component) {
                (0, _inheritsLoose3.default)(ConnectedFieldArray, _Component);
                function ConnectedFieldArray() {
                    var _this;
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
                    _this.ref = _react2.default.createRef();
                    _this.getValue = function (index) {
                        return _this.props.value && getIn(_this.props.value, String(index));
                    };
                    return _this;
                }
                var _proto = ConnectedFieldArray.prototype;
                _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
                    var _this2 = this;
                    var thisValue = this.props.value;
                    var nextValue = nextProps.value;
                    if (thisValue && nextValue) {
                        var nextValueItemsSame = equals(nextValue, thisValue);
                        var nextValueItemsOrderChanged = orderChanged(thisValue, nextValue);
                        var thisValueLength = thisValue.length || thisValue.size;
                        var nextValueLength = nextValue.length || nextValue.size;
                        if (thisValueLength !== nextValueLength || nextValueItemsSame && nextValueItemsOrderChanged || nextProps.rerenderOnEveryChange && thisValue.some(function (val, index) {
                            return !deepEqual(val, nextValue[index]);
                        })) {
                            return true;
                        }
                    }
                    var nextPropsKeys = Object.keys(nextProps);
                    var thisPropsKeys = Object.keys(this.props);
                    return !!(this.props.children || nextProps.children || nextPropsKeys.length !== thisPropsKeys.length || nextPropsKeys.some(function (prop) {
                        return !~propsToNotUpdateFor.indexOf(prop) && !deepEqual(_this2.props[prop], nextProps[prop]);
                    }));
                };
                _proto.getRenderedComponent = function getRenderedComponent() {
                    return this.ref.current;
                };
                _proto.render = function render() {
                    var _this$props = this.props, component = _this$props.component, forwardRef = _this$props.forwardRef, name = _this$props.name, _reduxForm = _this$props._reduxForm, validate = _this$props.validate, warn = _this$props.warn, rerenderOnEveryChange = _this$props.rerenderOnEveryChange, rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props, ["component", "forwardRef", "name", "_reduxForm", "validate", "warn", "rerenderOnEveryChange"]);
                    var props = (0, _createFieldArrayProps2.default)(structure, name, _reduxForm.form, _reduxForm.sectionPrefix, this.getValue, rest);
                    if (forwardRef) {
                        props.ref = this.ref;
                    }
                    return (0, _react.createElement)(component, props);
                };
                (0, _createClass3.default)(ConnectedFieldArray, [{
                        key: "dirty",
                        get: function get() {
                            return this.props.dirty;
                        }
                    }, {
                        key: "pristine",
                        get: function get() {
                            return this.props.pristine;
                        }
                    }, {
                        key: "value",
                        get: function get() {
                            return this.props.value;
                        }
                    }]);
                return ConnectedFieldArray;
            }(_react.Component);
            ConnectedFieldArray.propTypes = {
                component: _validateComponentProp2.default,
                props: _propTypes2.default.object,
                rerenderOnEveryChange: _propTypes2.default.bool
            };
            ConnectedFieldArray.defaultProps = {
                rerenderOnEveryChange: false
            };
            var connector = (0, _reactRedux.connect)(function (state, ownProps) {
                var name = ownProps.name, _ownProps$_reduxForm = ownProps._reduxForm, initialValues = _ownProps$_reduxForm.initialValues, getFormState = _ownProps$_reduxForm.getFormState;
                var formState = getFormState(state);
                var initial = getIn(formState, "initial." + name) || initialValues && getIn(initialValues, name);
                var value = getIn(formState, "values." + name);
                var submitting = getIn(formState, 'submitting');
                var syncError = getSyncError(getIn(formState, 'syncErrors'), name);
                var syncWarning = getSyncWarning(getIn(formState, 'syncWarnings'), name);
                var pristine = deepEqual(value, initial);
                return {
                    asyncError: getIn(formState, "asyncErrors." + name + "._error"),
                    dirty: !pristine,
                    pristine: pristine,
                    state: getIn(formState, "fields." + name),
                    submitError: getIn(formState, "submitErrors." + name + "._error"),
                    submitFailed: getIn(formState, 'submitFailed'),
                    submitting: submitting,
                    syncError: syncError,
                    syncWarning: syncWarning,
                    value: value,
                    length: size(value)
                };
            }, function (dispatch, ownProps) {
                var name = ownProps.name, _reduxForm = ownProps._reduxForm;
                var arrayInsert = _reduxForm.arrayInsert, arrayMove = _reduxForm.arrayMove, arrayPop = _reduxForm.arrayPop, arrayPush = _reduxForm.arrayPush, arrayRemove = _reduxForm.arrayRemove, arrayRemoveAll = _reduxForm.arrayRemoveAll, arrayShift = _reduxForm.arrayShift, arraySplice = _reduxForm.arraySplice, arraySwap = _reduxForm.arraySwap, arrayUnshift = _reduxForm.arrayUnshift;
                return (0, _mapValues3.default)({
                    arrayInsert: arrayInsert,
                    arrayMove: arrayMove,
                    arrayPop: arrayPop,
                    arrayPush: arrayPush,
                    arrayRemove: arrayRemove,
                    arrayRemoveAll: arrayRemoveAll,
                    arrayShift: arrayShift,
                    arraySplice: arraySplice,
                    arraySwap: arraySwap,
                    arrayUnshift: arrayUnshift
                }, function (actionCreator) {
                    return (0, _redux.bindActionCreators)(actionCreator.bind(null, name), dispatch);
                });
            }, undefined, {
                forwardRef: true
            });
            return connector(ConnectedFieldArray);
        }
    }),
    "./node_modules/redux-form/es/ConnectedFields.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createConnectedFields;
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _createFieldProps2 = __webpack_require__("./node_modules/redux-form/es/createFieldProps.js");
        var _createFieldProps3 = _interopRequireDefault(_createFieldProps2);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        var _onChangeValue = __webpack_require__("./node_modules/redux-form/es/events/onChangeValue.js");
        var _onChangeValue2 = _interopRequireDefault(_onChangeValue);
        var _validateComponentProp = __webpack_require__("./node_modules/redux-form/es/util/validateComponentProp.js");
        var _validateComponentProp2 = _interopRequireDefault(_validateComponentProp);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var propsToNotUpdateFor = ['_reduxForm'];
        function createConnectedFields(structure) {
            var deepEqual = structure.deepEqual, getIn = structure.getIn, size = structure.size;
            var getSyncError = function getSyncError(syncErrors, name) {
                return _plain2.default.getIn(syncErrors, name + "._error") || _plain2.default.getIn(syncErrors, name);
            };
            var getSyncWarning = function getSyncWarning(syncWarnings, name) {
                var warning = getIn(syncWarnings, name);
                return warning && warning._warning ? warning._warning : warning;
            };
            var ConnectedFields = function (_React$Component) {
                (0, _inheritsLoose3.default)(ConnectedFields, _React$Component);
                function ConnectedFields(props) {
                    var _this;
                    _this = _React$Component.call(this, props) || this;
                    _this.onChangeFns = {};
                    _this.onFocusFns = {};
                    _this.onBlurFns = {};
                    _this.ref = _react2.default.createRef();
                    _this.prepareEventHandlers = function (_ref) {
                        var names = _ref.names;
                        return names.forEach(function (name) {
                            _this.onChangeFns[name] = function (event) {
                                return _this.handleChange(name, event);
                            };
                            _this.onFocusFns[name] = function () {
                                return _this.handleFocus(name);
                            };
                            _this.onBlurFns[name] = function (event) {
                                return _this.handleBlur(name, event);
                            };
                        });
                    };
                    _this.handleChange = function (name, event) {
                        var _this$props = _this.props, dispatch = _this$props.dispatch, parse = _this$props.parse, _reduxForm = _this$props._reduxForm;
                        var value = (0, _onChangeValue2.default)(event, {
                            name: name,
                            parse: parse
                        });
                        dispatch(_reduxForm.change(name, value));
                        if (_reduxForm.asyncValidate) {
                            _reduxForm.asyncValidate(name, value, 'change');
                        }
                    };
                    _this.handleFocus = function (name) {
                        var _this$props2 = _this.props, dispatch = _this$props2.dispatch, _reduxForm = _this$props2._reduxForm;
                        dispatch(_reduxForm.focus(name));
                    };
                    _this.handleBlur = function (name, event) {
                        var _this$props3 = _this.props, dispatch = _this$props3.dispatch, parse = _this$props3.parse, _reduxForm = _this$props3._reduxForm;
                        var value = (0, _onChangeValue2.default)(event, {
                            name: name,
                            parse: parse
                        });
                        dispatch(_reduxForm.blur(name, value));
                        if (_reduxForm.asyncValidate) {
                            _reduxForm.asyncValidate(name, value, 'blur');
                        }
                    };
                    _this.prepareEventHandlers(props);
                    return _this;
                }
                var _proto = ConnectedFields.prototype;
                _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
                    var _this2 = this;
                    if (this.props.names !== nextProps.names && (size(this.props.names) !== size(nextProps.names) || nextProps.names.some(function (nextName) {
                        return !_this2.props._fields[nextName];
                    }))) {
                        this.prepareEventHandlers(nextProps);
                    }
                };
                _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
                    var _this3 = this;
                    var nextPropsKeys = Object.keys(nextProps);
                    var thisPropsKeys = Object.keys(this.props);
                    return !!(this.props.children || nextProps.children || nextPropsKeys.length !== thisPropsKeys.length || nextPropsKeys.some(function (prop) {
                        return !~propsToNotUpdateFor.indexOf(prop) && !deepEqual(_this3.props[prop], nextProps[prop]);
                    }));
                };
                _proto.isDirty = function isDirty() {
                    var _fields = this.props._fields;
                    return Object.keys(_fields).some(function (name) {
                        return _fields[name].dirty;
                    });
                };
                _proto.getValues = function getValues() {
                    var _fields = this.props._fields;
                    return Object.keys(_fields).reduce(function (accumulator, name) {
                        return _plain2.default.setIn(accumulator, name, _fields[name].value);
                    }, {});
                };
                _proto.getRenderedComponent = function getRenderedComponent() {
                    return this.ref.current;
                };
                _proto.render = function render() {
                    var _this4 = this;
                    var _this$props4 = this.props, component = _this$props4.component, forwardRef = _this$props4.forwardRef, _fields = _this$props4._fields, _reduxForm = _this$props4._reduxForm, rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props4, ["component", "forwardRef", "_fields", "_reduxForm"]);
                    var sectionPrefix = _reduxForm.sectionPrefix, form = _reduxForm.form;
                    var _Object$keys$reduce = Object.keys(_fields).reduce(function (accumulator, name) {
                        var connectedProps = _fields[name];
                        var _createFieldProps = (0, _createFieldProps3.default)(structure, name, (0, _extends3.default)({}, connectedProps, {}, rest, {
                            form: form,
                            onBlur: _this4.onBlurFns[name],
                            onChange: _this4.onChangeFns[name],
                            onFocus: _this4.onFocusFns[name]
                        })), custom = _createFieldProps.custom, fieldProps = (0, _objectWithoutPropertiesLoose3.default)(_createFieldProps, ["custom"]);
                        accumulator.custom = custom;
                        var fieldName = sectionPrefix ? name.replace(sectionPrefix + ".", '') : name;
                        return _plain2.default.setIn(accumulator, fieldName, fieldProps);
                    }, {}), custom = _Object$keys$reduce.custom, props = (0, _objectWithoutPropertiesLoose3.default)(_Object$keys$reduce, ["custom"]);
                    if (forwardRef) {
                        props.ref = this.ref;
                    }
                    return _react2.default.createElement(component, (0, _extends3.default)({}, props, {}, custom));
                };
                return ConnectedFields;
            }(_react2.default.Component);
            ConnectedFields.propTypes = {
                component: _validateComponentProp2.default,
                _fields: _propTypes2.default.object.isRequired,
                props: _propTypes2.default.object
            };
            var connector = (0, _reactRedux.connect)(function (state, ownProps) {
                var names = ownProps.names, _ownProps$_reduxForm = ownProps._reduxForm, initialValues = _ownProps$_reduxForm.initialValues, getFormState = _ownProps$_reduxForm.getFormState;
                var formState = getFormState(state);
                return {
                    _fields: names.reduce(function (accumulator, name) {
                        var initialState = getIn(formState, "initial." + name);
                        var initial = initialState !== undefined ? initialState : initialValues && getIn(initialValues, name);
                        var value = getIn(formState, "values." + name);
                        var syncError = getSyncError(getIn(formState, 'syncErrors'), name);
                        var syncWarning = getSyncWarning(getIn(formState, 'syncWarnings'), name);
                        var submitting = getIn(formState, 'submitting');
                        var pristine = value === initial;
                        accumulator[name] = {
                            asyncError: getIn(formState, "asyncErrors." + name),
                            asyncValidating: getIn(formState, 'asyncValidating') === name,
                            dirty: !pristine,
                            initial: initial,
                            pristine: pristine,
                            state: getIn(formState, "fields." + name),
                            submitError: getIn(formState, "submitErrors." + name),
                            submitFailed: getIn(formState, 'submitFailed'),
                            submitting: submitting,
                            syncError: syncError,
                            syncWarning: syncWarning,
                            value: value,
                            _value: ownProps.value
                        };
                        return accumulator;
                    }, {})
                };
            }, undefined, undefined, {
                forwardRef: true
            });
            return connector(ConnectedFields);
        }
    }),
    "./node_modules/redux-form/es/Field.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createField = __webpack_require__("./node_modules/redux-form/es/createField.js");
        var _createField2 = _interopRequireDefault(_createField);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _createField2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/FieldArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createFieldArray = __webpack_require__("./node_modules/redux-form/es/createFieldArray.js");
        var _createFieldArray2 = _interopRequireDefault(_createFieldArray);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _createFieldArray2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/Fields.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createFields = __webpack_require__("./node_modules/redux-form/es/createFields.js");
        var _createFields2 = _interopRequireDefault(_createFields);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _createFields2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/Form.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _ReduxFormContext = __webpack_require__("./node_modules/redux-form/es/ReduxFormContext.js");
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var Form = function (_Component) {
            (0, _inheritsLoose3.default)(Form, _Component);
            function Form(props) {
                var _this;
                _this = _Component.call(this, props) || this;
                if (!props._reduxForm) {
                    throw new Error('Form must be inside a component decorated with reduxForm()');
                }
                return _this;
            }
            var _proto = Form.prototype;
            _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {
                this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);
            };
            _proto.render = function render() {
                var _this$props = this.props, _reduxForm = _this$props._reduxForm, rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props, ["_reduxForm"]);
                return _react2.default.createElement("form", rest);
            };
            return Form;
        }(_react.Component);
        Form.propTypes = {
            onSubmit: _propTypes2.default.func.isRequired,
            _reduxForm: _propTypes2.default.object
        };
        exports.default = (0, _ReduxFormContext.withReduxForm)(Form);
    }),
    "./node_modules/redux-form/es/FormName.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _ReduxFormContext = __webpack_require__("./node_modules/redux-form/es/ReduxFormContext.js");
        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) {
            return obj;
        }
        else {
            var newObj = {};
            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                        newObj[key] = obj[key];
                }
            }
            newObj.default = obj;
            return newObj;
        } }
        var FormName = function FormName(_ref) {
            var children = _ref.children, _reduxForm = _ref._reduxForm;
            return children({
                form: _reduxForm && _reduxForm.form,
                sectionPrefix: _reduxForm && _reduxForm.sectionPrefix
            });
        };
        exports.default = (0, _ReduxFormContext.withReduxForm)(FormName);
    }),
    "./node_modules/redux-form/es/FormSection.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _prefixName = __webpack_require__("./node_modules/redux-form/es/util/prefixName.js");
        var _prefixName2 = _interopRequireDefault(_prefixName);
        var _ReduxFormContext = __webpack_require__("./node_modules/redux-form/es/ReduxFormContext.js");
        var _validateComponentProp = __webpack_require__("./node_modules/redux-form/es/util/validateComponentProp.js");
        var _validateComponentProp2 = _interopRequireDefault(_validateComponentProp);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var FormSection = function (_Component) {
            (0, _inheritsLoose3.default)(FormSection, _Component);
            function FormSection(props) {
                var _this;
                _this = _Component.call(this, props) || this;
                if (!props._reduxForm) {
                    throw new Error('FormSection must be inside a component decorated with reduxForm()');
                }
                return _this;
            }
            var _proto = FormSection.prototype;
            _proto.render = function render() {
                var _this$props = this.props, _reduxForm = _this$props._reduxForm, children = _this$props.children, name = _this$props.name, component = _this$props.component, rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props, ["_reduxForm", "children", "name", "component"]);
                if (_react2.default.isValidElement(children)) {
                    return (0, _react.createElement)(_ReduxFormContext.ReduxFormContext.Provider, {
                        value: (0, _extends3.default)({}, this.props._reduxForm, {
                            sectionPrefix: (0, _prefixName2.default)(this.props, name)
                        }),
                        children: children
                    });
                }
                return (0, _react.createElement)(_ReduxFormContext.ReduxFormContext.Provider, {
                    value: (0, _extends3.default)({}, this.props._reduxForm, {
                        sectionPrefix: (0, _prefixName2.default)(this.props, name)
                    }),
                    children: (0, _react.createElement)(component, (0, _extends3.default)({}, rest, {
                        children: children
                    }))
                });
            };
            return FormSection;
        }(_react.Component);
        FormSection.propTypes = {
            name: _propTypes2.default.string.isRequired,
            component: _validateComponentProp2.default
        };
        FormSection.defaultProps = {
            component: 'div'
        };
        exports.default = (0, _ReduxFormContext.withReduxForm)(FormSection);
    }),
    "./node_modules/redux-form/es/ReduxFormContext.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.withReduxForm = exports.renderChildren = exports.ReduxFormContext = undefined;
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) {
            return obj;
        }
        else {
            var newObj = {};
            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                        newObj[key] = obj[key];
                }
            }
            newObj.default = obj;
            return newObj;
        } }
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var ReduxFormContext = exports.ReduxFormContext = React.createContext(null);
        var renderChildren = exports.renderChildren = function renderChildren(Component, _ref) {
            var forwardedRef = _ref.forwardedRef, rest = (0, _objectWithoutPropertiesLoose3.default)(_ref, ["forwardedRef"]);
            return function (_reduxForm) {
                return React.createElement(Component, (0, _extends3.default)({}, rest, {
                    _reduxForm: _reduxForm,
                    ref: forwardedRef
                }));
            };
        };
        var withReduxForm = exports.withReduxForm = function withReduxForm(Component) {
            var Hoc = function (_React$Component) {
                (0, _inheritsLoose3.default)(Hoc, _React$Component);
                function Hoc() {
                    return _React$Component.apply(this, arguments) || this;
                }
                var _proto = Hoc.prototype;
                _proto.render = function render() {
                    return React.createElement(ReduxFormContext.Consumer, {
                        children: renderChildren(Component, this.props)
                    });
                };
                return Hoc;
            }(React.Component);
            var ref = React.forwardRef(function (props, ref) {
                return React.createElement(Hoc, (0, _extends3.default)({}, props, {
                    forwardedRef: ref
                }));
            });
            ref.displayName = Component.displayName || Component.name || 'Component';
            return ref;
        };
    }),
    "./node_modules/redux-form/es/SubmissionError.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SubmissionError = undefined;
        exports.isSubmissionError = isSubmissionError;
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _es6Error = __webpack_require__("./node_modules/es6-error/es6/index.js");
        var _es6Error2 = _interopRequireDefault(_es6Error);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var __FLAG__ = '@@redux-form/submission-error-flag';
        var SubmissionError = exports.SubmissionError = function (_ExtendableError) {
            (0, _inheritsLoose3.default)(SubmissionError, _ExtendableError);
            function SubmissionError(errors) {
                var _this;
                _this = _ExtendableError.call(this, 'Submit Validation Failed') || this;
                _this.errors = errors;
                return _this;
            }
            return SubmissionError;
        }(_es6Error2.default);
        SubmissionError.__FLAG__ = __FLAG__;
        function isSubmissionError(error) {
            return (error && error.constructor && error.constructor.__FLAG__ === __FLAG__) === true;
        }
    }),
    "./node_modules/redux-form/es/actionTypes.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var prefix = exports.prefix = '@@redux-form/';
        var ARRAY_INSERT = exports.ARRAY_INSERT = prefix + "ARRAY_INSERT";
        var ARRAY_MOVE = exports.ARRAY_MOVE = prefix + "ARRAY_MOVE";
        var ARRAY_POP = exports.ARRAY_POP = prefix + "ARRAY_POP";
        var ARRAY_PUSH = exports.ARRAY_PUSH = prefix + "ARRAY_PUSH";
        var ARRAY_REMOVE = exports.ARRAY_REMOVE = prefix + "ARRAY_REMOVE";
        var ARRAY_REMOVE_ALL = exports.ARRAY_REMOVE_ALL = prefix + "ARRAY_REMOVE_ALL";
        var ARRAY_SHIFT = exports.ARRAY_SHIFT = prefix + "ARRAY_SHIFT";
        var ARRAY_SPLICE = exports.ARRAY_SPLICE = prefix + "ARRAY_SPLICE";
        var ARRAY_UNSHIFT = exports.ARRAY_UNSHIFT = prefix + "ARRAY_UNSHIFT";
        var ARRAY_SWAP = exports.ARRAY_SWAP = prefix + "ARRAY_SWAP";
        var AUTOFILL = exports.AUTOFILL = prefix + "AUTOFILL";
        var BLUR = exports.BLUR = prefix + "BLUR";
        var CHANGE = exports.CHANGE = prefix + "CHANGE";
        var CLEAR_FIELDS = exports.CLEAR_FIELDS = prefix + "CLEAR_FIELDS";
        var CLEAR_SUBMIT = exports.CLEAR_SUBMIT = prefix + "CLEAR_SUBMIT";
        var CLEAR_SUBMIT_ERRORS = exports.CLEAR_SUBMIT_ERRORS = prefix + "CLEAR_SUBMIT_ERRORS";
        var CLEAR_ASYNC_ERROR = exports.CLEAR_ASYNC_ERROR = prefix + "CLEAR_ASYNC_ERROR";
        var DESTROY = exports.DESTROY = prefix + "DESTROY";
        var FOCUS = exports.FOCUS = prefix + "FOCUS";
        var INITIALIZE = exports.INITIALIZE = prefix + "INITIALIZE";
        var REGISTER_FIELD = exports.REGISTER_FIELD = prefix + "REGISTER_FIELD";
        var RESET = exports.RESET = prefix + "RESET";
        var RESET_SECTION = exports.RESET_SECTION = prefix + "RESET_SECTION";
        var SET_SUBMIT_FAILED = exports.SET_SUBMIT_FAILED = prefix + "SET_SUBMIT_FAILED";
        var SET_SUBMIT_SUCCEEDED = exports.SET_SUBMIT_SUCCEEDED = prefix + "SET_SUBMIT_SUCCEEDED";
        var START_ASYNC_VALIDATION = exports.START_ASYNC_VALIDATION = prefix + "START_ASYNC_VALIDATION";
        var START_SUBMIT = exports.START_SUBMIT = prefix + "START_SUBMIT";
        var STOP_ASYNC_VALIDATION = exports.STOP_ASYNC_VALIDATION = prefix + "STOP_ASYNC_VALIDATION";
        var STOP_SUBMIT = exports.STOP_SUBMIT = prefix + "STOP_SUBMIT";
        var SUBMIT = exports.SUBMIT = prefix + "SUBMIT";
        var TOUCH = exports.TOUCH = prefix + "TOUCH";
        var UNREGISTER_FIELD = exports.UNREGISTER_FIELD = prefix + "UNREGISTER_FIELD";
        var UNTOUCH = exports.UNTOUCH = prefix + "UNTOUCH";
        var UPDATE_SYNC_ERRORS = exports.UPDATE_SYNC_ERRORS = prefix + "UPDATE_SYNC_ERRORS";
        var UPDATE_SYNC_WARNINGS = exports.UPDATE_SYNC_WARNINGS = prefix + "UPDATE_SYNC_WARNINGS";
        exports.default = {
            ARRAY_INSERT: ARRAY_INSERT,
            ARRAY_MOVE: ARRAY_MOVE,
            ARRAY_POP: ARRAY_POP,
            ARRAY_PUSH: ARRAY_PUSH,
            ARRAY_REMOVE: ARRAY_REMOVE,
            ARRAY_REMOVE_ALL: ARRAY_REMOVE_ALL,
            ARRAY_SHIFT: ARRAY_SHIFT,
            ARRAY_SPLICE: ARRAY_SPLICE,
            ARRAY_UNSHIFT: ARRAY_UNSHIFT,
            ARRAY_SWAP: ARRAY_SWAP,
            AUTOFILL: AUTOFILL,
            BLUR: BLUR,
            CHANGE: CHANGE,
            CLEAR_FIELDS: CLEAR_FIELDS,
            CLEAR_SUBMIT: CLEAR_SUBMIT,
            CLEAR_SUBMIT_ERRORS: CLEAR_SUBMIT_ERRORS,
            CLEAR_ASYNC_ERROR: CLEAR_ASYNC_ERROR,
            DESTROY: DESTROY,
            FOCUS: FOCUS,
            INITIALIZE: INITIALIZE,
            REGISTER_FIELD: REGISTER_FIELD,
            RESET: RESET,
            RESET_SECTION: RESET_SECTION,
            SET_SUBMIT_FAILED: SET_SUBMIT_FAILED,
            SET_SUBMIT_SUCCEEDED: SET_SUBMIT_SUCCEEDED,
            START_ASYNC_VALIDATION: START_ASYNC_VALIDATION,
            START_SUBMIT: START_SUBMIT,
            STOP_ASYNC_VALIDATION: STOP_ASYNC_VALIDATION,
            STOP_SUBMIT: STOP_SUBMIT,
            SUBMIT: SUBMIT,
            TOUCH: TOUCH,
            UNREGISTER_FIELD: UNREGISTER_FIELD,
            UNTOUCH: UNTOUCH,
            UPDATE_SYNC_ERRORS: UPDATE_SYNC_ERRORS,
            UPDATE_SYNC_WARNINGS: UPDATE_SYNC_WARNINGS
        };
    }),
    "./node_modules/redux-form/es/actions.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _actionTypes = __webpack_require__("./node_modules/redux-form/es/actionTypes.js");
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var arrayInsert = function arrayInsert(form, field, index, value) {
            return {
                type: _actionTypes.ARRAY_INSERT,
                meta: {
                    form: form,
                    field: field,
                    index: index
                },
                payload: value
            };
        };
        var arrayMove = function arrayMove(form, field, from, to) {
            return {
                type: _actionTypes.ARRAY_MOVE,
                meta: {
                    form: form,
                    field: field,
                    from: from,
                    to: to
                }
            };
        };
        var arrayPop = function arrayPop(form, field) {
            return {
                type: _actionTypes.ARRAY_POP,
                meta: {
                    form: form,
                    field: field
                }
            };
        };
        var arrayPush = function arrayPush(form, field, value) {
            return {
                type: _actionTypes.ARRAY_PUSH,
                meta: {
                    form: form,
                    field: field
                },
                payload: value
            };
        };
        var arrayRemove = function arrayRemove(form, field, index) {
            return {
                type: _actionTypes.ARRAY_REMOVE,
                meta: {
                    form: form,
                    field: field,
                    index: index
                }
            };
        };
        var arrayRemoveAll = function arrayRemoveAll(form, field) {
            return {
                type: _actionTypes.ARRAY_REMOVE_ALL,
                meta: {
                    form: form,
                    field: field
                }
            };
        };
        var arrayShift = function arrayShift(form, field) {
            return {
                type: _actionTypes.ARRAY_SHIFT,
                meta: {
                    form: form,
                    field: field
                }
            };
        };
        var arraySplice = function arraySplice(form, field, index, removeNum, value) {
            var action = {
                type: _actionTypes.ARRAY_SPLICE,
                meta: {
                    form: form,
                    field: field,
                    index: index,
                    removeNum: removeNum
                }
            };
            if (value !== undefined) {
                action.payload = value;
            }
            return action;
        };
        var arraySwap = function arraySwap(form, field, indexA, indexB) {
            if (indexA === indexB) {
                throw new Error('Swap indices cannot be equal');
            }
            if (indexA < 0 || indexB < 0) {
                throw new Error('Swap indices cannot be negative');
            }
            return {
                type: _actionTypes.ARRAY_SWAP,
                meta: {
                    form: form,
                    field: field,
                    indexA: indexA,
                    indexB: indexB
                }
            };
        };
        var arrayUnshift = function arrayUnshift(form, field, value) {
            return {
                type: _actionTypes.ARRAY_UNSHIFT,
                meta: {
                    form: form,
                    field: field
                },
                payload: value
            };
        };
        var autofill = function autofill(form, field, value) {
            return {
                type: _actionTypes.AUTOFILL,
                meta: {
                    form: form,
                    field: field
                },
                payload: value
            };
        };
        var blur = function blur(form, field, value, touch) {
            return {
                type: _actionTypes.BLUR,
                meta: {
                    form: form,
                    field: field,
                    touch: touch
                },
                payload: value
            };
        };
        var change = function change(form, field, value, touch, persistentSubmitErrors) {
            return {
                type: _actionTypes.CHANGE,
                meta: {
                    form: form,
                    field: field,
                    touch: touch,
                    persistentSubmitErrors: persistentSubmitErrors
                },
                payload: value
            };
        };
        var clearSubmit = function clearSubmit(form) {
            return {
                type: _actionTypes.CLEAR_SUBMIT,
                meta: {
                    form: form
                }
            };
        };
        var clearSubmitErrors = function clearSubmitErrors(form) {
            return {
                type: _actionTypes.CLEAR_SUBMIT_ERRORS,
                meta: {
                    form: form
                }
            };
        };
        var clearAsyncError = function clearAsyncError(form, field) {
            return {
                type: _actionTypes.CLEAR_ASYNC_ERROR,
                meta: {
                    form: form,
                    field: field
                }
            };
        };
        var clearFields = function clearFields(form, keepTouched, persistentSubmitErrors) {
            for (var _len = arguments.length, fields = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                fields[_key - 3] = arguments[_key];
            }
            return {
                type: _actionTypes.CLEAR_FIELDS,
                meta: {
                    form: form,
                    keepTouched: keepTouched,
                    persistentSubmitErrors: persistentSubmitErrors,
                    fields: fields
                }
            };
        };
        var destroy = function destroy() {
            for (var _len2 = arguments.length, form = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                form[_key2] = arguments[_key2];
            }
            return {
                type: _actionTypes.DESTROY,
                meta: {
                    form: form
                }
            };
        };
        var focus = function focus(form, field) {
            return {
                type: _actionTypes.FOCUS,
                meta: {
                    form: form,
                    field: field
                }
            };
        };
        var initialize = function initialize(form, values, keepDirty, otherMeta) {
            if (otherMeta === void 0) {
                otherMeta = {};
            }
            if (keepDirty instanceof Object) {
                otherMeta = keepDirty;
                keepDirty = false;
            }
            return {
                type: _actionTypes.INITIALIZE,
                meta: (0, _extends3.default)({
                    form: form,
                    keepDirty: keepDirty
                }, otherMeta),
                payload: values
            };
        };
        var registerField = function registerField(form, name, type) {
            return {
                type: _actionTypes.REGISTER_FIELD,
                meta: {
                    form: form
                },
                payload: {
                    name: name,
                    type: type
                }
            };
        };
        var reset = function reset(form) {
            return {
                type: _actionTypes.RESET,
                meta: {
                    form: form
                }
            };
        };
        var resetSection = function resetSection(form) {
            for (var _len3 = arguments.length, sections = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                sections[_key3 - 1] = arguments[_key3];
            }
            return {
                type: _actionTypes.RESET_SECTION,
                meta: {
                    form: form,
                    sections: sections
                }
            };
        };
        var startAsyncValidation = function startAsyncValidation(form, field) {
            return {
                type: _actionTypes.START_ASYNC_VALIDATION,
                meta: {
                    form: form,
                    field: field
                }
            };
        };
        var startSubmit = function startSubmit(form) {
            return {
                type: _actionTypes.START_SUBMIT,
                meta: {
                    form: form
                }
            };
        };
        var stopAsyncValidation = function stopAsyncValidation(form, errors) {
            return {
                type: _actionTypes.STOP_ASYNC_VALIDATION,
                meta: {
                    form: form
                },
                payload: errors,
                error: !!(errors && Object.keys(errors).length)
            };
        };
        var stopSubmit = function stopSubmit(form, errors) {
            return {
                type: _actionTypes.STOP_SUBMIT,
                meta: {
                    form: form
                },
                payload: errors,
                error: !!(errors && Object.keys(errors).length)
            };
        };
        var submit = function submit(form) {
            return {
                type: _actionTypes.SUBMIT,
                meta: {
                    form: form
                }
            };
        };
        var setSubmitFailed = function setSubmitFailed(form) {
            for (var _len4 = arguments.length, fields = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                fields[_key4 - 1] = arguments[_key4];
            }
            return {
                type: _actionTypes.SET_SUBMIT_FAILED,
                meta: {
                    form: form,
                    fields: fields
                },
                error: true
            };
        };
        var setSubmitSucceeded = function setSubmitSucceeded(form) {
            for (var _len5 = arguments.length, fields = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
                fields[_key5 - 1] = arguments[_key5];
            }
            return {
                type: _actionTypes.SET_SUBMIT_SUCCEEDED,
                meta: {
                    form: form,
                    fields: fields
                },
                error: false
            };
        };
        var touch = function touch(form) {
            for (var _len6 = arguments.length, fields = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
                fields[_key6 - 1] = arguments[_key6];
            }
            return {
                type: _actionTypes.TOUCH,
                meta: {
                    form: form,
                    fields: fields
                }
            };
        };
        var unregisterField = function unregisterField(form, name, destroyOnUnmount) {
            if (destroyOnUnmount === void 0) {
                destroyOnUnmount = true;
            }
            return {
                type: _actionTypes.UNREGISTER_FIELD,
                meta: {
                    form: form
                },
                payload: {
                    name: name,
                    destroyOnUnmount: destroyOnUnmount
                }
            };
        };
        var untouch = function untouch(form) {
            for (var _len7 = arguments.length, fields = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
                fields[_key7 - 1] = arguments[_key7];
            }
            return {
                type: _actionTypes.UNTOUCH,
                meta: {
                    form: form,
                    fields: fields
                }
            };
        };
        var updateSyncErrors = function updateSyncErrors(form, syncErrors, error) {
            if (syncErrors === void 0) {
                syncErrors = {};
            }
            return {
                type: _actionTypes.UPDATE_SYNC_ERRORS,
                meta: {
                    form: form
                },
                payload: {
                    syncErrors: syncErrors,
                    error: error
                }
            };
        };
        var updateSyncWarnings = function updateSyncWarnings(form, syncWarnings, warning) {
            if (syncWarnings === void 0) {
                syncWarnings = {};
            }
            return {
                type: _actionTypes.UPDATE_SYNC_WARNINGS,
                meta: {
                    form: form
                },
                payload: {
                    syncWarnings: syncWarnings,
                    warning: warning
                }
            };
        };
        var actions = {
            arrayInsert: arrayInsert,
            arrayMove: arrayMove,
            arrayPop: arrayPop,
            arrayPush: arrayPush,
            arrayRemove: arrayRemove,
            arrayRemoveAll: arrayRemoveAll,
            arrayShift: arrayShift,
            arraySplice: arraySplice,
            arraySwap: arraySwap,
            arrayUnshift: arrayUnshift,
            autofill: autofill,
            blur: blur,
            change: change,
            clearFields: clearFields,
            clearSubmit: clearSubmit,
            clearSubmitErrors: clearSubmitErrors,
            clearAsyncError: clearAsyncError,
            destroy: destroy,
            focus: focus,
            initialize: initialize,
            registerField: registerField,
            reset: reset,
            resetSection: resetSection,
            startAsyncValidation: startAsyncValidation,
            startSubmit: startSubmit,
            stopAsyncValidation: stopAsyncValidation,
            stopSubmit: stopSubmit,
            submit: submit,
            setSubmitFailed: setSubmitFailed,
            setSubmitSucceeded: setSubmitSucceeded,
            touch: touch,
            unregisterField: unregisterField,
            untouch: untouch,
            updateSyncErrors: updateSyncErrors,
            updateSyncWarnings: updateSyncWarnings
        };
        exports.default = actions;
    }),
    "./node_modules/redux-form/es/asyncValidation.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isPromise = __webpack_require__("./node_modules/is-promise/index.js");
        var _isPromise2 = _interopRequireDefault(_isPromise);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var asyncValidation = function asyncValidation(fn, start, stop, field) {
            start(field);
            var promise = fn();
            if (!(0, _isPromise2.default)(promise)) {
                throw new Error('asyncValidate function passed to reduxForm must return a promise');
            }
            var handleErrors = function handleErrors(rejected) {
                return function (errors) {
                    if (rejected) {
                        if (errors && Object.keys(errors).length) {
                            stop(errors);
                            return errors;
                        }
                        else {
                            stop();
                            throw new Error('Asynchronous validation promise was rejected without errors.');
                        }
                    }
                    stop();
                    return Promise.resolve();
                };
            };
            return promise.then(handleErrors(false), handleErrors(true));
        };
        exports.default = asyncValidation;
    }),
    "./node_modules/redux-form/es/createField.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _createClass2 = __webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js");
        var _createClass3 = _interopRequireDefault(_createClass2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _invariant = __webpack_require__("./node_modules/invariant/browser.js");
        var _invariant2 = _interopRequireDefault(_invariant);
        var _ConnectedField = __webpack_require__("./node_modules/redux-form/es/ConnectedField.js");
        var _ConnectedField2 = _interopRequireDefault(_ConnectedField);
        var _shallowCompare = __webpack_require__("./node_modules/redux-form/es/util/shallowCompare.js");
        var _shallowCompare2 = _interopRequireDefault(_shallowCompare);
        var _prefixName = __webpack_require__("./node_modules/redux-form/es/util/prefixName.js");
        var _prefixName2 = _interopRequireDefault(_prefixName);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        var _ReduxFormContext = __webpack_require__("./node_modules/redux-form/es/ReduxFormContext.js");
        var _validateComponentProp = __webpack_require__("./node_modules/redux-form/es/util/validateComponentProp.js");
        var _validateComponentProp2 = _interopRequireDefault(_validateComponentProp);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function createField(structure) {
            var ConnectedField = (0, _ConnectedField2.default)(structure);
            var setIn = structure.setIn;
            var Field = function (_Component) {
                (0, _inheritsLoose3.default)(Field, _Component);
                function Field(props) {
                    var _this;
                    _this = _Component.call(this, props) || this;
                    _this.ref = _react2.default.createRef();
                    _this.normalize = function (name, value) {
                        var normalize = _this.props.normalize;
                        if (!normalize) {
                            return value;
                        }
                        var previousValues = _this.props._reduxForm.getValues();
                        var previousValue = _this.value;
                        var nextValues = setIn(previousValues, name, value);
                        return normalize(value, previousValue, nextValues, previousValues, name);
                    };
                    if (!props._reduxForm) {
                        throw new Error('Field must be inside a component decorated with reduxForm()');
                    }
                    return _this;
                }
                var _proto = Field.prototype;
                _proto.componentDidMount = function componentDidMount() {
                    var _this2 = this;
                    this.props._reduxForm.register(this.name, 'Field', function () {
                        return _this2.props.validate;
                    }, function () {
                        return _this2.props.warn;
                    });
                };
                _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
                    return (0, _shallowCompare2.default)(this, nextProps, nextState);
                };
                _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
                    var oldName = (0, _prefixName2.default)(this.props, this.props.name);
                    var newName = (0, _prefixName2.default)(nextProps, nextProps.name);
                    if (oldName !== newName ||
                        !_plain2.default.deepEqual(this.props.validate, nextProps.validate) || !_plain2.default.deepEqual(this.props.warn, nextProps.warn)) {
                        this.props._reduxForm.unregister(oldName);
                        this.props._reduxForm.register(newName, 'Field', function () {
                            return nextProps.validate;
                        }, function () {
                            return nextProps.warn;
                        });
                    }
                };
                _proto.componentWillUnmount = function componentWillUnmount() {
                    this.props._reduxForm.unregister(this.name);
                };
                _proto.getRenderedComponent = function getRenderedComponent() {
                    (0, _invariant2.default)(this.props.forwardRef, 'If you want to access getRenderedComponent(), ' + 'you must specify a forwardRef prop to Field');
                    return this.ref.current ? this.ref.current.getRenderedComponent() : undefined;
                };
                _proto.render = function render() {
                    return (0, _react.createElement)(ConnectedField, (0, _extends3.default)({}, this.props, {
                        name: this.name,
                        normalize: this.normalize,
                        ref: this.ref
                    }));
                };
                (0, _createClass3.default)(Field, [{
                        key: "name",
                        get: function get() {
                            return (0, _prefixName2.default)(this.props, this.props.name);
                        }
                    }, {
                        key: "dirty",
                        get: function get() {
                            return !this.pristine;
                        }
                    }, {
                        key: "pristine",
                        get: function get() {
                            return !!(this.ref.current && this.ref.current.isPristine());
                        }
                    }, {
                        key: "value",
                        get: function get() {
                            return this.ref.current && this.ref.current.getValue();
                        }
                    }]);
                return Field;
            }(_react.Component);
            Field.propTypes = {
                name: _propTypes2.default.string.isRequired,
                component: _validateComponentProp2.default,
                format: _propTypes2.default.func,
                normalize: _propTypes2.default.func,
                onBlur: _propTypes2.default.func,
                onChange: _propTypes2.default.func,
                onFocus: _propTypes2.default.func,
                onDragStart: _propTypes2.default.func,
                onDrop: _propTypes2.default.func,
                parse: _propTypes2.default.func,
                props: _propTypes2.default.object,
                validate: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.arrayOf(_propTypes2.default.func)]),
                warn: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.arrayOf(_propTypes2.default.func)]),
                forwardRef: _propTypes2.default.bool,
                immutableProps: _propTypes2.default.arrayOf(_propTypes2.default.string),
                _reduxForm: _propTypes2.default.object
            };
            return (0, _ReduxFormContext.withReduxForm)(Field);
        }
        exports.default = createField;
    }),
    "./node_modules/redux-form/es/createFieldArray.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createFieldArray;
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _createClass2 = __webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js");
        var _createClass3 = _interopRequireDefault(_createClass2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _invariant = __webpack_require__("./node_modules/invariant/browser.js");
        var _invariant2 = _interopRequireDefault(_invariant);
        var _ConnectedFieldArray = __webpack_require__("./node_modules/redux-form/es/ConnectedFieldArray.js");
        var _ConnectedFieldArray2 = _interopRequireDefault(_ConnectedFieldArray);
        var _prefixName = __webpack_require__("./node_modules/redux-form/es/util/prefixName.js");
        var _prefixName2 = _interopRequireDefault(_prefixName);
        var _ReduxFormContext = __webpack_require__("./node_modules/redux-form/es/ReduxFormContext.js");
        var _validateComponentProp = __webpack_require__("./node_modules/redux-form/es/util/validateComponentProp.js");
        var _validateComponentProp2 = _interopRequireDefault(_validateComponentProp);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var toArray = function toArray(value) {
            return Array.isArray(value) ? value : [value];
        };
        var wrapError = function wrapError(fn, key) {
            return fn && function () {
                var validators = toArray(fn);
                for (var i = 0; i < validators.length; i++) {
                    var result = validators[i].apply(validators, arguments);
                    if (result) {
                        var _ref;
                        return _ref = {}, _ref[key] = result, _ref;
                    }
                }
            };
        };
        function createFieldArray(structure) {
            var ConnectedFieldArray = (0, _ConnectedFieldArray2.default)(structure);
            var FieldArray = function (_Component) {
                (0, _inheritsLoose3.default)(FieldArray, _Component);
                function FieldArray(props) {
                    var _this;
                    _this = _Component.call(this, props) || this;
                    _this.ref = _react2.default.createRef();
                    if (!props._reduxForm) {
                        throw new Error('FieldArray must be inside a component decorated with reduxForm()');
                    }
                    return _this;
                }
                var _proto = FieldArray.prototype;
                _proto.componentDidMount = function componentDidMount() {
                    var _this2 = this;
                    this.props._reduxForm.register(this.name, 'FieldArray', function () {
                        return wrapError(_this2.props.validate, '_error');
                    }, function () {
                        return wrapError(_this2.props.warn, '_warning');
                    });
                };
                _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
                    var oldName = (0, _prefixName2.default)(this.props, this.props.name);
                    var newName = (0, _prefixName2.default)(nextProps, nextProps.name);
                    if (oldName !== newName) {
                        this.props._reduxForm.unregister(oldName);
                        this.props._reduxForm.register(newName, 'FieldArray');
                    }
                };
                _proto.componentWillUnmount = function componentWillUnmount() {
                    this.props._reduxForm.unregister(this.name);
                };
                _proto.getRenderedComponent = function getRenderedComponent() {
                    (0, _invariant2.default)(this.props.forwardRef, 'If you want to access getRenderedComponent(), ' + 'you must specify a forwardRef prop to FieldArray');
                    return this.ref && this.ref.current.getRenderedComponent();
                };
                _proto.render = function render() {
                    return (0, _react.createElement)(ConnectedFieldArray, (0, _extends3.default)({}, this.props, {
                        name: this.name,
                        ref: this.ref
                    }));
                };
                (0, _createClass3.default)(FieldArray, [{
                        key: "name",
                        get: function get() {
                            return (0, _prefixName2.default)(this.props, this.props.name);
                        }
                    }, {
                        key: "dirty",
                        get: function get() {
                            return !this.ref || this.ref.current.dirty;
                        }
                    }, {
                        key: "pristine",
                        get: function get() {
                            return !!(this.ref && this.ref.current.pristine);
                        }
                    }, {
                        key: "value",
                        get: function get() {
                            return this.ref ? this.ref.current.value : undefined;
                        }
                    }]);
                return FieldArray;
            }(_react.Component);
            FieldArray.propTypes = {
                name: _propTypes2.default.string.isRequired,
                component: _validateComponentProp2.default,
                props: _propTypes2.default.object,
                validate: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.arrayOf(_propTypes2.default.func)]),
                warn: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.arrayOf(_propTypes2.default.func)]),
                forwardRef: _propTypes2.default.bool,
                _reduxForm: _propTypes2.default.object
            };
            return (0, _ReduxFormContext.withReduxForm)(FieldArray);
        }
    }),
    "./node_modules/redux-form/es/createFieldArrayProps.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createFieldArrayProps;
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function createFieldArrayProps(_ref2, name, form, sectionPrefix, getValue, _ref) {
            var getIn = _ref2.getIn;
            var arrayInsert = _ref.arrayInsert, arrayMove = _ref.arrayMove, arrayPop = _ref.arrayPop, arrayPush = _ref.arrayPush, arrayRemove = _ref.arrayRemove, arrayRemoveAll = _ref.arrayRemoveAll, arrayShift = _ref.arrayShift, arraySplice = _ref.arraySplice, arraySwap = _ref.arraySwap, arrayUnshift = _ref.arrayUnshift, asyncError = _ref.asyncError, dirty = _ref.dirty, length = _ref.length, pristine = _ref.pristine, submitError = _ref.submitError, state = _ref.state, submitFailed = _ref.submitFailed, submitting = _ref.submitting, syncError = _ref.syncError, syncWarning = _ref.syncWarning, value = _ref.value, props = _ref.props, rest = (0, _objectWithoutPropertiesLoose3.default)(_ref, ["arrayInsert", "arrayMove", "arrayPop", "arrayPush", "arrayRemove", "arrayRemoveAll", "arrayShift", "arraySplice", "arraySwap", "arrayUnshift", "asyncError", "dirty", "length", "pristine", "submitError", "state", "submitFailed", "submitting", "syncError", "syncWarning", "value", "props"]);
            var error = syncError || asyncError || submitError;
            var warning = syncWarning;
            var fieldName = sectionPrefix ? name.replace(sectionPrefix + ".", '') : name;
            var finalProps = (0, _extends3.default)({
                fields: {
                    _isFieldArray: true,
                    forEach: function forEach(callback) {
                        return (value || []).forEach(function (item, index) {
                            return callback(fieldName + "[" + index + "]", index, finalProps.fields);
                        });
                    },
                    get: getValue,
                    getAll: function getAll() {
                        return value;
                    },
                    insert: arrayInsert,
                    length: length,
                    map: function map(callback) {
                        return (value || []).map(function (item, index) {
                            return callback(fieldName + "[" + index + "]", index, finalProps.fields);
                        });
                    },
                    move: arrayMove,
                    name: name,
                    pop: function pop() {
                        arrayPop();
                        return getIn(value, String(length - 1));
                    },
                    push: arrayPush,
                    reduce: function reduce(callback, initial) {
                        return (value || []).reduce(function (accumulator, item, index) {
                            return callback(accumulator, fieldName + "[" + index + "]", index, finalProps.fields);
                        }, initial);
                    },
                    remove: arrayRemove,
                    removeAll: arrayRemoveAll,
                    shift: function shift() {
                        arrayShift();
                        return getIn(value, '0');
                    },
                    splice: arraySplice,
                    swap: arraySwap,
                    unshift: arrayUnshift
                },
                meta: {
                    dirty: dirty,
                    error: error,
                    form: form,
                    warning: warning,
                    invalid: !!error,
                    pristine: pristine,
                    submitting: submitting,
                    submitFailed: submitFailed,
                    valid: !error
                }
            }, props, {}, rest);
            return finalProps;
        }
    }),
    "./node_modules/redux-form/es/createFieldProps.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createFieldProps;
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var processProps = function processProps(type, props, _value, deepEqual) {
            var value = props.value;
            if (type === 'checkbox') {
                return (0, _extends3.default)({}, props, {
                    checked: !!value
                });
            }
            if (type === 'radio') {
                return (0, _extends3.default)({}, props, {
                    checked: deepEqual(value, _value),
                    value: _value
                });
            }
            if (type === 'select-multiple') {
                return (0, _extends3.default)({}, props, {
                    value: value || []
                });
            }
            if (type === 'file') {
                return (0, _extends3.default)({}, props, {
                    value: value || undefined
                });
            }
            return props;
        };
        function createFieldProps(_ref2, name, _ref) {
            var getIn = _ref2.getIn, toJS = _ref2.toJS, deepEqual = _ref2.deepEqual;
            var asyncError = _ref.asyncError, asyncValidating = _ref.asyncValidating, onBlur = _ref.onBlur, onChange = _ref.onChange, onDrop = _ref.onDrop, onDragStart = _ref.onDragStart, dirty = _ref.dirty, dispatch = _ref.dispatch, onFocus = _ref.onFocus, form = _ref.form, format = _ref.format, initial = _ref.initial, parse = _ref.parse, pristine = _ref.pristine, props = _ref.props, state = _ref.state, submitError = _ref.submitError, submitFailed = _ref.submitFailed, submitting = _ref.submitting, syncError = _ref.syncError, syncWarning = _ref.syncWarning, validate = _ref.validate, value = _ref.value, _value = _ref._value, warn = _ref.warn, custom = (0, _objectWithoutPropertiesLoose3.default)(_ref, ["asyncError", "asyncValidating", "onBlur", "onChange", "onDrop", "onDragStart", "dirty", "dispatch", "onFocus", "form", "format", "initial", "parse", "pristine", "props", "state", "submitError", "submitFailed", "submitting", "syncError", "syncWarning", "validate", "value", "_value", "warn"]);
            var error = syncError || asyncError || submitError;
            var warning = syncWarning;
            var formatFieldValue = function formatFieldValue(value, format) {
                if (format === null) {
                    return value;
                }
                var defaultFormattedValue = value == null ? '' : value;
                return format ? format(value, name) : defaultFormattedValue;
            };
            var formattedFieldValue = formatFieldValue(value, format);
            return {
                input: processProps(custom.type, {
                    name: name,
                    onBlur: onBlur,
                    onChange: onChange,
                    onDragStart: onDragStart,
                    onDrop: onDrop,
                    onFocus: onFocus,
                    value: formattedFieldValue
                }, _value, deepEqual),
                meta: (0, _extends3.default)({}, toJS(state), {
                    active: !!(state && getIn(state, 'active')),
                    asyncValidating: asyncValidating,
                    autofilled: !!(state && getIn(state, 'autofilled')),
                    dirty: dirty,
                    dispatch: dispatch,
                    error: error,
                    form: form,
                    initial: initial,
                    warning: warning,
                    invalid: !!error,
                    pristine: pristine,
                    submitting: !!submitting,
                    submitFailed: !!submitFailed,
                    touched: !!(state && getIn(state, 'touched')),
                    valid: !error,
                    visited: !!(state && getIn(state, 'visited'))
                }),
                custom: (0, _extends3.default)({}, custom, {}, props)
            };
        }
    }),
    "./node_modules/redux-form/es/createFields.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createFields;
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _createClass2 = __webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js");
        var _createClass3 = _interopRequireDefault(_createClass2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _invariant = __webpack_require__("./node_modules/invariant/browser.js");
        var _invariant2 = _interopRequireDefault(_invariant);
        var _get = __webpack_require__("./node_modules/lodash/get.js");
        var _get2 = _interopRequireDefault(_get);
        var _ConnectedFields = __webpack_require__("./node_modules/redux-form/es/ConnectedFields.js");
        var _ConnectedFields2 = _interopRequireDefault(_ConnectedFields);
        var _shallowCompare = __webpack_require__("./node_modules/redux-form/es/util/shallowCompare.js");
        var _shallowCompare2 = _interopRequireDefault(_shallowCompare);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        var _prefixName = __webpack_require__("./node_modules/redux-form/es/util/prefixName.js");
        var _prefixName2 = _interopRequireDefault(_prefixName);
        var _ReduxFormContext = __webpack_require__("./node_modules/redux-form/es/ReduxFormContext.js");
        var _validateComponentProp = __webpack_require__("./node_modules/redux-form/es/util/validateComponentProp.js");
        var _validateComponentProp2 = _interopRequireDefault(_validateComponentProp);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var validateNameProp = function validateNameProp(prop) {
            if (!prop) {
                return new Error('No "names" prop was specified <Fields/>');
            }
            if (!Array.isArray(prop) && !prop._isFieldArray) {
                return new Error('Invalid prop "names" supplied to <Fields/>. Must be either an array of strings or the fields array generated by FieldArray.');
            }
        };
        var warnAndValidatePropType = _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.arrayOf(_propTypes2.default.func), _propTypes2.default.objectOf(_propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.arrayOf(_propTypes2.default.func)]))]);
        var fieldsPropTypes = {
            component: _validateComponentProp2.default,
            format: _propTypes2.default.func,
            parse: _propTypes2.default.func,
            props: _propTypes2.default.object,
            forwardRef: _propTypes2.default.bool,
            validate: warnAndValidatePropType,
            warn: warnAndValidatePropType
        };
        var getFieldWarnAndValidate = function getFieldWarnAndValidate(prop, name) {
            return Array.isArray(prop) || typeof prop === 'function' ? prop : (0, _get2.default)(prop, name, undefined);
        };
        function createFields(structure) {
            var ConnectedFields = (0, _ConnectedFields2.default)(structure);
            var Fields = function (_Component) {
                (0, _inheritsLoose3.default)(Fields, _Component);
                function Fields(props) {
                    var _this;
                    _this = _Component.call(this, props) || this;
                    if (!props._reduxForm) {
                        throw new Error('Fields must be inside a component decorated with reduxForm()');
                    }
                    var error = validateNameProp(props.names);
                    if (error) {
                        throw error;
                    }
                    return _this;
                }
                var _proto = Fields.prototype;
                _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
                    return (0, _shallowCompare2.default)(this, nextProps);
                };
                _proto.componentDidMount = function componentDidMount() {
                    this.registerFields(this.props.names);
                };
                _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
                    if (!_plain2.default.deepEqual(this.props.names, nextProps.names)) {
                        var props = this.props;
                        var unregister = props._reduxForm.unregister;
                        this.props.names.forEach(function (name) {
                            return unregister((0, _prefixName2.default)(props, name));
                        });
                        this.registerFields(nextProps.names);
                    }
                };
                _proto.componentWillUnmount = function componentWillUnmount() {
                    var props = this.props;
                    var unregister = props._reduxForm.unregister;
                    this.props.names.forEach(function (name) {
                        return unregister((0, _prefixName2.default)(props, name));
                    });
                };
                _proto.registerFields = function registerFields(names) {
                    var _this2 = this;
                    var props = this.props;
                    var register = props._reduxForm.register;
                    names.forEach(function (name) {
                        return register((0, _prefixName2.default)(props, name), 'Field', function () {
                            return getFieldWarnAndValidate(_this2.props.validate, name);
                        }, function () {
                            return getFieldWarnAndValidate(_this2.props.warn, name);
                        });
                    });
                };
                _proto.getRenderedComponent = function getRenderedComponent() {
                    (0, _invariant2.default)(this.props.forwardRef, 'If you want to access getRenderedComponent(), ' + 'you must specify a forwardRef prop to Fields');
                    return this.refs.connected.getRenderedComponent();
                };
                _proto.render = function render() {
                    var props = this.props;
                    return (0, _react.createElement)(ConnectedFields, (0, _extends3.default)({}, this.props, {
                        names: this.props.names.map(function (name) {
                            return (0, _prefixName2.default)(props, name);
                        }),
                        ref: 'connected'
                    }));
                };
                (0, _createClass3.default)(Fields, [{
                        key: "names",
                        get: function get() {
                            var props = this.props;
                            return this.props.names.map(function (name) {
                                return (0, _prefixName2.default)(props, name);
                            });
                        }
                    }, {
                        key: "dirty",
                        get: function get() {
                            return this.refs.connected.isDirty();
                        }
                    }, {
                        key: "pristine",
                        get: function get() {
                            return !this.dirty;
                        }
                    }, {
                        key: "values",
                        get: function get() {
                            return this.refs.connected && this.refs.connected.getValues();
                        }
                    }]);
                return Fields;
            }(_react.Component);
            Fields.propTypes = (0, _extends3.default)({
                names: function names(props, propName) {
                    return validateNameProp(props[propName]);
                }
            }, fieldsPropTypes);
            return (0, _ReduxFormContext.withReduxForm)(Fields);
        }
    }),
    "./node_modules/redux-form/es/createFormValueSelector.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createFormValueSelector;
        var _invariant = __webpack_require__("./node_modules/invariant/browser.js");
        var _invariant2 = _interopRequireDefault(_invariant);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function createFormValueSelector(_ref) {
            var getIn = _ref.getIn;
            return function (form, getFormState) {
                (0, _invariant2.default)(form, 'Form value must be specified');
                var nonNullGetFormState = getFormState || function (state) {
                    return getIn(state, 'form');
                };
                return function (state) {
                    for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        fields[_key - 1] = arguments[_key];
                    }
                    (0, _invariant2.default)(fields.length, 'No fields specified');
                    return fields.length === 1 ?
                        getIn(nonNullGetFormState(state), form + ".values." + fields[0]) :
                        fields.reduce(function (accumulator, field) {
                            var value = getIn(nonNullGetFormState(state), form + ".values." + field);
                            return value === undefined ? accumulator : _plain2.default.setIn(accumulator, field, value);
                        }, {});
                };
            };
        }
    }),
    "./node_modules/redux-form/es/createFormValues.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createValues;
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _mapValues2 = __webpack_require__("./node_modules/lodash/mapValues.js");
        var _mapValues3 = _interopRequireDefault(_mapValues2);
        var _isEqual2 = __webpack_require__("./node_modules/lodash/isEqual.js");
        var _isEqual3 = _interopRequireDefault(_isEqual2);
        var _isEmpty2 = __webpack_require__("./node_modules/lodash/isEmpty.js");
        var _isEmpty3 = _interopRequireDefault(_isEmpty2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _prefixName = __webpack_require__("./node_modules/redux-form/es/util/prefixName.js");
        var _prefixName2 = _interopRequireDefault(_prefixName);
        var _ReduxFormContext = __webpack_require__("./node_modules/redux-form/es/ReduxFormContext.js");
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function createValues(_ref) {
            var getIn = _ref.getIn;
            return function (firstArg) {
                for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    rest[_key - 1] = arguments[_key];
                }
                return function (Component) {
                    var FormValues = function (_React$Component) {
                        (0, _inheritsLoose3.default)(FormValues, _React$Component);
                        function FormValues(props) {
                            var _this;
                            _this = _React$Component.call(this, props) || this;
                            if (!props._reduxForm) {
                                throw new Error('formValues() must be used inside a React tree decorated with reduxForm()');
                            }
                            _this.updateComponent(props);
                            return _this;
                        }
                        var _proto = FormValues.prototype;
                        _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(props) {
                            if (typeof firstArg === 'function') {
                                this.updateComponent(props);
                            }
                        };
                        _proto.render = function render() {
                            var Component = this.Component;
                            return _react2.default.createElement(Component, (0, _extends3.default)({
                                sectionPrefix: this.props._reduxForm.sectionPrefix
                            }, this.props));
                        };
                        _proto.updateComponent = function updateComponent(props) {
                            var valuesMap;
                            var resolvedFirstArg = typeof firstArg === 'function' ? firstArg(props) : firstArg;
                            if (typeof resolvedFirstArg === 'string') {
                                var _rest$reduce;
                                valuesMap = rest.reduce(function (result, k) {
                                    result[k] = k;
                                    return result;
                                }, (_rest$reduce = {}, _rest$reduce[resolvedFirstArg] = resolvedFirstArg, _rest$reduce));
                            }
                            else {
                                valuesMap = resolvedFirstArg;
                            }
                            if ((0, _isEmpty3.default)(valuesMap)) {
                                throw new Error('formValues(): You must specify values to get as formValues(name1, name2, ...) or formValues({propName1: propPath1, ...}) or formValues((props) => name) or formValues((props) => ({propName1: propPath1, ...}))');
                            }
                            if ((0, _isEqual3.default)(valuesMap, this._valuesMap)) {
                                return;
                            }
                            this._valuesMap = valuesMap;
                            this.setComponent();
                        };
                        _proto.setComponent = function setComponent() {
                            var _this2 = this;
                            var formValuesSelector = function formValuesSelector(_, _ref2) {
                                var sectionPrefix = _ref2.sectionPrefix;
                                var getValues = _this2.props._reduxForm.getValues;
                                var values = getValues();
                                return (0, _mapValues3.default)(_this2._valuesMap, function (path) {
                                    return getIn(values, (0, _prefixName2.default)(_this2.props, path));
                                });
                            };
                            this.Component = (0, _reactRedux.connect)(formValuesSelector, function () {
                                return {};
                            })(function (_ref3) {
                                var sectionPrefix = _ref3.sectionPrefix, otherProps = (0, _objectWithoutPropertiesLoose3.default)(_ref3, ["sectionPrefix"]);
                                return _react2.default.createElement(Component, otherProps);
                            });
                        };
                        return FormValues;
                    }(_react2.default.Component);
                    return (0, _ReduxFormContext.withReduxForm)(FormValues);
                };
            };
        }
    }),
    "./node_modules/redux-form/es/createReducer.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _isFunction2 = __webpack_require__("./node_modules/lodash/isFunction.js");
        var _isFunction3 = _interopRequireDefault(_isFunction2);
        var _actionTypes = __webpack_require__("./node_modules/redux-form/es/actionTypes.js");
        var _deleteInWithCleanUp = __webpack_require__("./node_modules/redux-form/es/deleteInWithCleanUp.js");
        var _deleteInWithCleanUp2 = _interopRequireDefault(_deleteInWithCleanUp);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var shouldDelete = function shouldDelete(_ref) {
            var getIn = _ref.getIn;
            return function (state, path) {
                var initialValuesPath = null;
                if (/^values/.test(path)) {
                    initialValuesPath = path.replace('values', 'initial');
                }
                var initialValueComparison = initialValuesPath ? getIn(state, initialValuesPath) === undefined : true;
                return getIn(state, path) !== undefined && initialValueComparison;
            };
        };
        var isReduxFormAction = function isReduxFormAction(action) {
            return action && action.type && action.type.length > _actionTypes.prefix.length && action.type.substring(0, _actionTypes.prefix.length) === _actionTypes.prefix;
        };
        function createReducer(structure) {
            var _behaviors;
            var deepEqual = structure.deepEqual, empty = structure.empty, forEach = structure.forEach, getIn = structure.getIn, setIn = structure.setIn, deleteIn = structure.deleteIn, fromJS = structure.fromJS, keys = structure.keys, size = structure.size, some = structure.some, splice = structure.splice;
            var deleteInWithCleanUp = (0, _deleteInWithCleanUp2.default)(structure)(shouldDelete);
            var plainDeleteInWithCleanUp = (0, _deleteInWithCleanUp2.default)(_plain2.default)(shouldDelete);
            var doSplice = function doSplice(state, key, field, index, removeNum, value, force) {
                var existing = getIn(state, key + "." + field);
                return existing || force ? setIn(state, key + "." + field, splice(existing, index, removeNum, value)) : state;
            };
            var doPlainSplice = function doPlainSplice(state, key, field, index, removeNum, value, force) {
                var slice = getIn(state, key);
                var existing = _plain2.default.getIn(slice, field);
                return existing || force ? setIn(state, key, _plain2.default.setIn(slice, field, _plain2.default.splice(existing, index, removeNum, value))) : state;
            };
            var rootKeys = ['values', 'fields', 'submitErrors', 'asyncErrors'];
            var arraySplice = function arraySplice(state, field, index, removeNum, value) {
                var result = state;
                var nonValuesValue = value != null ? empty : undefined;
                result = doSplice(result, 'values', field, index, removeNum, value, true);
                result = doSplice(result, 'fields', field, index, removeNum, nonValuesValue);
                result = doPlainSplice(result, 'syncErrors', field, index, removeNum, undefined);
                result = doPlainSplice(result, 'syncWarnings', field, index, removeNum, undefined);
                result = doSplice(result, 'submitErrors', field, index, removeNum, undefined);
                result = doSplice(result, 'asyncErrors', field, index, removeNum, undefined);
                return result;
            };
            var behaviors = (_behaviors = {}, _behaviors[_actionTypes.ARRAY_INSERT] = function (state, _ref2) {
                var _ref2$meta = _ref2.meta, field = _ref2$meta.field, index = _ref2$meta.index, payload = _ref2.payload;
                return arraySplice(state, field, index, 0, payload);
            }, _behaviors[_actionTypes.ARRAY_MOVE] = function (state, _ref3) {
                var _ref3$meta = _ref3.meta, field = _ref3$meta.field, from = _ref3$meta.from, to = _ref3$meta.to;
                var array = getIn(state, "values." + field);
                var length = array ? size(array) : 0;
                var result = state;
                if (length) {
                    rootKeys.forEach(function (key) {
                        var path = key + "." + field;
                        if (getIn(result, path)) {
                            var value = getIn(result, path + "[" + from + "]");
                            result = setIn(result, path, splice(getIn(result, path), from, 1));
                            result = setIn(result, path, splice(getIn(result, path), to, 0, value));
                        }
                    });
                }
                return result;
            }, _behaviors[_actionTypes.ARRAY_POP] = function (state, _ref4) {
                var field = _ref4.meta.field;
                var array = getIn(state, "values." + field);
                var length = array ? size(array) : 0;
                return length ? arraySplice(state, field, length - 1, 1) : state;
            }, _behaviors[_actionTypes.ARRAY_PUSH] = function (state, _ref5) {
                var field = _ref5.meta.field, payload = _ref5.payload;
                var array = getIn(state, "values." + field);
                var length = array ? size(array) : 0;
                return arraySplice(state, field, length, 0, payload);
            }, _behaviors[_actionTypes.ARRAY_REMOVE] = function (state, _ref6) {
                var _ref6$meta = _ref6.meta, field = _ref6$meta.field, index = _ref6$meta.index;
                return arraySplice(state, field, index, 1);
            }, _behaviors[_actionTypes.ARRAY_REMOVE_ALL] = function (state, _ref7) {
                var field = _ref7.meta.field;
                var array = getIn(state, "values." + field);
                var length = array ? size(array) : 0;
                return length ? arraySplice(state, field, 0, length) : state;
            }, _behaviors[_actionTypes.ARRAY_SHIFT] = function (state, _ref8) {
                var field = _ref8.meta.field;
                return arraySplice(state, field, 0, 1);
            }, _behaviors[_actionTypes.ARRAY_SPLICE] = function (state, _ref9) {
                var _ref9$meta = _ref9.meta, field = _ref9$meta.field, index = _ref9$meta.index, removeNum = _ref9$meta.removeNum, payload = _ref9.payload;
                return arraySplice(state, field, index, removeNum, payload);
            }, _behaviors[_actionTypes.ARRAY_SWAP] = function (state, _ref10) {
                var _ref10$meta = _ref10.meta, field = _ref10$meta.field, indexA = _ref10$meta.indexA, indexB = _ref10$meta.indexB;
                var result = state;
                rootKeys.forEach(function (key) {
                    var valueA = getIn(result, key + "." + field + "[" + indexA + "]");
                    var valueB = getIn(result, key + "." + field + "[" + indexB + "]");
                    if (valueA !== undefined || valueB !== undefined) {
                        result = setIn(result, key + "." + field + "[" + indexA + "]", valueB);
                        result = setIn(result, key + "." + field + "[" + indexB + "]", valueA);
                    }
                });
                return result;
            }, _behaviors[_actionTypes.ARRAY_UNSHIFT] = function (state, _ref11) {
                var field = _ref11.meta.field, payload = _ref11.payload;
                return arraySplice(state, field, 0, 0, payload);
            }, _behaviors[_actionTypes.AUTOFILL] = function (state, _ref12) {
                var field = _ref12.meta.field, payload = _ref12.payload;
                var result = state;
                result = deleteInWithCleanUp(result, "asyncErrors." + field);
                result = deleteInWithCleanUp(result, "submitErrors." + field);
                result = setIn(result, "fields." + field + ".autofilled", true);
                result = setIn(result, "values." + field, payload);
                return result;
            }, _behaviors[_actionTypes.BLUR] = function (state, _ref13) {
                var _ref13$meta = _ref13.meta, field = _ref13$meta.field, touch = _ref13$meta.touch, payload = _ref13.payload;
                var result = state;
                var initial = getIn(result, "initial." + field);
                if (initial === undefined && payload === '') {
                    result = deleteInWithCleanUp(result, "values." + field);
                }
                else if (payload !== undefined) {
                    result = setIn(result, "values." + field, payload);
                }
                if (field === getIn(result, 'active')) {
                    result = deleteIn(result, 'active');
                }
                result = deleteIn(result, "fields." + field + ".active");
                if (touch) {
                    result = setIn(result, "fields." + field + ".touched", true);
                    result = setIn(result, 'anyTouched', true);
                }
                return result;
            }, _behaviors[_actionTypes.CHANGE] = function (state, _ref14) {
                var _ref14$meta = _ref14.meta, field = _ref14$meta.field, touch = _ref14$meta.touch, persistentSubmitErrors = _ref14$meta.persistentSubmitErrors, payload = _ref14.payload;
                var result = state;
                var initial = getIn(result, "initial." + field);
                if (initial === undefined && payload === '' || payload === undefined) {
                    result = deleteInWithCleanUp(result, "values." + field);
                }
                else if ((0, _isFunction3.default)(payload)) {
                    var fieldCurrentValue = getIn(state, "values." + field);
                    result = setIn(result, "values." + field, payload(fieldCurrentValue, state.values));
                }
                else {
                    result = setIn(result, "values." + field, payload);
                }
                result = deleteInWithCleanUp(result, "asyncErrors." + field);
                if (!persistentSubmitErrors) {
                    result = deleteInWithCleanUp(result, "submitErrors." + field);
                }
                result = deleteInWithCleanUp(result, "fields." + field + ".autofilled");
                if (touch) {
                    result = setIn(result, "fields." + field + ".touched", true);
                    result = setIn(result, 'anyTouched', true);
                }
                return result;
            }, _behaviors[_actionTypes.CLEAR_SUBMIT] = function (state) {
                return deleteIn(state, 'triggerSubmit');
            }, _behaviors[_actionTypes.CLEAR_SUBMIT_ERRORS] = function (state) {
                var result = state;
                result = deleteInWithCleanUp(result, 'submitErrors');
                result = deleteIn(result, 'error');
                return result;
            }, _behaviors[_actionTypes.CLEAR_ASYNC_ERROR] = function (state, _ref15) {
                var field = _ref15.meta.field;
                return deleteIn(state, "asyncErrors." + field);
            }, _behaviors[_actionTypes.CLEAR_FIELDS] = function (state, _ref16) {
                var _ref16$meta = _ref16.meta, keepTouched = _ref16$meta.keepTouched, persistentSubmitErrors = _ref16$meta.persistentSubmitErrors, fields = _ref16$meta.fields;
                var result = state;
                fields.forEach(function (field) {
                    result = deleteInWithCleanUp(result, "asyncErrors." + field);
                    if (!persistentSubmitErrors) {
                        result = deleteInWithCleanUp(result, "submitErrors." + field);
                    }
                    result = deleteInWithCleanUp(result, "fields." + field + ".autofilled");
                    if (!keepTouched) {
                        result = deleteIn(result, "fields." + field + ".touched");
                    }
                    var values = getIn(state, "initial." + field);
                    result = values ? setIn(result, "values." + field, values) : deleteInWithCleanUp(result, "values." + field);
                });
                var anyTouched = some(keys(getIn(result, 'registeredFields')), function (key) {
                    return getIn(result, "fields." + key + ".touched");
                });
                result = anyTouched ? setIn(result, 'anyTouched', true) : deleteIn(result, 'anyTouched');
                return result;
            }, _behaviors[_actionTypes.FOCUS] = function (state, _ref17) {
                var field = _ref17.meta.field;
                var result = state;
                var previouslyActive = getIn(state, 'active');
                result = deleteIn(result, "fields." + previouslyActive + ".active");
                result = setIn(result, "fields." + field + ".visited", true);
                result = setIn(result, "fields." + field + ".active", true);
                result = setIn(result, 'active', field);
                return result;
            }, _behaviors[_actionTypes.INITIALIZE] = function (state, _ref18) {
                var payload = _ref18.payload, _ref18$meta = _ref18.meta, keepDirty = _ref18$meta.keepDirty, keepSubmitSucceeded = _ref18$meta.keepSubmitSucceeded, updateUnregisteredFields = _ref18$meta.updateUnregisteredFields, keepValues = _ref18$meta.keepValues;
                var mapData = fromJS(payload);
                var result = empty;
                var warning = getIn(state, 'warning');
                if (warning) {
                    result = setIn(result, 'warning', warning);
                }
                var syncWarnings = getIn(state, 'syncWarnings');
                if (syncWarnings) {
                    result = setIn(result, 'syncWarnings', syncWarnings);
                }
                var error = getIn(state, 'error');
                if (error) {
                    result = setIn(result, 'error', error);
                }
                var syncErrors = getIn(state, 'syncErrors');
                if (syncErrors) {
                    result = setIn(result, 'syncErrors', syncErrors);
                }
                var registeredFields = getIn(state, 'registeredFields');
                if (registeredFields) {
                    result = setIn(result, 'registeredFields', registeredFields);
                }
                var previousValues = getIn(state, 'values');
                var previousInitialValues = getIn(state, 'initial');
                var newInitialValues = mapData;
                var newValues = previousValues;
                if (keepDirty && registeredFields) {
                    if (!deepEqual(newInitialValues, previousInitialValues)) {
                        var overwritePristineValue = function overwritePristineValue(name) {
                            var previousInitialValue = getIn(previousInitialValues, name);
                            var previousValue = getIn(previousValues, name);
                            if (deepEqual(previousValue, previousInitialValue)) {
                                var newInitialValue = getIn(newInitialValues, name);
                                if (getIn(newValues, name) !== newInitialValue) {
                                    newValues = setIn(newValues, name, newInitialValue);
                                }
                            }
                        };
                        if (!updateUnregisteredFields) {
                            forEach(keys(registeredFields), function (name) {
                                return overwritePristineValue(name);
                            });
                        }
                        forEach(keys(newInitialValues), function (name) {
                            var previousInitialValue = getIn(previousInitialValues, name);
                            if (typeof previousInitialValue === 'undefined') {
                                var newInitialValue = getIn(newInitialValues, name);
                                newValues = setIn(newValues, name, newInitialValue);
                            }
                            if (updateUnregisteredFields) {
                                overwritePristineValue(name);
                            }
                        });
                    }
                }
                else {
                    newValues = newInitialValues;
                }
                if (keepValues) {
                    forEach(keys(previousValues), function (name) {
                        var previousValue = getIn(previousValues, name);
                        newValues = setIn(newValues, name, previousValue);
                    });
                    forEach(keys(previousInitialValues), function (name) {
                        var previousInitialValue = getIn(previousInitialValues, name);
                        newInitialValues = setIn(newInitialValues, name, previousInitialValue);
                    });
                }
                if (keepSubmitSucceeded && getIn(state, 'submitSucceeded')) {
                    result = setIn(result, 'submitSucceeded', true);
                }
                result = setIn(result, 'values', newValues);
                result = setIn(result, 'initial', newInitialValues);
                return result;
            }, _behaviors[_actionTypes.REGISTER_FIELD] = function (state, _ref19) {
                var _ref19$payload = _ref19.payload, name = _ref19$payload.name, type = _ref19$payload.type;
                var key = "registeredFields['" + name + "']";
                var field = getIn(state, key);
                if (field) {
                    var count = getIn(field, 'count') + 1;
                    field = setIn(field, 'count', count);
                }
                else {
                    field = fromJS({
                        name: name,
                        type: type,
                        count: 1
                    });
                }
                return setIn(state, key, field);
            }, _behaviors[_actionTypes.RESET] = function (state) {
                var result = empty;
                var registeredFields = getIn(state, 'registeredFields');
                if (registeredFields) {
                    result = setIn(result, 'registeredFields', registeredFields);
                }
                var values = getIn(state, 'initial');
                if (values) {
                    result = setIn(result, 'values', values);
                    result = setIn(result, 'initial', values);
                }
                return result;
            }, _behaviors[_actionTypes.RESET_SECTION] = function (state, _ref20) {
                var sections = _ref20.meta.sections;
                var result = state;
                sections.forEach(function (section) {
                    result = deleteInWithCleanUp(result, "asyncErrors." + section);
                    result = deleteInWithCleanUp(result, "submitErrors." + section);
                    result = deleteInWithCleanUp(result, "fields." + section);
                    var values = getIn(state, "initial." + section);
                    result = values ? setIn(result, "values." + section, values) : deleteInWithCleanUp(result, "values." + section);
                });
                var anyTouched = some(keys(getIn(result, 'registeredFields')), function (key) {
                    return getIn(result, "fields." + key + ".touched");
                });
                result = anyTouched ? setIn(result, 'anyTouched', true) : deleteIn(result, 'anyTouched');
                return result;
            }, _behaviors[_actionTypes.SUBMIT] = function (state) {
                return setIn(state, 'triggerSubmit', true);
            }, _behaviors[_actionTypes.START_ASYNC_VALIDATION] = function (state, _ref21) {
                var field = _ref21.meta.field;
                return setIn(state, 'asyncValidating', field || true);
            }, _behaviors[_actionTypes.START_SUBMIT] = function (state) {
                return setIn(state, 'submitting', true);
            }, _behaviors[_actionTypes.STOP_ASYNC_VALIDATION] = function (state, _ref22) {
                var payload = _ref22.payload;
                var result = state;
                result = deleteIn(result, 'asyncValidating');
                if (payload && Object.keys(payload).length) {
                    var _error = payload._error, fieldErrors = (0, _objectWithoutPropertiesLoose3.default)(payload, ["_error"]);
                    if (_error) {
                        result = setIn(result, 'error', _error);
                    }
                    if (Object.keys(fieldErrors).length) {
                        result = setIn(result, 'asyncErrors', fromJS(fieldErrors));
                    }
                }
                else {
                    result = deleteIn(result, 'error');
                    result = deleteIn(result, 'asyncErrors');
                }
                return result;
            }, _behaviors[_actionTypes.STOP_SUBMIT] = function (state, _ref23) {
                var payload = _ref23.payload;
                var result = state;
                result = deleteIn(result, 'submitting');
                result = deleteIn(result, 'submitFailed');
                result = deleteIn(result, 'submitSucceeded');
                if (payload && Object.keys(payload).length) {
                    var _error = payload._error, fieldErrors = (0, _objectWithoutPropertiesLoose3.default)(payload, ["_error"]);
                    if (_error) {
                        result = setIn(result, 'error', _error);
                    }
                    else {
                        result = deleteIn(result, 'error');
                    }
                    if (Object.keys(fieldErrors).length) {
                        result = setIn(result, 'submitErrors', fromJS(fieldErrors));
                    }
                    else {
                        result = deleteIn(result, 'submitErrors');
                    }
                    result = setIn(result, 'submitFailed', true);
                }
                else {
                    result = deleteIn(result, 'error');
                    result = deleteIn(result, 'submitErrors');
                }
                return result;
            }, _behaviors[_actionTypes.SET_SUBMIT_FAILED] = function (state, _ref24) {
                var fields = _ref24.meta.fields;
                var result = state;
                result = setIn(result, 'submitFailed', true);
                result = deleteIn(result, 'submitSucceeded');
                result = deleteIn(result, 'submitting');
                fields.forEach(function (field) {
                    return result = setIn(result, "fields." + field + ".touched", true);
                });
                if (fields.length) {
                    result = setIn(result, 'anyTouched', true);
                }
                return result;
            }, _behaviors[_actionTypes.SET_SUBMIT_SUCCEEDED] = function (state) {
                var result = state;
                result = deleteIn(result, 'submitFailed');
                result = setIn(result, 'submitSucceeded', true);
                return result;
            }, _behaviors[_actionTypes.TOUCH] = function (state, _ref25) {
                var fields = _ref25.meta.fields;
                var result = state;
                fields.forEach(function (field) {
                    return result = setIn(result, "fields." + field + ".touched", true);
                });
                result = setIn(result, 'anyTouched', true);
                return result;
            }, _behaviors[_actionTypes.UNREGISTER_FIELD] = function (state, _ref26) {
                var _ref26$payload = _ref26.payload, name = _ref26$payload.name, destroyOnUnmount = _ref26$payload.destroyOnUnmount;
                var result = state;
                var key = "registeredFields['" + name + "']";
                var field = getIn(result, key);
                if (!field) {
                    return result;
                }
                var count = getIn(field, 'count') - 1;
                if (count <= 0 && destroyOnUnmount) {
                    result = deleteIn(result, key);
                    if (deepEqual(getIn(result, 'registeredFields'), empty)) {
                        result = deleteIn(result, 'registeredFields');
                    }
                    var syncErrors = getIn(result, 'syncErrors');
                    if (syncErrors) {
                        syncErrors = plainDeleteInWithCleanUp(syncErrors, name);
                        if (_plain2.default.deepEqual(syncErrors, _plain2.default.empty)) {
                            result = deleteIn(result, 'syncErrors');
                        }
                        else {
                            result = setIn(result, 'syncErrors', syncErrors);
                        }
                    }
                    var syncWarnings = getIn(result, 'syncWarnings');
                    if (syncWarnings) {
                        syncWarnings = plainDeleteInWithCleanUp(syncWarnings, name);
                        if (_plain2.default.deepEqual(syncWarnings, _plain2.default.empty)) {
                            result = deleteIn(result, 'syncWarnings');
                        }
                        else {
                            result = setIn(result, 'syncWarnings', syncWarnings);
                        }
                    }
                    result = deleteInWithCleanUp(result, "submitErrors." + name);
                    result = deleteInWithCleanUp(result, "asyncErrors." + name);
                }
                else {
                    field = setIn(field, 'count', count);
                    result = setIn(result, key, field);
                }
                return result;
            }, _behaviors[_actionTypes.UNTOUCH] = function (state, _ref27) {
                var fields = _ref27.meta.fields;
                var result = state;
                fields.forEach(function (field) {
                    return result = deleteIn(result, "fields." + field + ".touched");
                });
                var anyTouched = some(keys(getIn(result, 'registeredFields')), function (key) {
                    return getIn(result, "fields." + key + ".touched");
                });
                result = anyTouched ? setIn(result, 'anyTouched', true) : deleteIn(result, 'anyTouched');
                return result;
            }, _behaviors[_actionTypes.UPDATE_SYNC_ERRORS] = function (state, _ref28) {
                var _ref28$payload = _ref28.payload, syncErrors = _ref28$payload.syncErrors, error = _ref28$payload.error;
                var result = state;
                if (error) {
                    result = setIn(result, 'error', error);
                    result = setIn(result, 'syncError', true);
                }
                else {
                    result = deleteIn(result, 'error');
                    result = deleteIn(result, 'syncError');
                }
                if (Object.keys(syncErrors).length) {
                    result = setIn(result, 'syncErrors', syncErrors);
                }
                else {
                    result = deleteIn(result, 'syncErrors');
                }
                return result;
            }, _behaviors[_actionTypes.UPDATE_SYNC_WARNINGS] = function (state, _ref29) {
                var _ref29$payload = _ref29.payload, syncWarnings = _ref29$payload.syncWarnings, warning = _ref29$payload.warning;
                var result = state;
                if (warning) {
                    result = setIn(result, 'warning', warning);
                }
                else {
                    result = deleteIn(result, 'warning');
                }
                if (Object.keys(syncWarnings).length) {
                    result = setIn(result, 'syncWarnings', syncWarnings);
                }
                else {
                    result = deleteIn(result, 'syncWarnings');
                }
                return result;
            }, _behaviors);
            var reducer = function reducer(state, action) {
                if (state === void 0) {
                    state = empty;
                }
                var behavior = behaviors[action.type];
                return behavior ? behavior(state, action) : state;
            };
            var byForm = function byForm(reducer) {
                return function (state, action) {
                    if (state === void 0) {
                        state = empty;
                    }
                    if (action === void 0) {
                        action = {
                            type: 'NONE'
                        };
                    }
                    var form = action && action.meta && action.meta.form;
                    if (!form || !isReduxFormAction(action)) {
                        return state;
                    }
                    if (action.type === _actionTypes.DESTROY && action.meta && action.meta.form) {
                        return action.meta.form.reduce(function (result, form) {
                            return deleteInWithCleanUp(result, form);
                        }, state);
                    }
                    var formState = getIn(state, form);
                    var result = reducer(formState, action);
                    return result === formState ? state : setIn(state, form, result);
                };
            };
            function decorate(target) {
                target.plugin = function (reducers, config) {
                    var _this = this;
                    if (config === void 0) {
                        config = {};
                    }
                    return decorate(function (state, action) {
                        if (state === void 0) {
                            state = empty;
                        }
                        if (action === void 0) {
                            action = {
                                type: 'NONE'
                            };
                        }
                        var callPlugin = function callPlugin(processed, key) {
                            var previousState = getIn(processed, key);
                            var nextState = reducers[key](previousState, action, getIn(state, key));
                            return nextState !== previousState ? setIn(processed, key, nextState) : processed;
                        };
                        var processed = _this(state, action);
                        var form = action && action.meta && action.meta.form;
                        if (form && !config.receiveAllFormActions) {
                            return reducers[form] ? callPlugin(processed, form) : processed;
                        }
                        else {
                            return Object.keys(reducers).reduce(callPlugin, processed);
                        }
                    });
                };
                return target;
            }
            return decorate(byForm(reducer));
        }
        exports.default = createReducer;
    }),
    "./node_modules/redux-form/es/createReduxForm.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        exports.default = createReduxForm;
        var _createClass2 = __webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js");
        var _createClass3 = _interopRequireDefault(_createClass2);
        var _inheritsLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/inheritsLoose.js");
        var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _objectWithoutPropertiesLoose2 = __webpack_require__("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
        var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);
        var _merge4 = __webpack_require__("./node_modules/lodash/merge.js");
        var _merge5 = _interopRequireDefault(_merge4);
        var _mapValues2 = __webpack_require__("./node_modules/lodash/mapValues.js");
        var _mapValues3 = _interopRequireDefault(_mapValues2);
        var _hoistNonReactStatics = __webpack_require__("./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
        var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);
        var _invariant = __webpack_require__("./node_modules/invariant/browser.js");
        var _invariant2 = _interopRequireDefault(_invariant);
        var _isPromise = __webpack_require__("./node_modules/is-promise/index.js");
        var _isPromise2 = _interopRequireDefault(_isPromise);
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _redux = __webpack_require__("./node_modules/redux/es/redux.js");
        var _actions = __webpack_require__("./node_modules/redux-form/es/actions.js");
        var _actions2 = _interopRequireDefault(_actions);
        var _asyncValidation = __webpack_require__("./node_modules/redux-form/es/asyncValidation.js");
        var _asyncValidation2 = _interopRequireDefault(_asyncValidation);
        var _defaultShouldAsyncValidate = __webpack_require__("./node_modules/redux-form/es/defaultShouldAsyncValidate.js");
        var _defaultShouldAsyncValidate2 = _interopRequireDefault(_defaultShouldAsyncValidate);
        var _defaultShouldValidate = __webpack_require__("./node_modules/redux-form/es/defaultShouldValidate.js");
        var _defaultShouldValidate2 = _interopRequireDefault(_defaultShouldValidate);
        var _defaultShouldError = __webpack_require__("./node_modules/redux-form/es/defaultShouldError.js");
        var _defaultShouldError2 = _interopRequireDefault(_defaultShouldError);
        var _defaultShouldWarn = __webpack_require__("./node_modules/redux-form/es/defaultShouldWarn.js");
        var _defaultShouldWarn2 = _interopRequireDefault(_defaultShouldWarn);
        var _silenceEvent = __webpack_require__("./node_modules/redux-form/es/events/silenceEvent.js");
        var _silenceEvent2 = _interopRequireDefault(_silenceEvent);
        var _silenceEvents = __webpack_require__("./node_modules/redux-form/es/events/silenceEvents.js");
        var _silenceEvents2 = _interopRequireDefault(_silenceEvents);
        var _generateValidator = __webpack_require__("./node_modules/redux-form/es/generateValidator.js");
        var _generateValidator2 = _interopRequireDefault(_generateValidator);
        var _handleSubmit = __webpack_require__("./node_modules/redux-form/es/handleSubmit.js");
        var _handleSubmit2 = _interopRequireDefault(_handleSubmit);
        var _isValid = __webpack_require__("./node_modules/redux-form/es/selectors/isValid.js");
        var _isValid2 = _interopRequireDefault(_isValid);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        var _getDisplayName = __webpack_require__("./node_modules/redux-form/es/util/getDisplayName.js");
        var _getDisplayName2 = _interopRequireDefault(_getDisplayName);
        var _isHotReloading = __webpack_require__("./node_modules/redux-form/es/util/isHotReloading.js");
        var _isHotReloading2 = _interopRequireDefault(_isHotReloading);
        var _ReduxFormContext = __webpack_require__("./node_modules/redux-form/es/ReduxFormContext.js");
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var isClassComponent = function isClassComponent(Component) {
            return Boolean(Component && Component.prototype && _typeof(Component.prototype.isReactComponent) === 'object');
        };
        var arrayInsert = _actions2.default.arrayInsert, arrayMove = _actions2.default.arrayMove, arrayPop = _actions2.default.arrayPop, arrayPush = _actions2.default.arrayPush, arrayRemove = _actions2.default.arrayRemove, arrayRemoveAll = _actions2.default.arrayRemoveAll, arrayShift = _actions2.default.arrayShift, arraySplice = _actions2.default.arraySplice, arraySwap = _actions2.default.arraySwap, arrayUnshift = _actions2.default.arrayUnshift, blur = _actions2.default.blur, change = _actions2.default.change, focus = _actions2.default.focus, formActions = (0, _objectWithoutPropertiesLoose3.default)(_actions2.default, ["arrayInsert", "arrayMove", "arrayPop", "arrayPush", "arrayRemove", "arrayRemoveAll", "arrayShift", "arraySplice", "arraySwap", "arrayUnshift", "blur", "change", "focus"]);
        var arrayActions = {
            arrayInsert: arrayInsert,
            arrayMove: arrayMove,
            arrayPop: arrayPop,
            arrayPush: arrayPush,
            arrayRemove: arrayRemove,
            arrayRemoveAll: arrayRemoveAll,
            arrayShift: arrayShift,
            arraySplice: arraySplice,
            arraySwap: arraySwap,
            arrayUnshift: arrayUnshift
        };
        var propsToNotUpdateFor = [].concat(Object.keys(_actions2.default), ['array', 'asyncErrors', 'initialValues', 'syncErrors', 'syncWarnings', 'values', 'registeredFields']);
        var checkSubmit = function checkSubmit(submit) {
            if (!submit || typeof submit !== 'function') {
                throw new Error('You must either pass handleSubmit() an onSubmit function or pass onSubmit as a prop');
            }
            return submit;
        };
        function createReduxForm(structure) {
            var deepEqual = structure.deepEqual, empty = structure.empty, getIn = structure.getIn, setIn = structure.setIn, keys = structure.keys, fromJS = structure.fromJS, toJS = structure.toJS;
            var isValid = (0, _isValid2.default)(structure);
            return function (initialConfig) {
                var config = (0, _extends3.default)({
                    touchOnBlur: true,
                    touchOnChange: false,
                    persistentSubmitErrors: false,
                    destroyOnUnmount: true,
                    shouldAsyncValidate: _defaultShouldAsyncValidate2.default,
                    shouldValidate: _defaultShouldValidate2.default,
                    shouldError: _defaultShouldError2.default,
                    shouldWarn: _defaultShouldWarn2.default,
                    enableReinitialize: false,
                    keepDirtyOnReinitialize: false,
                    updateUnregisteredFields: false,
                    getFormState: function getFormState(state) {
                        return getIn(state, 'form');
                    },
                    pure: true,
                    forceUnregisterOnUnmount: false,
                    submitAsSideEffect: false
                }, initialConfig);
                return function (WrappedComponent) {
                    var Form = function (_React$Component) {
                        (0, _inheritsLoose3.default)(Form, _React$Component);
                        function Form() {
                            var _this;
                            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                                args[_key] = arguments[_key];
                            }
                            _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
                            _this.wrapped = _react2.default.createRef();
                            _this.destroyed = false;
                            _this.fieldCounts = {};
                            _this.fieldValidators = {};
                            _this.lastFieldValidatorKeys = [];
                            _this.fieldWarners = {};
                            _this.lastFieldWarnerKeys = [];
                            _this.innerOnSubmit = undefined;
                            _this.submitPromise = undefined;
                            _this.getValues = function () {
                                return _this.props.values;
                            };
                            _this.isValid = function () {
                                return _this.props.valid;
                            };
                            _this.isPristine = function () {
                                return _this.props.pristine;
                            };
                            _this.register = function (name, type, getValidator, getWarner) {
                                var lastCount = _this.fieldCounts[name];
                                var nextCount = (lastCount || 0) + 1;
                                _this.fieldCounts[name] = nextCount;
                                _this.props.registerField(name, type);
                                if (getValidator) {
                                    _this.fieldValidators[name] = getValidator;
                                }
                                if (getWarner) {
                                    _this.fieldWarners[name] = getWarner;
                                }
                            };
                            _this.unregister = function (name) {
                                var lastCount = _this.fieldCounts[name];
                                if (lastCount === 1)
                                    delete _this.fieldCounts[name];
                                else if (lastCount != null)
                                    _this.fieldCounts[name] = lastCount - 1;
                                if (!_this.destroyed) {
                                    var _this$props = _this.props, _destroyOnUnmount = _this$props.destroyOnUnmount, forceUnregisterOnUnmount = _this$props.forceUnregisterOnUnmount, unregisterField = _this$props.unregisterField;
                                    if (_destroyOnUnmount || forceUnregisterOnUnmount) {
                                        unregisterField(name, _destroyOnUnmount);
                                        if (!_this.fieldCounts[name]) {
                                            delete _this.fieldValidators[name];
                                            delete _this.fieldWarners[name];
                                            _this.lastFieldValidatorKeys = _this.lastFieldValidatorKeys.filter(function (key) {
                                                return key !== name;
                                            });
                                        }
                                    }
                                    else {
                                        unregisterField(name, false);
                                    }
                                }
                            };
                            _this.getFieldList = function (options) {
                                var registeredFields = _this.props.registeredFields;
                                if (!registeredFields) {
                                    return [];
                                }
                                var keySeq = keys(registeredFields);
                                if (options) {
                                    if (options.excludeFieldArray) {
                                        keySeq = keySeq.filter(function (name) {
                                            return getIn(registeredFields, "['" + name + "'].type") !== 'FieldArray';
                                        });
                                    }
                                    if (options.excludeUnregistered) {
                                        keySeq = keySeq.filter(function (name) {
                                            return getIn(registeredFields, "['" + name + "'].count") !== 0;
                                        });
                                    }
                                }
                                return toJS(keySeq);
                            };
                            _this.getValidators = function () {
                                var validators = {};
                                Object.keys(_this.fieldValidators).forEach(function (name) {
                                    var validator = _this.fieldValidators[name]();
                                    if (validator) {
                                        validators[name] = validator;
                                    }
                                });
                                return validators;
                            };
                            _this.generateValidator = function () {
                                var validators = _this.getValidators();
                                return Object.keys(validators).length ? (0, _generateValidator2.default)(validators, structure) : undefined;
                            };
                            _this.getWarners = function () {
                                var warners = {};
                                Object.keys(_this.fieldWarners).forEach(function (name) {
                                    var warner = _this.fieldWarners[name]();
                                    if (warner) {
                                        warners[name] = warner;
                                    }
                                });
                                return warners;
                            };
                            _this.generateWarner = function () {
                                var warners = _this.getWarners();
                                return Object.keys(warners).length ? (0, _generateValidator2.default)(warners, structure) : undefined;
                            };
                            _this.asyncValidate = function (name, value, trigger) {
                                var _this$props2 = _this.props, asyncBlurFields = _this$props2.asyncBlurFields, asyncChangeFields = _this$props2.asyncChangeFields, asyncErrors = _this$props2.asyncErrors, asyncValidate = _this$props2.asyncValidate, dispatch = _this$props2.dispatch, initialized = _this$props2.initialized, pristine = _this$props2.pristine, shouldAsyncValidate = _this$props2.shouldAsyncValidate, startAsyncValidation = _this$props2.startAsyncValidation, stopAsyncValidation = _this$props2.stopAsyncValidation, syncErrors = _this$props2.syncErrors, values = _this$props2.values;
                                var submitting = !name;
                                var fieldNeedsValidation = function fieldNeedsValidation() {
                                    var fieldNeedsValidationForBlur = asyncBlurFields && name && ~asyncBlurFields.indexOf(name.replace(/\[[0-9]+\]/g, '[]'));
                                    var fieldNeedsValidationForChange = asyncChangeFields && name && ~asyncChangeFields.indexOf(name.replace(/\[[0-9]+\]/g, '[]'));
                                    var asyncValidateByDefault = !(asyncBlurFields || asyncChangeFields);
                                    return submitting || asyncValidateByDefault || (trigger === 'blur' ? fieldNeedsValidationForBlur : fieldNeedsValidationForChange);
                                };
                                if (asyncValidate) {
                                    var valuesToValidate = submitting ? values : setIn(values, name, value);
                                    var syncValidationPasses = submitting || !getIn(syncErrors, name);
                                    if (fieldNeedsValidation() && shouldAsyncValidate({
                                        asyncErrors: asyncErrors,
                                        initialized: initialized,
                                        trigger: submitting ? 'submit' : trigger,
                                        blurredField: name,
                                        pristine: pristine,
                                        syncValidationPasses: syncValidationPasses
                                    })) {
                                        return (0, _asyncValidation2.default)(function () {
                                            return asyncValidate(valuesToValidate, dispatch, _this.props, name);
                                        }, startAsyncValidation, stopAsyncValidation, name);
                                    }
                                }
                            };
                            _this.submitCompleted = function (result) {
                                delete _this.submitPromise;
                                return result;
                            };
                            _this.submitFailed = function (error) {
                                delete _this.submitPromise;
                                throw error;
                            };
                            _this.listenToSubmit = function (promise) {
                                if (!(0, _isPromise2.default)(promise)) {
                                    return promise;
                                }
                                _this.submitPromise = promise;
                                return promise.then(_this.submitCompleted, _this.submitFailed);
                            };
                            _this.submit = function (submitOrEvent) {
                                var _this$props3 = _this.props, onSubmit = _this$props3.onSubmit, blur = _this$props3.blur, change = _this$props3.change, dispatch = _this$props3.dispatch;
                                if (!submitOrEvent || (0, _silenceEvent2.default)(submitOrEvent)) {
                                    if (!_this.submitPromise) {
                                        if (_this.innerOnSubmit && _this.innerOnSubmit !== _this.submit) {
                                            return _this.innerOnSubmit();
                                        }
                                        else {
                                            return _this.listenToSubmit((0, _handleSubmit2.default)(checkSubmit(onSubmit), (0, _extends3.default)({}, _this.props, {}, (0, _redux.bindActionCreators)({
                                                blur: blur,
                                                change: change
                                            }, dispatch)), _this.props.validExceptSubmit, _this.asyncValidate, _this.getFieldList({
                                                excludeFieldArray: true,
                                                excludeUnregistered: true
                                            })));
                                        }
                                    }
                                }
                                else {
                                    return (0, _silenceEvents2.default)(function () {
                                        return !_this.submitPromise && _this.listenToSubmit((0, _handleSubmit2.default)(checkSubmit(submitOrEvent), (0, _extends3.default)({}, _this.props, {}, (0, _redux.bindActionCreators)({
                                            blur: blur,
                                            change: change
                                        }, dispatch)), _this.props.validExceptSubmit, _this.asyncValidate, _this.getFieldList({
                                            excludeFieldArray: true,
                                            excludeUnregistered: true
                                        })));
                                    });
                                }
                            };
                            _this.reset = function () {
                                return _this.props.reset();
                            };
                            return _this;
                        }
                        var _proto = Form.prototype;
                        _proto.initIfNeeded = function initIfNeeded(nextProps) {
                            var enableReinitialize = this.props.enableReinitialize;
                            if (nextProps) {
                                if ((enableReinitialize || !nextProps.initialized) && !deepEqual(this.props.initialValues, nextProps.initialValues)) {
                                    var _keepDirty = nextProps.initialized && this.props.keepDirtyOnReinitialize;
                                    this.props.initialize(nextProps.initialValues, _keepDirty, {
                                        keepValues: nextProps.keepValues,
                                        lastInitialValues: this.props.initialValues,
                                        updateUnregisteredFields: nextProps.updateUnregisteredFields
                                    });
                                }
                            }
                            else if (this.props.initialValues && (!this.props.initialized || enableReinitialize)) {
                                this.props.initialize(this.props.initialValues, this.props.keepDirtyOnReinitialize, {
                                    keepValues: this.props.keepValues,
                                    updateUnregisteredFields: this.props.updateUnregisteredFields
                                });
                            }
                        };
                        _proto.updateSyncErrorsIfNeeded = function updateSyncErrorsIfNeeded(nextSyncErrors, nextError, lastSyncErrors) {
                            var _this$props4 = this.props, error = _this$props4.error, updateSyncErrors = _this$props4.updateSyncErrors;
                            var noErrors = (!lastSyncErrors || !Object.keys(lastSyncErrors).length) && !error;
                            var nextNoErrors = (!nextSyncErrors || !Object.keys(nextSyncErrors).length) && !nextError;
                            if (!(noErrors && nextNoErrors) && (!_plain2.default.deepEqual(lastSyncErrors, nextSyncErrors) || !_plain2.default.deepEqual(error, nextError))) {
                                updateSyncErrors(nextSyncErrors, nextError);
                            }
                        };
                        _proto.clearSubmitPromiseIfNeeded = function clearSubmitPromiseIfNeeded(nextProps) {
                            var submitting = this.props.submitting;
                            if (this.submitPromise && submitting && !nextProps.submitting) {
                                delete this.submitPromise;
                            }
                        };
                        _proto.submitIfNeeded = function submitIfNeeded(nextProps) {
                            var _this$props5 = this.props, clearSubmit = _this$props5.clearSubmit, triggerSubmit = _this$props5.triggerSubmit;
                            if (!triggerSubmit && nextProps.triggerSubmit) {
                                clearSubmit();
                                this.submit();
                            }
                        };
                        _proto.shouldErrorFunction = function shouldErrorFunction() {
                            var _this$props6 = this.props, shouldValidate = _this$props6.shouldValidate, shouldError = _this$props6.shouldError;
                            var shouldValidateOverridden = shouldValidate !== _defaultShouldValidate2.default;
                            var shouldErrorOverridden = shouldError !== _defaultShouldError2.default;
                            return shouldValidateOverridden && !shouldErrorOverridden ? shouldValidate : shouldError;
                        };
                        _proto.validateIfNeeded = function validateIfNeeded(nextProps) {
                            var _this$props7 = this.props, validate = _this$props7.validate, values = _this$props7.values;
                            var shouldError = this.shouldErrorFunction();
                            var fieldLevelValidate = this.generateValidator();
                            if (validate || fieldLevelValidate) {
                                var initialRender = nextProps === undefined;
                                var fieldValidatorKeys = Object.keys(this.getValidators());
                                var validateParams = {
                                    values: values,
                                    nextProps: nextProps,
                                    props: this.props,
                                    initialRender: initialRender,
                                    lastFieldValidatorKeys: this.lastFieldValidatorKeys,
                                    fieldValidatorKeys: fieldValidatorKeys,
                                    structure: structure
                                };
                                if (shouldError(validateParams)) {
                                    var propsToValidate = initialRender || !nextProps ? this.props : nextProps;
                                    var _merge2 = (0, _merge5.default)(validate ? validate(propsToValidate.values, propsToValidate) || {} : {}, fieldLevelValidate ? fieldLevelValidate(propsToValidate.values, propsToValidate) || {} : {}), _error = _merge2._error, nextSyncErrors = (0, _objectWithoutPropertiesLoose3.default)(_merge2, ["_error"]);
                                    this.lastFieldValidatorKeys = fieldValidatorKeys;
                                    this.updateSyncErrorsIfNeeded(nextSyncErrors, _error, propsToValidate.syncErrors);
                                }
                            }
                            else {
                                this.lastFieldValidatorKeys = [];
                            }
                        };
                        _proto.updateSyncWarningsIfNeeded = function updateSyncWarningsIfNeeded(nextSyncWarnings, nextWarning, lastSyncWarnings) {
                            var _this$props8 = this.props, warning = _this$props8.warning, updateSyncWarnings = _this$props8.updateSyncWarnings;
                            var noWarnings = (!lastSyncWarnings || !Object.keys(lastSyncWarnings).length) && !warning;
                            var nextNoWarnings = (!nextSyncWarnings || !Object.keys(nextSyncWarnings).length) && !nextWarning;
                            if (!(noWarnings && nextNoWarnings) && (!_plain2.default.deepEqual(lastSyncWarnings, nextSyncWarnings) || !_plain2.default.deepEqual(warning, nextWarning))) {
                                updateSyncWarnings(nextSyncWarnings, nextWarning);
                            }
                        };
                        _proto.shouldWarnFunction = function shouldWarnFunction() {
                            var _this$props9 = this.props, shouldValidate = _this$props9.shouldValidate, shouldWarn = _this$props9.shouldWarn;
                            var shouldValidateOverridden = shouldValidate !== _defaultShouldValidate2.default;
                            var shouldWarnOverridden = shouldWarn !== _defaultShouldWarn2.default;
                            return shouldValidateOverridden && !shouldWarnOverridden ? shouldValidate : shouldWarn;
                        };
                        _proto.warnIfNeeded = function warnIfNeeded(nextProps) {
                            var _this$props10 = this.props, warn = _this$props10.warn, values = _this$props10.values;
                            var shouldWarn = this.shouldWarnFunction();
                            var fieldLevelWarn = this.generateWarner();
                            if (warn || fieldLevelWarn) {
                                var initialRender = nextProps === undefined;
                                var fieldWarnerKeys = Object.keys(this.getWarners());
                                var validateParams = {
                                    values: values,
                                    nextProps: nextProps,
                                    props: this.props,
                                    initialRender: initialRender,
                                    lastFieldValidatorKeys: this.lastFieldWarnerKeys,
                                    fieldValidatorKeys: fieldWarnerKeys,
                                    structure: structure
                                };
                                if (shouldWarn(validateParams)) {
                                    var propsToWarn = initialRender || !nextProps ? this.props : nextProps;
                                    var _merge3 = (0, _merge5.default)(warn ? warn(propsToWarn.values, propsToWarn) : {}, fieldLevelWarn ? fieldLevelWarn(propsToWarn.values, propsToWarn) : {}), _warning = _merge3._warning, nextSyncWarnings = (0, _objectWithoutPropertiesLoose3.default)(_merge3, ["_warning"]);
                                    this.lastFieldWarnerKeys = fieldWarnerKeys;
                                    this.updateSyncWarningsIfNeeded(nextSyncWarnings, _warning, propsToWarn.syncWarnings);
                                }
                            }
                        };
                        _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {
                            if (!(0, _isHotReloading2.default)()) {
                                this.initIfNeeded();
                                this.validateIfNeeded();
                                this.warnIfNeeded();
                            }
                            (0, _invariant2.default)(this.props.shouldValidate, 'shouldValidate() is deprecated and will be removed in v9.0.0. Use shouldWarn() or shouldError() instead.');
                        };
                        _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
                            this.initIfNeeded(nextProps);
                            this.validateIfNeeded(nextProps);
                            this.warnIfNeeded(nextProps);
                            this.clearSubmitPromiseIfNeeded(nextProps);
                            this.submitIfNeeded(nextProps);
                            var onChange = nextProps.onChange, values = nextProps.values, dispatch = nextProps.dispatch;
                            if (onChange && !deepEqual(values, this.props.values)) {
                                onChange(values, dispatch, nextProps, this.props.values);
                            }
                        };
                        _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
                            var _this2 = this;
                            if (!this.props.pure)
                                return true;
                            var _config$immutableProp = config.immutableProps, immutableProps = _config$immutableProp === void 0 ? [] : _config$immutableProp;
                            return !!(this.props.children || nextProps.children || Object.keys(nextProps).some(function (prop) {
                                if (~immutableProps.indexOf(prop)) {
                                    return _this2.props[prop] !== nextProps[prop];
                                }
                                return !~propsToNotUpdateFor.indexOf(prop) && !deepEqual(_this2.props[prop], nextProps[prop]);
                            }));
                        };
                        _proto.componentDidMount = function componentDidMount() {
                            if (!(0, _isHotReloading2.default)()) {
                                this.initIfNeeded(this.props);
                                this.validateIfNeeded();
                                this.warnIfNeeded();
                            }
                            (0, _invariant2.default)(this.props.shouldValidate, 'shouldValidate() is deprecated and will be removed in v9.0.0. Use shouldWarn() or shouldError() instead.');
                        };
                        _proto.componentWillUnmount = function componentWillUnmount() {
                            var _this$props11 = this.props, destroyOnUnmount = _this$props11.destroyOnUnmount, destroy = _this$props11.destroy;
                            if (destroyOnUnmount && !(0, _isHotReloading2.default)()) {
                                this.destroyed = true;
                                destroy();
                            }
                        };
                        _proto.render = function render() {
                            var _ref, _this3 = this;
                            var _this$props12 = this.props, anyTouched = _this$props12.anyTouched, array = _this$props12.array, arrayInsert = _this$props12.arrayInsert, arrayMove = _this$props12.arrayMove, arrayPop = _this$props12.arrayPop, arrayPush = _this$props12.arrayPush, arrayRemove = _this$props12.arrayRemove, arrayRemoveAll = _this$props12.arrayRemoveAll, arrayShift = _this$props12.arrayShift, arraySplice = _this$props12.arraySplice, arraySwap = _this$props12.arraySwap, arrayUnshift = _this$props12.arrayUnshift, asyncErrors = _this$props12.asyncErrors, asyncValidate = _this$props12.asyncValidate, asyncValidating = _this$props12.asyncValidating, blur = _this$props12.blur, change = _this$props12.change, clearSubmit = _this$props12.clearSubmit, destroy = _this$props12.destroy, destroyOnUnmount = _this$props12.destroyOnUnmount, forceUnregisterOnUnmount = _this$props12.forceUnregisterOnUnmount, dirty = _this$props12.dirty, dispatch = _this$props12.dispatch, enableReinitialize = _this$props12.enableReinitialize, error = _this$props12.error, focus = _this$props12.focus, form = _this$props12.form, getFormState = _this$props12.getFormState, immutableProps = _this$props12.immutableProps, initialize = _this$props12.initialize, initialized = _this$props12.initialized, initialValues = _this$props12.initialValues, invalid = _this$props12.invalid, keepDirtyOnReinitialize = _this$props12.keepDirtyOnReinitialize, keepValues = _this$props12.keepValues, updateUnregisteredFields = _this$props12.updateUnregisteredFields, pristine = _this$props12.pristine, propNamespace = _this$props12.propNamespace, registeredFields = _this$props12.registeredFields, registerField = _this$props12.registerField, reset = _this$props12.reset, resetSection = _this$props12.resetSection, setSubmitFailed = _this$props12.setSubmitFailed, setSubmitSucceeded = _this$props12.setSubmitSucceeded, shouldAsyncValidate = _this$props12.shouldAsyncValidate, shouldValidate = _this$props12.shouldValidate, shouldError = _this$props12.shouldError, shouldWarn = _this$props12.shouldWarn, startAsyncValidation = _this$props12.startAsyncValidation, startSubmit = _this$props12.startSubmit, stopAsyncValidation = _this$props12.stopAsyncValidation, stopSubmit = _this$props12.stopSubmit, submitAsSideEffect = _this$props12.submitAsSideEffect, submitting = _this$props12.submitting, submitFailed = _this$props12.submitFailed, submitSucceeded = _this$props12.submitSucceeded, touch = _this$props12.touch, touchOnBlur = _this$props12.touchOnBlur, touchOnChange = _this$props12.touchOnChange, persistentSubmitErrors = _this$props12.persistentSubmitErrors, syncErrors = _this$props12.syncErrors, syncWarnings = _this$props12.syncWarnings, unregisterField = _this$props12.unregisterField, untouch = _this$props12.untouch, updateSyncErrors = _this$props12.updateSyncErrors, updateSyncWarnings = _this$props12.updateSyncWarnings, valid = _this$props12.valid, validExceptSubmit = _this$props12.validExceptSubmit, values = _this$props12.values, warning = _this$props12.warning, rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props12, ["anyTouched", "array", "arrayInsert", "arrayMove", "arrayPop", "arrayPush", "arrayRemove", "arrayRemoveAll", "arrayShift", "arraySplice", "arraySwap", "arrayUnshift", "asyncErrors", "asyncValidate", "asyncValidating", "blur", "change", "clearSubmit", "destroy", "destroyOnUnmount", "forceUnregisterOnUnmount", "dirty", "dispatch", "enableReinitialize", "error", "focus", "form", "getFormState", "immutableProps", "initialize", "initialized", "initialValues", "invalid", "keepDirtyOnReinitialize", "keepValues", "updateUnregisteredFields", "pristine", "propNamespace", "registeredFields", "registerField", "reset", "resetSection", "setSubmitFailed", "setSubmitSucceeded", "shouldAsyncValidate", "shouldValidate", "shouldError", "shouldWarn", "startAsyncValidation", "startSubmit", "stopAsyncValidation", "stopSubmit", "submitAsSideEffect", "submitting", "submitFailed", "submitSucceeded", "touch", "touchOnBlur", "touchOnChange", "persistentSubmitErrors", "syncErrors", "syncWarnings", "unregisterField", "untouch", "updateSyncErrors", "updateSyncWarnings", "valid", "validExceptSubmit", "values", "warning"]);
                            var reduxFormProps = (0, _extends3.default)({
                                array: array,
                                anyTouched: anyTouched,
                                asyncValidate: this.asyncValidate,
                                asyncValidating: asyncValidating
                            }, (0, _redux.bindActionCreators)({
                                blur: blur,
                                change: change
                            }, dispatch), {
                                clearSubmit: clearSubmit,
                                destroy: destroy,
                                dirty: dirty,
                                dispatch: dispatch,
                                error: error,
                                form: form,
                                handleSubmit: this.submit,
                                initialize: initialize,
                                initialized: initialized,
                                initialValues: initialValues,
                                invalid: invalid,
                                pristine: pristine,
                                reset: reset,
                                resetSection: resetSection,
                                submitting: submitting,
                                submitAsSideEffect: submitAsSideEffect,
                                submitFailed: submitFailed,
                                submitSucceeded: submitSucceeded,
                                touch: touch,
                                untouch: untouch,
                                valid: valid,
                                warning: warning
                            });
                            var propsToPass = (0, _extends3.default)({}, propNamespace ? (_ref = {}, _ref[propNamespace] = reduxFormProps, _ref) : reduxFormProps, {}, rest);
                            if (isClassComponent(WrappedComponent)) {
                                ;
                                propsToPass.ref = this.wrapped;
                            }
                            var _reduxForm = (0, _extends3.default)({}, this.props, {
                                getFormState: function getFormState(state) {
                                    return getIn(_this3.props.getFormState(state), _this3.props.form);
                                },
                                asyncValidate: this.asyncValidate,
                                getValues: this.getValues,
                                sectionPrefix: undefined,
                                register: this.register,
                                unregister: this.unregister,
                                registerInnerOnSubmit: function registerInnerOnSubmit(innerOnSubmit) {
                                    return _this3.innerOnSubmit = innerOnSubmit;
                                }
                            });
                            return (0, _react.createElement)(_ReduxFormContext.ReduxFormContext.Provider, {
                                value: _reduxForm,
                                children: (0, _react.createElement)(WrappedComponent, propsToPass)
                            });
                        };
                        return Form;
                    }(_react2.default.Component);
                    Form.displayName = "Form(" + (0, _getDisplayName2.default)(WrappedComponent) + ")";
                    Form.WrappedComponent = WrappedComponent;
                    Form.propTypes = {
                        destroyOnUnmount: _propTypes2.default.bool,
                        forceUnregisterOnUnmount: _propTypes2.default.bool,
                        form: _propTypes2.default.string.isRequired,
                        immutableProps: _propTypes2.default.arrayOf(_propTypes2.default.string),
                        initialValues: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object]),
                        getFormState: _propTypes2.default.func,
                        onSubmitFail: _propTypes2.default.func,
                        onSubmitSuccess: _propTypes2.default.func,
                        propNamespace: _propTypes2.default.string,
                        validate: _propTypes2.default.func,
                        warn: _propTypes2.default.func,
                        touchOnBlur: _propTypes2.default.bool,
                        touchOnChange: _propTypes2.default.bool,
                        triggerSubmit: _propTypes2.default.bool,
                        persistentSubmitErrors: _propTypes2.default.bool,
                        registeredFields: _propTypes2.default.any
                    };
                    var connector = (0, _reactRedux.connect)(function (state, props) {
                        var form = props.form, getFormState = props.getFormState, initialValues = props.initialValues, enableReinitialize = props.enableReinitialize, keepDirtyOnReinitialize = props.keepDirtyOnReinitialize;
                        var formState = getIn(getFormState(state) || empty, form) || empty;
                        var stateInitial = getIn(formState, 'initial');
                        var initialized = !!stateInitial;
                        var shouldUpdateInitialValues = enableReinitialize && initialized && !deepEqual(initialValues, stateInitial);
                        var shouldResetValues = shouldUpdateInitialValues && !keepDirtyOnReinitialize;
                        var initial = initialValues || stateInitial || empty;
                        if (!shouldUpdateInitialValues) {
                            initial = stateInitial || empty;
                        }
                        var values = getIn(formState, 'values') || initial;
                        if (shouldResetValues) {
                            values = initial;
                        }
                        var pristine = shouldResetValues || deepEqual(initial, values);
                        var asyncErrors = getIn(formState, 'asyncErrors');
                        var syncErrors = getIn(formState, 'syncErrors') || _plain2.default.empty;
                        var syncWarnings = getIn(formState, 'syncWarnings') || _plain2.default.empty;
                        var registeredFields = getIn(formState, 'registeredFields');
                        var valid = isValid(form, getFormState, false)(state);
                        var validExceptSubmit = isValid(form, getFormState, true)(state);
                        var anyTouched = !!getIn(formState, 'anyTouched');
                        var submitting = !!getIn(formState, 'submitting');
                        var submitFailed = !!getIn(formState, 'submitFailed');
                        var submitSucceeded = !!getIn(formState, 'submitSucceeded');
                        var error = getIn(formState, 'error');
                        var warning = getIn(formState, 'warning');
                        var triggerSubmit = getIn(formState, 'triggerSubmit');
                        return {
                            anyTouched: anyTouched,
                            asyncErrors: asyncErrors,
                            asyncValidating: getIn(formState, 'asyncValidating') || false,
                            dirty: !pristine,
                            error: error,
                            initialized: initialized,
                            invalid: !valid,
                            pristine: pristine,
                            registeredFields: registeredFields,
                            submitting: submitting,
                            submitFailed: submitFailed,
                            submitSucceeded: submitSucceeded,
                            syncErrors: syncErrors,
                            syncWarnings: syncWarnings,
                            triggerSubmit: triggerSubmit,
                            values: values,
                            valid: valid,
                            validExceptSubmit: validExceptSubmit,
                            warning: warning
                        };
                    }, function (dispatch, initialProps) {
                        var bindForm = function bindForm(actionCreator) {
                            return actionCreator.bind(null, initialProps.form);
                        };
                        var boundFormACs = (0, _mapValues3.default)(formActions, bindForm);
                        var boundArrayACs = (0, _mapValues3.default)(arrayActions, bindForm);
                        var boundBlur = function boundBlur(field, value) {
                            return blur(initialProps.form, field, value, !!initialProps.touchOnBlur);
                        };
                        var boundChange = function boundChange(field, value) {
                            return change(initialProps.form, field, value, !!initialProps.touchOnChange, !!initialProps.persistentSubmitErrors);
                        };
                        var boundFocus = bindForm(focus);
                        var connectedFormACs = (0, _redux.bindActionCreators)(boundFormACs, dispatch);
                        var connectedArrayACs = {
                            insert: (0, _redux.bindActionCreators)(boundArrayACs.arrayInsert, dispatch),
                            move: (0, _redux.bindActionCreators)(boundArrayACs.arrayMove, dispatch),
                            pop: (0, _redux.bindActionCreators)(boundArrayACs.arrayPop, dispatch),
                            push: (0, _redux.bindActionCreators)(boundArrayACs.arrayPush, dispatch),
                            remove: (0, _redux.bindActionCreators)(boundArrayACs.arrayRemove, dispatch),
                            removeAll: (0, _redux.bindActionCreators)(boundArrayACs.arrayRemoveAll, dispatch),
                            shift: (0, _redux.bindActionCreators)(boundArrayACs.arrayShift, dispatch),
                            splice: (0, _redux.bindActionCreators)(boundArrayACs.arraySplice, dispatch),
                            swap: (0, _redux.bindActionCreators)(boundArrayACs.arraySwap, dispatch),
                            unshift: (0, _redux.bindActionCreators)(boundArrayACs.arrayUnshift, dispatch)
                        };
                        return (0, _extends3.default)({}, connectedFormACs, {}, boundArrayACs, {
                            blur: boundBlur,
                            change: boundChange,
                            array: connectedArrayACs,
                            focus: boundFocus,
                            dispatch: dispatch
                        });
                    }, undefined, {
                        forwardRef: true
                    });
                    var ConnectedForm = (0, _hoistNonReactStatics2.default)(connector(Form), WrappedComponent);
                    ConnectedForm.defaultProps = config;
                    var ReduxForm = function (_React$Component2) {
                        (0, _inheritsLoose3.default)(ReduxForm, _React$Component2);
                        function ReduxForm() {
                            var _this4;
                            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                                args[_key2] = arguments[_key2];
                            }
                            _this4 = _React$Component2.call.apply(_React$Component2, [this].concat(args)) || this;
                            _this4.ref = _react2.default.createRef();
                            return _this4;
                        }
                        var _proto2 = ReduxForm.prototype;
                        _proto2.submit = function submit() {
                            return this.ref.current && this.ref.current.submit();
                        };
                        _proto2.reset = function reset() {
                            if (this.ref) {
                                this.ref.current.reset();
                            }
                        };
                        _proto2.render = function render() {
                            var _this$props13 = this.props, initialValues = _this$props13.initialValues, rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props13, ["initialValues"]);
                            return (0, _react.createElement)(ConnectedForm, (0, _extends3.default)({}, rest, {
                                ref: this.ref,
                                initialValues: fromJS(initialValues)
                            }));
                        };
                        (0, _createClass3.default)(ReduxForm, [{
                                key: "valid",
                                get: function get() {
                                    return !!(this.ref.current && this.ref.current.isValid());
                                }
                            }, {
                                key: "invalid",
                                get: function get() {
                                    return !this.valid;
                                }
                            }, {
                                key: "pristine",
                                get: function get() {
                                    return !!(this.ref.current && this.ref.current.isPristine());
                                }
                            }, {
                                key: "dirty",
                                get: function get() {
                                    return !this.pristine;
                                }
                            }, {
                                key: "values",
                                get: function get() {
                                    return this.ref.current ? this.ref.current.getValues() : empty;
                                }
                            }, {
                                key: "fieldList",
                                get: function get() {
                                    return this.ref.current ? this.ref.current.getFieldList() : [];
                                }
                            }, {
                                key: "wrappedInstance",
                                get: function get() {
                                    return this.ref.current && this.ref.current.wrapped.current;
                                }
                            }]);
                        return ReduxForm;
                    }(_react2.default.Component);
                    var WithContext = (0, _hoistNonReactStatics2.default)((0, _ReduxFormContext.withReduxForm)(ReduxForm), WrappedComponent);
                    WithContext.defaultProps = config;
                    return WithContext;
                };
            };
        }
    }),
    "./node_modules/redux-form/es/createValues.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createValues;
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function createValues(_ref) {
            var getIn = _ref.getIn;
            return function (config) {
                var _prop$getFormState$co = (0, _extends3.default)({
                    prop: 'values',
                    getFormState: function getFormState(state) {
                        return getIn(state, 'form');
                    }
                }, config), form = _prop$getFormState$co.form, prop = _prop$getFormState$co.prop, getFormState = _prop$getFormState$co.getFormState;
                return (0, _reactRedux.connect)(function (state) {
                    var _ref2;
                    return _ref2 = {}, _ref2[prop] = getIn(getFormState(state), form + ".values"), _ref2;
                });
            };
        }
    }),
    "./node_modules/redux-form/es/defaultShouldAsyncValidate.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var defaultShouldAsyncValidate = function defaultShouldAsyncValidate(_ref) {
            var initialized = _ref.initialized, trigger = _ref.trigger, pristine = _ref.pristine, syncValidationPasses = _ref.syncValidationPasses;
            if (!syncValidationPasses) {
                return false;
            }
            switch (trigger) {
                case 'blur':
                case 'change':
                    return true;
                case 'submit':
                    return !pristine || !initialized;
                default:
                    return false;
            }
        };
        exports.default = defaultShouldAsyncValidate;
    }),
    "./node_modules/redux-form/es/defaultShouldError.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var defaultShouldError = function defaultShouldError(_ref) {
            var values = _ref.values, nextProps = _ref.nextProps, initialRender = _ref.initialRender, lastFieldValidatorKeys = _ref.lastFieldValidatorKeys, fieldValidatorKeys = _ref.fieldValidatorKeys, structure = _ref.structure;
            if (initialRender) {
                return true;
            }
            return !structure.deepEqual(values, nextProps && nextProps.values) || !structure.deepEqual(lastFieldValidatorKeys, fieldValidatorKeys);
        };
        exports.default = defaultShouldError;
    }),
    "./node_modules/redux-form/es/defaultShouldValidate.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var defaultShouldValidate = function defaultShouldValidate(_ref) {
            var values = _ref.values, nextProps = _ref.nextProps, initialRender = _ref.initialRender, lastFieldValidatorKeys = _ref.lastFieldValidatorKeys, fieldValidatorKeys = _ref.fieldValidatorKeys, structure = _ref.structure;
            if (initialRender) {
                return true;
            }
            return !structure.deepEqual(values, nextProps && nextProps.values) || !structure.deepEqual(lastFieldValidatorKeys, fieldValidatorKeys);
        };
        exports.default = defaultShouldValidate;
    }),
    "./node_modules/redux-form/es/defaultShouldWarn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var defaultShouldWarn = function defaultShouldWarn(_ref) {
            var values = _ref.values, nextProps = _ref.nextProps, initialRender = _ref.initialRender, lastFieldValidatorKeys = _ref.lastFieldValidatorKeys, fieldValidatorKeys = _ref.fieldValidatorKeys, structure = _ref.structure;
            if (initialRender) {
                return true;
            }
            return !structure.deepEqual(values, nextProps && nextProps.values) || !structure.deepEqual(lastFieldValidatorKeys, fieldValidatorKeys);
        };
        exports.default = defaultShouldWarn;
    }),
    "./node_modules/redux-form/es/deleteInWithCleanUp.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _toPath2 = __webpack_require__("./node_modules/lodash/toPath.js");
        var _toPath3 = _interopRequireDefault(_toPath2);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function createDeleteInWithCleanUp(structure) {
            var shouldDeleteDefault = function shouldDeleteDefault(structure) {
                return function (state, path) {
                    return structure.getIn(state, path) !== undefined;
                };
            };
            var deepEqual = structure.deepEqual, empty = structure.empty, getIn = structure.getIn, deleteIn = structure.deleteIn, setIn = structure.setIn;
            return function (shouldDelete) {
                if (shouldDelete === void 0) {
                    shouldDelete = shouldDeleteDefault;
                }
                var deleteInWithCleanUp = function deleteInWithCleanUp(state, path) {
                    if (path[path.length - 1] === ']') {
                        var pathTokens = (0, _toPath3.default)(path);
                        pathTokens.pop();
                        var parent = getIn(state, pathTokens.join('.'));
                        return parent ? setIn(state, path) : state;
                    }
                    var result = state;
                    if (shouldDelete(structure)(state, path)) {
                        result = deleteIn(state, path);
                    }
                    var dotIndex = path.lastIndexOf('.');
                    if (dotIndex > 0) {
                        var parentPath = path.substring(0, dotIndex);
                        if (parentPath[parentPath.length - 1] !== ']') {
                            var _parent = getIn(result, parentPath);
                            if (deepEqual(_parent, empty)) {
                                return deleteInWithCleanUp(result, parentPath);
                            }
                        }
                    }
                    return result;
                };
                return deleteInWithCleanUp;
            };
        }
        exports.default = createDeleteInWithCleanUp;
    }),
    "./node_modules/redux-form/es/events/getValue.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isEvent = __webpack_require__("./node_modules/redux-form/es/events/isEvent.js");
        var _isEvent2 = _interopRequireDefault(_isEvent);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var getSelectedValues = function getSelectedValues(options) {
            var result = [];
            if (options) {
                for (var index = 0; index < options.length; index++) {
                    var option = options[index];
                    if (option.selected) {
                        result.push(option.value);
                    }
                }
            }
            return result;
        };
        var getValue = function getValue(event, isReactNative) {
            if ((0, _isEvent2.default)(event)) {
                if (!isReactNative && event.nativeEvent && event.nativeEvent.text !== undefined) {
                    return event.nativeEvent.text;
                }
                if (isReactNative && event.nativeEvent !== undefined) {
                    return event.nativeEvent.text;
                }
                var detypedEvent = event;
                var _detypedEvent$target = detypedEvent.target, type = _detypedEvent$target.type, value = _detypedEvent$target.value, checked = _detypedEvent$target.checked, files = _detypedEvent$target.files, dataTransfer = detypedEvent.dataTransfer;
                if (type === 'checkbox') {
                    return !!checked;
                }
                if (type === 'file') {
                    return files || dataTransfer && dataTransfer.files;
                }
                if (type === 'select-multiple') {
                    return getSelectedValues(event.target.options);
                }
                return value;
            }
            return event;
        };
        exports.default = getValue;
    }),
    "./node_modules/redux-form/es/events/isEvent.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var isEvent = function isEvent(candidate) {
            return !!(candidate && candidate.stopPropagation && candidate.preventDefault);
        };
        exports.default = isEvent;
    }),
    "./node_modules/redux-form/es/events/onChangeValue.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getValue = __webpack_require__("./node_modules/redux-form/es/events/getValue.js");
        var _getValue2 = _interopRequireDefault(_getValue);
        var _isReactNative = __webpack_require__("./node_modules/redux-form/es/isReactNative.js");
        var _isReactNative2 = _interopRequireDefault(_isReactNative);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var onChangeValue = function onChangeValue(event, _ref) {
            var name = _ref.name, parse = _ref.parse, normalize = _ref.normalize;
            var value = (0, _getValue2.default)(event, _isReactNative2.default);
            if (parse) {
                value = parse(value, name);
            }
            if (normalize) {
                value = normalize(name, value);
            }
            return value;
        };
        exports.default = onChangeValue;
    }),
    "./node_modules/redux-form/es/events/silenceEvent.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isEvent = __webpack_require__("./node_modules/redux-form/es/events/isEvent.js");
        var _isEvent2 = _interopRequireDefault(_isEvent);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var silenceEvent = function silenceEvent(event) {
            var is = (0, _isEvent2.default)(event);
            if (is) {
                event.preventDefault();
            }
            return is;
        };
        exports.default = silenceEvent;
    }),
    "./node_modules/redux-form/es/events/silenceEvents.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _silenceEvent = __webpack_require__("./node_modules/redux-form/es/events/silenceEvent.js");
        var _silenceEvent2 = _interopRequireDefault(_silenceEvent);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var silenceEvents = function silenceEvents(fn) {
            return function (event) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                }
                return (0, _silenceEvent2.default)(event) ? fn.apply(void 0, args) : fn.apply(void 0, [event].concat(args));
            };
        };
        exports.default = silenceEvents;
    }),
    "./node_modules/redux-form/es/formValueSelector.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createFormValueSelector = __webpack_require__("./node_modules/redux-form/es/createFormValueSelector.js");
        var _createFormValueSelector2 = _interopRequireDefault(_createFormValueSelector);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _createFormValueSelector2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/formValues.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createFormValues = __webpack_require__("./node_modules/redux-form/es/createFormValues.js");
        var _createFormValues2 = _interopRequireDefault(_createFormValues);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _createFormValues2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/generateValidator.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = generateValidator;
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var toArray = function toArray(value) {
            return Array.isArray(value) ? value : [value];
        };
        var getError = function getError(value, values, props, validators, name) {
            var array = toArray(validators);
            for (var i = 0; i < array.length; i++) {
                var error = array[i](value, values, props, name);
                if (error) {
                    return error;
                }
            }
        };
        function generateValidator(validators, _ref) {
            var getIn = _ref.getIn;
            return function (values, props) {
                var errors = {};
                Object.keys(validators).forEach(function (name) {
                    var value = getIn(values, name);
                    var error = getError(value, values, props, validators[name], name);
                    if (error) {
                        errors = _plain2.default.setIn(errors, name, error);
                    }
                });
                return errors;
            };
        }
    }),
    "./node_modules/redux-form/es/getFormAsyncErrors.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getFormAsyncErrors = __webpack_require__("./node_modules/redux-form/es/selectors/getFormAsyncErrors.js");
        var _getFormAsyncErrors2 = _interopRequireDefault(_getFormAsyncErrors);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _getFormAsyncErrors2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/getFormError.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getFormError = __webpack_require__("./node_modules/redux-form/es/selectors/getFormError.js");
        var _getFormError2 = _interopRequireDefault(_getFormError);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _getFormError2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/getFormInitialValues.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getFormInitialValues = __webpack_require__("./node_modules/redux-form/es/selectors/getFormInitialValues.js");
        var _getFormInitialValues2 = _interopRequireDefault(_getFormInitialValues);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _getFormInitialValues2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/getFormMeta.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getFormMeta = __webpack_require__("./node_modules/redux-form/es/selectors/getFormMeta.js");
        var _getFormMeta2 = _interopRequireDefault(_getFormMeta);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _getFormMeta2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/getFormNames.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getFormNames = __webpack_require__("./node_modules/redux-form/es/selectors/getFormNames.js");
        var _getFormNames2 = _interopRequireDefault(_getFormNames);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _getFormNames2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/getFormSubmitErrors.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getFormSubmitErrors = __webpack_require__("./node_modules/redux-form/es/selectors/getFormSubmitErrors.js");
        var _getFormSubmitErrors2 = _interopRequireDefault(_getFormSubmitErrors);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _getFormSubmitErrors2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/getFormSyncErrors.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getFormSyncErrors = __webpack_require__("./node_modules/redux-form/es/selectors/getFormSyncErrors.js");
        var _getFormSyncErrors2 = _interopRequireDefault(_getFormSyncErrors);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _getFormSyncErrors2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/getFormSyncWarnings.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getFormSyncWarnings = __webpack_require__("./node_modules/redux-form/es/selectors/getFormSyncWarnings.js");
        var _getFormSyncWarnings2 = _interopRequireDefault(_getFormSyncWarnings);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _getFormSyncWarnings2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/getFormValues.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _getFormValues = __webpack_require__("./node_modules/redux-form/es/selectors/getFormValues.js");
        var _getFormValues2 = _interopRequireDefault(_getFormValues);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _getFormValues2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/handleSubmit.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends2 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends3 = _interopRequireDefault(_extends2);
        var _isPromise = __webpack_require__("./node_modules/is-promise/index.js");
        var _isPromise2 = _interopRequireDefault(_isPromise);
        var _SubmissionError = __webpack_require__("./node_modules/redux-form/es/SubmissionError.js");
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var mergeErrors = function mergeErrors(_ref) {
            var asyncErrors = _ref.asyncErrors, syncErrors = _ref.syncErrors;
            return asyncErrors && typeof asyncErrors.merge === 'function' ? asyncErrors.merge(syncErrors).toJS() : (0, _extends3.default)({}, asyncErrors, {}, syncErrors);
        };
        var executeSubmit = function executeSubmit(submit, fields, props) {
            var dispatch = props.dispatch, submitAsSideEffect = props.submitAsSideEffect, onSubmitFail = props.onSubmitFail, onSubmitSuccess = props.onSubmitSuccess, startSubmit = props.startSubmit, stopSubmit = props.stopSubmit, setSubmitFailed = props.setSubmitFailed, setSubmitSucceeded = props.setSubmitSucceeded, values = props.values;
            var result;
            try {
                result = submit(values, dispatch, props);
            }
            catch (submitError) {
                var error = (0, _SubmissionError.isSubmissionError)(submitError) ? submitError.errors : undefined;
                stopSubmit(error);
                setSubmitFailed.apply(void 0, fields);
                if (onSubmitFail) {
                    onSubmitFail(error, dispatch, submitError, props);
                }
                if (error || onSubmitFail) {
                    return error;
                }
                else {
                    throw submitError;
                }
            }
            if (submitAsSideEffect) {
                if (result) {
                    dispatch(result);
                }
            }
            else {
                if ((0, _isPromise2.default)(result)) {
                    startSubmit();
                    return result.then(function (submitResult) {
                        stopSubmit();
                        setSubmitSucceeded();
                        if (onSubmitSuccess) {
                            onSubmitSuccess(submitResult, dispatch, props);
                        }
                        return submitResult;
                    }, function (submitError) {
                        var error = (0, _SubmissionError.isSubmissionError)(submitError) ? submitError.errors : undefined;
                        stopSubmit(error);
                        setSubmitFailed.apply(void 0, fields);
                        if (onSubmitFail) {
                            onSubmitFail(error, dispatch, submitError, props);
                        }
                        if (error || onSubmitFail) {
                            return error;
                        }
                        else {
                            throw submitError;
                        }
                    });
                }
                else {
                    setSubmitSucceeded();
                    if (onSubmitSuccess) {
                        onSubmitSuccess(result, dispatch, props);
                    }
                }
            }
            return result;
        };
        var handleSubmit = function handleSubmit(submit, props, valid, asyncValidate, fields) {
            var dispatch = props.dispatch, onSubmitFail = props.onSubmitFail, setSubmitFailed = props.setSubmitFailed, syncErrors = props.syncErrors, asyncErrors = props.asyncErrors, touch = props.touch, persistentSubmitErrors = props.persistentSubmitErrors;
            touch.apply(void 0, fields);
            if (valid || persistentSubmitErrors) {
                var asyncValidateResult = asyncValidate && asyncValidate();
                if (asyncValidateResult) {
                    return asyncValidateResult.then(function (asyncErrors) {
                        if (asyncErrors) {
                            throw asyncErrors;
                        }
                        return executeSubmit(submit, fields, props);
                    })["catch"](function (asyncErrors) {
                        setSubmitFailed.apply(void 0, fields);
                        if (onSubmitFail) {
                            onSubmitFail(asyncErrors, dispatch, null, props);
                        }
                        return Promise.reject(asyncErrors);
                    });
                }
                else {
                    return executeSubmit(submit, fields, props);
                }
            }
            else {
                setSubmitFailed.apply(void 0, fields);
                var errors = mergeErrors({
                    asyncErrors: asyncErrors,
                    syncErrors: syncErrors
                });
                if (onSubmitFail) {
                    onSubmitFail(errors, dispatch, null, props);
                }
                return errors;
            }
        };
        exports.default = handleSubmit;
    }),
    "./node_modules/redux-form/es/hasError.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createHasError;
        var getErrorKeys = function getErrorKeys(name, type) {
            switch (type) {
                case 'Field':
                    return [name, name + "._error"];
                case 'FieldArray':
                    return [name + "._error"];
                default:
                    throw new Error('Unknown field type');
            }
        };
        function createHasError(_ref) {
            var getIn = _ref.getIn;
            return function (field, syncErrors, asyncErrors, submitErrors) {
                if (!syncErrors && !asyncErrors && !submitErrors) {
                    return false;
                }
                var name = getIn(field, 'name');
                var type = getIn(field, 'type');
                return getErrorKeys(name, type).some(function (key) {
                    return getIn(syncErrors, key) || getIn(asyncErrors, key) || getIn(submitErrors, key);
                });
            };
        }
    }),
    "./node_modules/redux-form/es/hasSubmitFailed.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _hasSubmitFailed = __webpack_require__("./node_modules/redux-form/es/selectors/hasSubmitFailed.js");
        var _hasSubmitFailed2 = _interopRequireDefault(_hasSubmitFailed);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _hasSubmitFailed2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/hasSubmitSucceeded.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _hasSubmitSucceeded = __webpack_require__("./node_modules/redux-form/es/selectors/hasSubmitSucceeded.js");
        var _hasSubmitSucceeded2 = _interopRequireDefault(_hasSubmitSucceeded);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _hasSubmitSucceeded2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.updateSyncErrors = exports.updateSyncWarnings = exports.untouch = exports.unregisterField = exports.touch = exports.submit = exports.stopSubmit = exports.stopAsyncValidation = exports.startSubmit = exports.startAsyncValidation = exports.setSubmitSucceeded = exports.setSubmitFailed = exports.resetSection = exports.reset = exports.registerField = exports.initialize = exports.focus = exports.destroy = exports.clearSubmitErrors = exports.clearSubmit = exports.clearFields = exports.clearAsyncError = exports.change = exports.blur = exports.autofill = exports.arrayUnshift = exports.arraySwap = exports.arraySplice = exports.arrayShift = exports.arrayRemoveAll = exports.arrayRemove = exports.arrayPush = exports.arrayPop = exports.arrayMove = exports.arrayInsert = exports.values = exports.reducer = exports.reduxForm = exports.hasSubmitFailed = exports.hasSubmitSucceeded = exports.isSubmitting = exports.isValid = exports.isPristine = exports.isInvalid = exports.isDirty = exports.isAsyncValidating = exports.getFormSubmitErrors = exports.getFormSyncWarnings = exports.getFormAsyncErrors = exports.getFormMeta = exports.getFormSyncErrors = exports.getFormInitialValues = exports.getFormValues = exports.getFormNames = exports.getFormError = exports.formValues = exports.formValueSelector = exports.FieldArray = exports.Fields = exports.Field = exports.formPropTypes = exports.fieldArrayPropTypes = exports.fieldArrayMetaPropTypes = exports.fieldArrayFieldsPropTypes = exports.fieldPropTypes = exports.fieldMetaPropTypes = exports.fieldInputPropTypes = exports.propTypes = exports.SubmissionError = exports.FormSection = exports.FormName = exports.Form = exports.defaultShouldWarn = exports.defaultShouldError = exports.defaultShouldValidate = exports.defaultShouldAsyncValidate = exports.ReduxFormContext = exports.actionTypes = undefined;
        var _actionTypes = __webpack_require__("./node_modules/redux-form/es/actionTypes.js");
        Object.defineProperty(exports, 'actionTypes', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_actionTypes).default;
            }
        });
        var _ReduxFormContext = __webpack_require__("./node_modules/redux-form/es/ReduxFormContext.js");
        Object.defineProperty(exports, 'ReduxFormContext', {
            enumerable: true,
            get: function get() {
                return _ReduxFormContext.ReduxFormContext;
            }
        });
        var _defaultShouldAsyncValidate = __webpack_require__("./node_modules/redux-form/es/defaultShouldAsyncValidate.js");
        Object.defineProperty(exports, 'defaultShouldAsyncValidate', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_defaultShouldAsyncValidate).default;
            }
        });
        var _defaultShouldValidate = __webpack_require__("./node_modules/redux-form/es/defaultShouldValidate.js");
        Object.defineProperty(exports, 'defaultShouldValidate', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_defaultShouldValidate).default;
            }
        });
        var _defaultShouldError = __webpack_require__("./node_modules/redux-form/es/defaultShouldError.js");
        Object.defineProperty(exports, 'defaultShouldError', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_defaultShouldError).default;
            }
        });
        var _defaultShouldWarn = __webpack_require__("./node_modules/redux-form/es/defaultShouldWarn.js");
        Object.defineProperty(exports, 'defaultShouldWarn', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_defaultShouldWarn).default;
            }
        });
        var _Form = __webpack_require__("./node_modules/redux-form/es/Form.js");
        Object.defineProperty(exports, 'Form', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_Form).default;
            }
        });
        var _FormName = __webpack_require__("./node_modules/redux-form/es/FormName.js");
        Object.defineProperty(exports, 'FormName', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_FormName).default;
            }
        });
        var _FormSection = __webpack_require__("./node_modules/redux-form/es/FormSection.js");
        Object.defineProperty(exports, 'FormSection', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_FormSection).default;
            }
        });
        var _SubmissionError = __webpack_require__("./node_modules/redux-form/es/SubmissionError.js");
        Object.defineProperty(exports, 'SubmissionError', {
            enumerable: true,
            get: function get() {
                return _SubmissionError.SubmissionError;
            }
        });
        var _propTypes = __webpack_require__("./node_modules/redux-form/es/propTypes.js");
        Object.defineProperty(exports, 'propTypes', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_propTypes).default;
            }
        });
        Object.defineProperty(exports, 'fieldInputPropTypes', {
            enumerable: true,
            get: function get() {
                return _propTypes.fieldInputPropTypes;
            }
        });
        Object.defineProperty(exports, 'fieldMetaPropTypes', {
            enumerable: true,
            get: function get() {
                return _propTypes.fieldMetaPropTypes;
            }
        });
        Object.defineProperty(exports, 'fieldPropTypes', {
            enumerable: true,
            get: function get() {
                return _propTypes.fieldPropTypes;
            }
        });
        Object.defineProperty(exports, 'fieldArrayFieldsPropTypes', {
            enumerable: true,
            get: function get() {
                return _propTypes.fieldArrayFieldsPropTypes;
            }
        });
        Object.defineProperty(exports, 'fieldArrayMetaPropTypes', {
            enumerable: true,
            get: function get() {
                return _propTypes.fieldArrayMetaPropTypes;
            }
        });
        Object.defineProperty(exports, 'fieldArrayPropTypes', {
            enumerable: true,
            get: function get() {
                return _propTypes.fieldArrayPropTypes;
            }
        });
        Object.defineProperty(exports, 'formPropTypes', {
            enumerable: true,
            get: function get() {
                return _propTypes.formPropTypes;
            }
        });
        var _Field = __webpack_require__("./node_modules/redux-form/es/Field.js");
        Object.defineProperty(exports, 'Field', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_Field).default;
            }
        });
        var _Fields = __webpack_require__("./node_modules/redux-form/es/Fields.js");
        Object.defineProperty(exports, 'Fields', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_Fields).default;
            }
        });
        var _FieldArray = __webpack_require__("./node_modules/redux-form/es/FieldArray.js");
        Object.defineProperty(exports, 'FieldArray', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_FieldArray).default;
            }
        });
        var _formValueSelector = __webpack_require__("./node_modules/redux-form/es/formValueSelector.js");
        Object.defineProperty(exports, 'formValueSelector', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_formValueSelector).default;
            }
        });
        var _formValues = __webpack_require__("./node_modules/redux-form/es/formValues.js");
        Object.defineProperty(exports, 'formValues', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_formValues).default;
            }
        });
        var _getFormError = __webpack_require__("./node_modules/redux-form/es/getFormError.js");
        Object.defineProperty(exports, 'getFormError', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_getFormError).default;
            }
        });
        var _getFormNames = __webpack_require__("./node_modules/redux-form/es/getFormNames.js");
        Object.defineProperty(exports, 'getFormNames', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_getFormNames).default;
            }
        });
        var _getFormValues = __webpack_require__("./node_modules/redux-form/es/getFormValues.js");
        Object.defineProperty(exports, 'getFormValues', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_getFormValues).default;
            }
        });
        var _getFormInitialValues = __webpack_require__("./node_modules/redux-form/es/getFormInitialValues.js");
        Object.defineProperty(exports, 'getFormInitialValues', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_getFormInitialValues).default;
            }
        });
        var _getFormSyncErrors = __webpack_require__("./node_modules/redux-form/es/getFormSyncErrors.js");
        Object.defineProperty(exports, 'getFormSyncErrors', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_getFormSyncErrors).default;
            }
        });
        var _getFormMeta = __webpack_require__("./node_modules/redux-form/es/getFormMeta.js");
        Object.defineProperty(exports, 'getFormMeta', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_getFormMeta).default;
            }
        });
        var _getFormAsyncErrors = __webpack_require__("./node_modules/redux-form/es/getFormAsyncErrors.js");
        Object.defineProperty(exports, 'getFormAsyncErrors', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_getFormAsyncErrors).default;
            }
        });
        var _getFormSyncWarnings = __webpack_require__("./node_modules/redux-form/es/getFormSyncWarnings.js");
        Object.defineProperty(exports, 'getFormSyncWarnings', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_getFormSyncWarnings).default;
            }
        });
        var _getFormSubmitErrors = __webpack_require__("./node_modules/redux-form/es/getFormSubmitErrors.js");
        Object.defineProperty(exports, 'getFormSubmitErrors', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_getFormSubmitErrors).default;
            }
        });
        var _isAsyncValidating = __webpack_require__("./node_modules/redux-form/es/isAsyncValidating.js");
        Object.defineProperty(exports, 'isAsyncValidating', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_isAsyncValidating).default;
            }
        });
        var _isDirty = __webpack_require__("./node_modules/redux-form/es/isDirty.js");
        Object.defineProperty(exports, 'isDirty', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_isDirty).default;
            }
        });
        var _isInvalid = __webpack_require__("./node_modules/redux-form/es/isInvalid.js");
        Object.defineProperty(exports, 'isInvalid', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_isInvalid).default;
            }
        });
        var _isPristine = __webpack_require__("./node_modules/redux-form/es/isPristine.js");
        Object.defineProperty(exports, 'isPristine', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_isPristine).default;
            }
        });
        var _isValid = __webpack_require__("./node_modules/redux-form/es/isValid.js");
        Object.defineProperty(exports, 'isValid', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_isValid).default;
            }
        });
        var _isSubmitting = __webpack_require__("./node_modules/redux-form/es/isSubmitting.js");
        Object.defineProperty(exports, 'isSubmitting', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_isSubmitting).default;
            }
        });
        var _hasSubmitSucceeded = __webpack_require__("./node_modules/redux-form/es/hasSubmitSucceeded.js");
        Object.defineProperty(exports, 'hasSubmitSucceeded', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_hasSubmitSucceeded).default;
            }
        });
        var _hasSubmitFailed = __webpack_require__("./node_modules/redux-form/es/hasSubmitFailed.js");
        Object.defineProperty(exports, 'hasSubmitFailed', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_hasSubmitFailed).default;
            }
        });
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/reduxForm.js");
        Object.defineProperty(exports, 'reduxForm', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_reduxForm).default;
            }
        });
        var _reducer = __webpack_require__("./node_modules/redux-form/es/reducer.js");
        Object.defineProperty(exports, 'reducer', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_reducer).default;
            }
        });
        var _values = __webpack_require__("./node_modules/redux-form/es/values.js");
        Object.defineProperty(exports, 'values', {
            enumerable: true,
            get: function get() {
                return _interopRequireDefault(_values).default;
            }
        });
        var _actions = __webpack_require__("./node_modules/redux-form/es/actions.js");
        var _actions2 = _interopRequireDefault(_actions);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var arrayInsert = exports.arrayInsert = _actions2.default.arrayInsert;
        var arrayMove = exports.arrayMove = _actions2.default.arrayMove;
        var arrayPop = exports.arrayPop = _actions2.default.arrayPop;
        var arrayPush = exports.arrayPush = _actions2.default.arrayPush;
        var arrayRemove = exports.arrayRemove = _actions2.default.arrayRemove;
        var arrayRemoveAll = exports.arrayRemoveAll = _actions2.default.arrayRemoveAll;
        var arrayShift = exports.arrayShift = _actions2.default.arrayShift;
        var arraySplice = exports.arraySplice = _actions2.default.arraySplice;
        var arraySwap = exports.arraySwap = _actions2.default.arraySwap;
        var arrayUnshift = exports.arrayUnshift = _actions2.default.arrayUnshift;
        var autofill = exports.autofill = _actions2.default.autofill;
        var blur = exports.blur = _actions2.default.blur;
        var change = exports.change = _actions2.default.change;
        var clearAsyncError = exports.clearAsyncError = _actions2.default.clearAsyncError;
        var clearFields = exports.clearFields = _actions2.default.clearFields;
        var clearSubmit = exports.clearSubmit = _actions2.default.clearSubmit;
        var clearSubmitErrors = exports.clearSubmitErrors = _actions2.default.clearSubmitErrors;
        var destroy = exports.destroy = _actions2.default.destroy;
        var focus = exports.focus = _actions2.default.focus;
        var initialize = exports.initialize = _actions2.default.initialize;
        var registerField = exports.registerField = _actions2.default.registerField;
        var reset = exports.reset = _actions2.default.reset;
        var resetSection = exports.resetSection = _actions2.default.resetSection;
        var setSubmitFailed = exports.setSubmitFailed = _actions2.default.setSubmitFailed;
        var setSubmitSucceeded = exports.setSubmitSucceeded = _actions2.default.setSubmitSucceeded;
        var startAsyncValidation = exports.startAsyncValidation = _actions2.default.startAsyncValidation;
        var startSubmit = exports.startSubmit = _actions2.default.startSubmit;
        var stopAsyncValidation = exports.stopAsyncValidation = _actions2.default.stopAsyncValidation;
        var stopSubmit = exports.stopSubmit = _actions2.default.stopSubmit;
        var submit = exports.submit = _actions2.default.submit;
        var touch = exports.touch = _actions2.default.touch;
        var unregisterField = exports.unregisterField = _actions2.default.unregisterField;
        var untouch = exports.untouch = _actions2.default.untouch;
        var updateSyncWarnings = exports.updateSyncWarnings = _actions2.default.updateSyncWarnings;
        var updateSyncErrors = exports.updateSyncErrors = _actions2.default.updateSyncErrors;
    }),
    "./node_modules/redux-form/es/isAsyncValidating.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isAsyncValidating = __webpack_require__("./node_modules/redux-form/es/selectors/isAsyncValidating.js");
        var _isAsyncValidating2 = _interopRequireDefault(_isAsyncValidating);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _isAsyncValidating2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/isDirty.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isDirty = __webpack_require__("./node_modules/redux-form/es/selectors/isDirty.js");
        var _isDirty2 = _interopRequireDefault(_isDirty);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _isDirty2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/isInvalid.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isInvalid = __webpack_require__("./node_modules/redux-form/es/selectors/isInvalid.js");
        var _isInvalid2 = _interopRequireDefault(_isInvalid);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _isInvalid2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/isPristine.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isPristine = __webpack_require__("./node_modules/redux-form/es/selectors/isPristine.js");
        var _isPristine2 = _interopRequireDefault(_isPristine);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _isPristine2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/isReactNative.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var isReactNative = typeof window !== 'undefined' && window.navigator && window.navigator.product && window.navigator.product === 'ReactNative';
        exports.default = isReactNative;
    }),
    "./node_modules/redux-form/es/isSubmitting.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isSubmitting = __webpack_require__("./node_modules/redux-form/es/selectors/isSubmitting.js");
        var _isSubmitting2 = _interopRequireDefault(_isSubmitting);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _isSubmitting2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/isValid.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isValid = __webpack_require__("./node_modules/redux-form/es/selectors/isValid.js");
        var _isValid2 = _interopRequireDefault(_isValid);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _isValid2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/propTypes.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fieldArrayPropTypes = exports.fieldPropTypes = exports.fieldArrayFieldsPropTypes = exports.fieldArrayMetaPropTypes = exports.fieldMetaPropTypes = exports.fieldInputPropTypes = exports.formPropTypes = undefined;
        var _propTypes = __webpack_require__("./node_modules/prop-types/index.js");
        var _propTypes2 = _interopRequireDefault(_propTypes);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var any = _propTypes2.default.any, bool = _propTypes2.default.bool, func = _propTypes2.default.func, shape = _propTypes2.default.shape, string = _propTypes2.default.string, oneOfType = _propTypes2.default.oneOfType, object = _propTypes2.default.object, number = _propTypes2.default.number;
        var formPropTypes = exports.formPropTypes = {
            anyTouched: bool.isRequired,
            asyncValidating: oneOfType([bool, string]).isRequired,
            dirty: bool.isRequired,
            error: any,
            form: string.isRequired,
            invalid: bool.isRequired,
            initialized: bool.isRequired,
            initialValues: object,
            pristine: bool.isRequired,
            pure: bool.isRequired,
            submitting: bool.isRequired,
            submitAsSideEffect: bool.isRequired,
            submitFailed: bool.isRequired,
            submitSucceeded: bool.isRequired,
            valid: bool.isRequired,
            warning: any,
            array: shape({
                insert: func.isRequired,
                move: func.isRequired,
                pop: func.isRequired,
                push: func.isRequired,
                remove: func.isRequired,
                removeAll: func.isRequired,
                shift: func.isRequired,
                splice: func.isRequired,
                swap: func.isRequired,
                unshift: func.isRequired
            }),
            asyncValidate: func.isRequired,
            autofill: func.isRequired,
            blur: func.isRequired,
            change: func.isRequired,
            clearAsyncError: func.isRequired,
            clearFields: func.isRequired,
            clearSubmitErrors: func.isRequired,
            destroy: func.isRequired,
            dispatch: func.isRequired,
            handleSubmit: func.isRequired,
            initialize: func.isRequired,
            reset: func.isRequired,
            resetSection: func.isRequired,
            touch: func.isRequired,
            submit: func.isRequired,
            untouch: func.isRequired,
            triggerSubmit: bool,
            clearSubmit: func.isRequired
        };
        var fieldInputPropTypes = exports.fieldInputPropTypes = {
            checked: bool,
            name: string.isRequired,
            onBlur: func.isRequired,
            onChange: func.isRequired,
            onDragStart: func.isRequired,
            onDrop: func.isRequired,
            onFocus: func.isRequired,
            value: any
        };
        var fieldMetaPropTypes = exports.fieldMetaPropTypes = {
            active: bool.isRequired,
            asyncValidating: bool.isRequired,
            autofilled: bool.isRequired,
            dirty: bool.isRequired,
            dispatch: func.isRequired,
            error: any,
            form: string.isRequired,
            invalid: bool.isRequired,
            pristine: bool.isRequired,
            submitting: bool.isRequired,
            submitFailed: bool.isRequired,
            touched: bool.isRequired,
            valid: bool.isRequired,
            visited: bool.isRequired,
            warning: string
        };
        var fieldArrayMetaPropTypes = exports.fieldArrayMetaPropTypes = {
            dirty: bool.isRequired,
            error: any,
            form: string.isRequired,
            invalid: bool.isRequired,
            pristine: bool.isRequired,
            submitFailed: bool,
            submitting: bool,
            valid: bool.isRequired,
            warning: string
        };
        var fieldArrayFieldsPropTypes = exports.fieldArrayFieldsPropTypes = {
            name: string.isRequired,
            forEach: func.isRequired,
            get: func.isRequired,
            getAll: func.isRequired,
            insert: func.isRequired,
            length: number.isRequired,
            map: func.isRequired,
            move: func.isRequired,
            pop: func.isRequired,
            push: func.isRequired,
            reduce: func.isRequired,
            remove: func.isRequired,
            removeAll: func.isRequired,
            shift: func.isRequired,
            swap: func.isRequired,
            unshift: func.isRequired
        };
        var fieldPropTypes = exports.fieldPropTypes = {
            input: shape(fieldInputPropTypes).isRequired,
            meta: shape(fieldMetaPropTypes).isRequired
        };
        var fieldArrayPropTypes = exports.fieldArrayPropTypes = {
            fields: shape(fieldArrayFieldsPropTypes).isRequired,
            meta: shape(fieldArrayMetaPropTypes).isRequired
        };
        exports.default = formPropTypes;
    }),
    "./node_modules/redux-form/es/reducer.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createReducer = __webpack_require__("./node_modules/redux-form/es/createReducer.js");
        var _createReducer2 = _interopRequireDefault(_createReducer);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _createReducer2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/reduxForm.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createReduxForm = __webpack_require__("./node_modules/redux-form/es/createReduxForm.js");
        var _createReduxForm2 = _interopRequireDefault(_createReduxForm);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _createReduxForm2.default)(_plain2.default);
    }),
    "./node_modules/redux-form/es/selectors/getFormAsyncErrors.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGetFormAsyncErrors;
        function createGetFormAsyncErrors(_ref) {
            var getIn = _ref.getIn;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return getIn(nonNullGetFormState(state), form + ".asyncErrors");
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/getFormError.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGetFormError;
        function createGetFormError(_ref) {
            var getIn = _ref.getIn;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return getIn(nonNullGetFormState(state), form + ".error");
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/getFormInitialValues.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGetFormInitialValues;
        function createGetFormInitialValues(_ref) {
            var getIn = _ref.getIn;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return getIn(nonNullGetFormState(state), form + ".initial");
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/getFormMeta.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGetFormMeta;
        function createGetFormMeta(_ref) {
            var getIn = _ref.getIn, empty = _ref.empty;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return getIn(nonNullGetFormState(state), form + ".fields") || empty;
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/getFormNames.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGetFormNames;
        function createGetFormNames(_ref) {
            var getIn = _ref.getIn, keys = _ref.keys;
            return function (getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return keys(nonNullGetFormState(state));
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/getFormSubmitErrors.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGetFormSubmitErrors;
        function createGetFormSubmitErrors(_ref) {
            var getIn = _ref.getIn, empty = _ref.empty;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return getIn(nonNullGetFormState(state), form + ".submitErrors") || empty;
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/getFormSyncErrors.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGetFormSyncErrors;
        function createGetFormSyncErrors(_ref) {
            var getIn = _ref.getIn, empty = _ref.empty;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return getIn(nonNullGetFormState(state), form + ".syncErrors") || empty;
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/getFormSyncWarnings.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGetFormSyncWarnings;
        function createGetFormSyncWarnings(_ref) {
            var getIn = _ref.getIn, empty = _ref.empty;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return getIn(nonNullGetFormState(state), form + ".syncWarnings") || empty;
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/getFormValues.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createGetFormValues;
        function createGetFormValues(_ref) {
            var getIn = _ref.getIn;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return getIn(nonNullGetFormState(state), form + ".values");
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/hasSubmitFailed.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createHasSubmitFailed;
        function createHasSubmitFailed(_ref) {
            var getIn = _ref.getIn;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return !!getIn(nonNullGetFormState(state), form + ".submitFailed");
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/hasSubmitSucceeded.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createHasSubmitSucceeded;
        function createHasSubmitSucceeded(_ref) {
            var getIn = _ref.getIn;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return !!getIn(nonNullGetFormState(state), form + ".submitSucceeded");
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/isAsyncValidating.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createIsAsyncValidating;
        function createIsAsyncValidating(_ref) {
            var getIn = _ref.getIn;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return !!getIn(nonNullGetFormState(state), form + ".asyncValidating");
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/isDirty.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createIsDirty;
        var _isPristine = __webpack_require__("./node_modules/redux-form/es/selectors/isPristine.js");
        var _isPristine2 = _interopRequireDefault(_isPristine);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function createIsDirty(structure) {
            return function (form, getFormState) {
                var isPristine = (0, _isPristine2.default)(structure)(form, getFormState);
                return function (state) {
                    for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        fields[_key - 1] = arguments[_key];
                    }
                    return !isPristine.apply(void 0, [state].concat(fields));
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/isInvalid.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createIsInvalid;
        var _isValid = __webpack_require__("./node_modules/redux-form/es/selectors/isValid.js");
        var _isValid2 = _interopRequireDefault(_isValid);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function createIsInvalid(structure) {
            return function (form, getFormState) {
                var isValid = (0, _isValid2.default)(structure)(form, getFormState);
                return function (state) {
                    return !isValid(state);
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/isPristine.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createIsPristine;
        function createIsPristine(_ref) {
            var deepEqual = _ref.deepEqual, empty = _ref.empty, getIn = _ref.getIn;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    var formState = nonNullGetFormState(state);
                    for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        fields[_key - 1] = arguments[_key];
                    }
                    if (fields && fields.length) {
                        return fields.every(function (field) {
                            var fieldInitial = getIn(formState, form + ".initial." + field);
                            var fieldValue = getIn(formState, form + ".values." + field);
                            return deepEqual(fieldInitial, fieldValue);
                        });
                    }
                    var initial = getIn(formState, form + ".initial") || empty;
                    var values = getIn(formState, form + ".values") || initial;
                    return deepEqual(initial, values);
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/isSubmitting.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createIsSubmitting;
        function createIsSubmitting(_ref) {
            var getIn = _ref.getIn;
            return function (form, getFormState) {
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    return !!getIn(nonNullGetFormState(state), form + ".submitting");
                };
            };
        }
    }),
    "./node_modules/redux-form/es/selectors/isValid.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = createIsValid;
        var _hasError = __webpack_require__("./node_modules/redux-form/es/hasError.js");
        var _hasError2 = _interopRequireDefault(_hasError);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function createIsValid(structure) {
            var getIn = structure.getIn, keys = structure.keys;
            var hasError = (0, _hasError2.default)(structure);
            return function (form, getFormState, ignoreSubmitErrors) {
                if (ignoreSubmitErrors === void 0) {
                    ignoreSubmitErrors = false;
                }
                return function (state) {
                    var nonNullGetFormState = getFormState || function (state) {
                        return getIn(state, 'form');
                    };
                    var formState = nonNullGetFormState(state);
                    var syncError = getIn(formState, form + ".syncError");
                    if (syncError) {
                        return false;
                    }
                    if (!ignoreSubmitErrors) {
                        var error = getIn(formState, form + ".error");
                        if (error) {
                            return false;
                        }
                    }
                    var syncErrors = getIn(formState, form + ".syncErrors");
                    var asyncErrors = getIn(formState, form + ".asyncErrors");
                    var submitErrors = ignoreSubmitErrors ? undefined : getIn(formState, form + ".submitErrors");
                    if (!syncErrors && !asyncErrors && !submitErrors) {
                        return true;
                    }
                    var registeredFields = getIn(formState, form + ".registeredFields");
                    if (!registeredFields) {
                        return true;
                    }
                    return !keys(registeredFields).filter(function (name) {
                        return getIn(registeredFields, "['" + name + "'].count") > 0;
                    }).some(function (name) {
                        return hasError(getIn(registeredFields, "['" + name + "']"), syncErrors, asyncErrors, submitErrors);
                    });
                };
            };
        }
    }),
    "./node_modules/redux-form/es/structure/plain/deepEqual.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isNil2 = __webpack_require__("./node_modules/lodash/isNil.js");
        var _isNil3 = _interopRequireDefault(_isNil2);
        var _isEqualWith2 = __webpack_require__("./node_modules/lodash/isEqualWith.js");
        var _isEqualWith3 = _interopRequireDefault(_isEqualWith2);
        var _react = __webpack_require__("./node_modules/react/index.js");
        var _react2 = _interopRequireDefault(_react);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var isEmpty = function isEmpty(obj) {
            return (0, _isNil3.default)(obj) || obj === '' || isNaN(obj);
        };
        var customizer = function customizer(obj, other) {
            if (obj === other)
                return true;
            if (!obj && !other) {
                return isEmpty(obj) === isEmpty(other);
            }
            if (obj && other && obj._error !== other._error)
                return false;
            if (obj && other && obj._warning !== other._warning)
                return false;
            if (_react2.default.isValidElement(obj) || _react2.default.isValidElement(other))
                return false;
        };
        var deepEqual = function deepEqual(a, b) {
            return (0, _isEqualWith3.default)(a, b, customizer);
        };
        exports.default = deepEqual;
    }),
    "./node_modules/redux-form/es/structure/plain/deleteIn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends3 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends4 = _interopRequireDefault(_extends3);
        var _toPath2 = __webpack_require__("./node_modules/lodash/toPath.js");
        var _toPath3 = _interopRequireDefault(_toPath2);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function deleteInWithPath(state, first) {
            if (state === undefined || state === null || first === undefined || first === null) {
                return state;
            }
            for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                rest[_key - 2] = arguments[_key];
            }
            if (rest.length) {
                if (Array.isArray(state)) {
                    if (isNaN(first)) {
                        throw new Error("Must access array elements with a number, not \"" + String(first) + "\".");
                    }
                    var firstIndex = Number(first);
                    if (firstIndex < state.length) {
                        var result = deleteInWithPath.apply(void 0, [state && state[firstIndex]].concat(rest));
                        if (result !== state[firstIndex]) {
                            var copy = [].concat(state);
                            copy[firstIndex] = result;
                            return copy;
                        }
                    }
                    return state;
                }
                if (first in state) {
                    var _extends2;
                    var _result = deleteInWithPath.apply(void 0, [state && state[first]].concat(rest));
                    return state[first] === _result ? state : (0, _extends4.default)({}, state, (_extends2 = {}, _extends2[first] = _result, _extends2));
                }
                return state;
            }
            if (Array.isArray(state)) {
                if (isNaN(first)) {
                    throw new Error("Cannot delete non-numerical index from an array. Given: \"" + String(first));
                }
                var _firstIndex = Number(first);
                if (_firstIndex < state.length) {
                    var _copy = [].concat(state);
                    _copy.splice(_firstIndex, 1);
                    return _copy;
                }
                return state;
            }
            if (first in state) {
                var _copy2 = (0, _extends4.default)({}, state);
                delete _copy2[first];
                return _copy2;
            }
            return state;
        }
        var deleteIn = function deleteIn(state, field) {
            return deleteInWithPath.apply(void 0, [state].concat((0, _toPath3.default)(field)));
        };
        exports.default = deleteIn;
    }),
    "./node_modules/redux-form/es/structure/plain/getIn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _toPath2 = __webpack_require__("./node_modules/lodash/toPath.js");
        var _toPath3 = _interopRequireDefault(_toPath2);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var getIn = function getIn(state, field) {
            if (!state) {
                return state;
            }
            var path = (0, _toPath3.default)(field);
            var length = path.length;
            if (!length) {
                return undefined;
            }
            var result = state;
            for (var i = 0; i < length && result; ++i) {
                result = result[path[i]];
            }
            return result;
        };
        exports.default = getIn;
    }),
    "./node_modules/redux-form/es/structure/plain/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _splice = __webpack_require__("./node_modules/redux-form/es/structure/plain/splice.js");
        var _splice2 = _interopRequireDefault(_splice);
        var _getIn = __webpack_require__("./node_modules/redux-form/es/structure/plain/getIn.js");
        var _getIn2 = _interopRequireDefault(_getIn);
        var _setIn = __webpack_require__("./node_modules/redux-form/es/structure/plain/setIn.js");
        var _setIn2 = _interopRequireDefault(_setIn);
        var _deepEqual = __webpack_require__("./node_modules/redux-form/es/structure/plain/deepEqual.js");
        var _deepEqual2 = _interopRequireDefault(_deepEqual);
        var _deleteIn = __webpack_require__("./node_modules/redux-form/es/structure/plain/deleteIn.js");
        var _deleteIn2 = _interopRequireDefault(_deleteIn);
        var _keys = __webpack_require__("./node_modules/redux-form/es/structure/plain/keys.js");
        var _keys2 = _interopRequireDefault(_keys);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var structure = {
            allowsArrayErrors: true,
            empty: {},
            emptyList: [],
            getIn: _getIn2.default,
            setIn: _setIn2.default,
            deepEqual: _deepEqual2.default,
            deleteIn: _deleteIn2.default,
            forEach: function forEach(items, callback) {
                return items.forEach(callback);
            },
            fromJS: function fromJS(value) {
                return value;
            },
            keys: _keys2.default,
            size: function size(array) {
                return array ? array.length : 0;
            },
            some: function some(items, callback) {
                return items.some(callback);
            },
            splice: _splice2.default,
            equals: function equals(a, b) {
                return b.every(function (val) {
                    return ~a.indexOf(val);
                });
            },
            orderChanged: function orderChanged(a, b) {
                return b.some(function (val, index) {
                    return val !== a[index];
                });
            },
            toJS: function toJS(value) {
                return value;
            }
        };
        exports.default = structure;
    }),
    "./node_modules/redux-form/es/structure/plain/keys.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function keys(value) {
            if (!value) {
                return [];
            }
            if (Array.isArray(value)) {
                return value.map(function (i) {
                    return i.name;
                });
            }
            return Object.keys(value);
        }
        exports.default = keys;
    }),
    "./node_modules/redux-form/es/structure/plain/setIn.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends3 = __webpack_require__("./node_modules/@babel/runtime/helpers/extends.js");
        var _extends4 = _interopRequireDefault(_extends3);
        var _toPath2 = __webpack_require__("./node_modules/lodash/toPath.js");
        var _toPath3 = _interopRequireDefault(_toPath2);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var setInWithPath = function setInWithPath(state, value, path, pathIndex) {
            var _extends2;
            if (pathIndex >= path.length) {
                return value;
            }
            var first = path[pathIndex];
            var firstState = state && (Array.isArray(state) ? state[Number(first)] : state[first]);
            var next = setInWithPath(firstState, value, path, pathIndex + 1);
            if (!state) {
                if (isNaN(first)) {
                    var _ref;
                    return _ref = {}, _ref[first] = next, _ref;
                }
                var initialized = [];
                initialized[parseInt(first, 10)] = next;
                return initialized;
            }
            if (Array.isArray(state)) {
                var copy = [].concat(state);
                copy[parseInt(first, 10)] = next;
                return copy;
            }
            return (0, _extends4.default)({}, state, (_extends2 = {}, _extends2[first] = next, _extends2));
        };
        var setIn = function setIn(state, field, value) {
            return setInWithPath(state, value, (0, _toPath3.default)(field), 0);
        };
        exports.default = setIn;
    }),
    "./node_modules/redux-form/es/structure/plain/splice.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var splice = function splice(array, index, removeNum, value) {
            array = array || [];
            if (index < array.length) {
                if (value === undefined && !removeNum) {
                    var _copy2 = [].concat(array);
                    _copy2.splice(index, 0, true);
                    _copy2[index] = undefined;
                    return _copy2;
                }
                if (value != null) {
                    var _copy3 = [].concat(array);
                    _copy3.splice(index, removeNum, value);
                    return _copy3;
                }
                var _copy = [].concat(array);
                _copy.splice(index, removeNum);
                return _copy;
            }
            if (removeNum) {
                return array;
            }
            var copy = [].concat(array);
            copy[index] = value;
            return copy;
        };
        exports.default = splice;
    }),
    "./node_modules/redux-form/es/util/eventConsts.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var dataKey = exports.dataKey = 'text';
    }),
    "./node_modules/redux-form/es/util/getDisplayName.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var getDisplayName = function getDisplayName(Comp) {
            return Comp.displayName || Comp.name || 'Component';
        };
        exports.default = getDisplayName;
    }),
    "./node_modules/redux-form/es/util/isHotReloading.js": (function (module, exports, __webpack_require__) {
        "use strict";
        (function (module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var isHotReloading = function isHotReloading() {
                var castModule = module;
                return !!(typeof castModule !== 'undefined' && castModule.hot && typeof castModule.hot.status === 'function' && castModule.hot.status() === 'apply');
            };
            exports.default = isHotReloading;
        }.call(this, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)));
    }),
    "./node_modules/redux-form/es/util/prefixName.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var formatName = function formatName(_ref, name) {
            var sectionPrefix = _ref._reduxForm.sectionPrefix;
            return sectionPrefix ? sectionPrefix + "." + name : name;
        };
        exports.default = formatName;
    }),
    "./node_modules/redux-form/es/util/shallowCompare.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _isEqualWith2 = __webpack_require__("./node_modules/lodash/isEqualWith.js");
        var _isEqualWith3 = _interopRequireDefault(_isEqualWith2);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var customizer = function customizer(objectValue, otherValue, indexOrkey, object, other, stack) {
            if (stack) {
                return objectValue === otherValue;
            }
        };
        var shallowCompare = function shallowCompare(instance, nextProps, nextState) {
            var propsEqual = (0, _isEqualWith3.default)(instance.props, nextProps, customizer);
            var stateEqual = (0, _isEqualWith3.default)(instance.state, nextState, customizer);
            return !propsEqual || !stateEqual;
        };
        exports.default = shallowCompare;
    }),
    "./node_modules/redux-form/es/util/validateComponentProp.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _reactIs = __webpack_require__("./node_modules/react-is/index.js");
        var validateComponentProp = function validateComponentProp(props, propName, componentName) {
            if (!(0, _reactIs.isValidElementType)(props[propName])) {
                return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`.');
            }
            return null;
        };
        exports.default = validateComponentProp;
    }),
    "./node_modules/redux-form/es/values.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createValues = __webpack_require__("./node_modules/redux-form/es/createValues.js");
        var _createValues2 = _interopRequireDefault(_createValues);
        var _plain = __webpack_require__("./node_modules/redux-form/es/structure/plain/index.js");
        var _plain2 = _interopRequireDefault(_plain);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = (0, _createValues2.default)(_plain2.default);
    }),
    "./node_modules/redux/es/redux.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createStore = exports.compose = exports.combineReducers = exports.bindActionCreators = exports.applyMiddleware = exports.__DO_NOT_USE__ActionTypes = undefined;
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var _symbolObservable = __webpack_require__("./node_modules/redux/node_modules/symbol-observable/es/index.js");
        var _symbolObservable2 = _interopRequireDefault(_symbolObservable);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var randomString = function randomString() {
            return Math.random().toString(36).substring(7).split('').join('.');
        };
        var ActionTypes = {
            INIT: "@@redux/INIT" + randomString(),
            REPLACE: "@@redux/REPLACE" + randomString(),
            PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
                return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
            }
        };
        function isPlainObject(obj) {
            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null)
                return false;
            var proto = obj;
            while (Object.getPrototypeOf(proto) !== null) {
                proto = Object.getPrototypeOf(proto);
            }
            return Object.getPrototypeOf(obj) === proto;
        }
        function createStore(reducer, preloadedState, enhancer) {
            var _ref2;
            if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
                throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');
            }
            if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
                enhancer = preloadedState;
                preloadedState = undefined;
            }
            if (typeof enhancer !== 'undefined') {
                if (typeof enhancer !== 'function') {
                    throw new Error('Expected the enhancer to be a function.');
                }
                return enhancer(createStore)(reducer, preloadedState);
            }
            if (typeof reducer !== 'function') {
                throw new Error('Expected the reducer to be a function.');
            }
            var currentReducer = reducer;
            var currentState = preloadedState;
            var currentListeners = [];
            var nextListeners = currentListeners;
            var isDispatching = false;
            function ensureCanMutateNextListeners() {
                if (nextListeners === currentListeners) {
                    nextListeners = currentListeners.slice();
                }
            }
            function getState() {
                if (isDispatching) {
                    throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
                }
                return currentState;
            }
            function subscribe(listener) {
                if (typeof listener !== 'function') {
                    throw new Error('Expected the listener to be a function.');
                }
                if (isDispatching) {
                    throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
                }
                var isSubscribed = true;
                ensureCanMutateNextListeners();
                nextListeners.push(listener);
                return function unsubscribe() {
                    if (!isSubscribed) {
                        return;
                    }
                    if (isDispatching) {
                        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
                    }
                    isSubscribed = false;
                    ensureCanMutateNextListeners();
                    var index = nextListeners.indexOf(listener);
                    nextListeners.splice(index, 1);
                    currentListeners = null;
                };
            }
            function dispatch(action) {
                if (!isPlainObject(action)) {
                    throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
                }
                if (typeof action.type === 'undefined') {
                    throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
                }
                if (isDispatching) {
                    throw new Error('Reducers may not dispatch actions.');
                }
                try {
                    isDispatching = true;
                    currentState = currentReducer(currentState, action);
                }
                finally {
                    isDispatching = false;
                }
                var listeners = currentListeners = nextListeners;
                for (var i = 0; i < listeners.length; i++) {
                    var listener = listeners[i];
                    listener();
                }
                return action;
            }
            function replaceReducer(nextReducer) {
                if (typeof nextReducer !== 'function') {
                    throw new Error('Expected the nextReducer to be a function.');
                }
                currentReducer = nextReducer;
                dispatch({
                    type: ActionTypes.REPLACE
                });
            }
            function observable() {
                var _ref;
                var outerSubscribe = subscribe;
                return _ref = {
                    subscribe: function subscribe(observer) {
                        if ((typeof observer === 'undefined' ? 'undefined' : _typeof(observer)) !== 'object' || observer === null) {
                            throw new TypeError('Expected the observer to be an object.');
                        }
                        function observeState() {
                            if (observer.next) {
                                observer.next(getState());
                            }
                        }
                        observeState();
                        var unsubscribe = outerSubscribe(observeState);
                        return {
                            unsubscribe: unsubscribe
                        };
                    }
                }, _ref[_symbolObservable2.default] = function () {
                    return this;
                }, _ref;
            }
            dispatch({
                type: ActionTypes.INIT
            });
            return _ref2 = {
                dispatch: dispatch,
                subscribe: subscribe,
                getState: getState,
                replaceReducer: replaceReducer
            }, _ref2[_symbolObservable2.default] = observable, _ref2;
        }
        function warning(message) {
            if (typeof console !== 'undefined' && typeof console.error === 'function') {
                console.error(message);
            }
            try {
                throw new Error(message);
            }
            catch (e) { }
        }
        function getUndefinedStateErrorMessage(key, action) {
            var actionType = action && action.type;
            var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
            return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
        }
        function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
            var reducerKeys = Object.keys(reducers);
            var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
            if (reducerKeys.length === 0) {
                return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
            }
            if (!isPlainObject(inputState)) {
                return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
            }
            var unexpectedKeys = Object.keys(inputState).filter(function (key) {
                return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
            });
            unexpectedKeys.forEach(function (key) {
                unexpectedKeyCache[key] = true;
            });
            if (action && action.type === ActionTypes.REPLACE)
                return;
            if (unexpectedKeys.length > 0) {
                return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
            }
        }
        function assertReducerShape(reducers) {
            Object.keys(reducers).forEach(function (key) {
                var reducer = reducers[key];
                var initialState = reducer(undefined, {
                    type: ActionTypes.INIT
                });
                if (typeof initialState === 'undefined') {
                    throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
                }
                if (typeof reducer(undefined, {
                    type: ActionTypes.PROBE_UNKNOWN_ACTION()
                }) === 'undefined') {
                    throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
                }
            });
        }
        function combineReducers(reducers) {
            var reducerKeys = Object.keys(reducers);
            var finalReducers = {};
            for (var i = 0; i < reducerKeys.length; i++) {
                var key = reducerKeys[i];
                if (true) {
                    if (typeof reducers[key] === 'undefined') {
                        warning("No reducer provided for key \"" + key + "\"");
                    }
                }
                if (typeof reducers[key] === 'function') {
                    finalReducers[key] = reducers[key];
                }
            }
            var finalReducerKeys = Object.keys(finalReducers);
            var unexpectedKeyCache;
            if (true) {
                unexpectedKeyCache = {};
            }
            var shapeAssertionError;
            try {
                assertReducerShape(finalReducers);
            }
            catch (e) {
                shapeAssertionError = e;
            }
            return function combination(state, action) {
                if (state === void 0) {
                    state = {};
                }
                if (shapeAssertionError) {
                    throw shapeAssertionError;
                }
                if (true) {
                    var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
                    if (warningMessage) {
                        warning(warningMessage);
                    }
                }
                var hasChanged = false;
                var nextState = {};
                for (var _i = 0; _i < finalReducerKeys.length; _i++) {
                    var _key = finalReducerKeys[_i];
                    var reducer = finalReducers[_key];
                    var previousStateForKey = state[_key];
                    var nextStateForKey = reducer(previousStateForKey, action);
                    if (typeof nextStateForKey === 'undefined') {
                        var errorMessage = getUndefinedStateErrorMessage(_key, action);
                        throw new Error(errorMessage);
                    }
                    nextState[_key] = nextStateForKey;
                    hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
                }
                hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
                return hasChanged ? nextState : state;
            };
        }
        function bindActionCreator(actionCreator, dispatch) {
            return function () {
                return dispatch(actionCreator.apply(this, arguments));
            };
        }
        function bindActionCreators(actionCreators, dispatch) {
            if (typeof actionCreators === 'function') {
                return bindActionCreator(actionCreators, dispatch);
            }
            if ((typeof actionCreators === 'undefined' ? 'undefined' : _typeof(actionCreators)) !== 'object' || actionCreators === null) {
                throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators === 'undefined' ? 'undefined' : _typeof(actionCreators)) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
            }
            var boundActionCreators = {};
            for (var key in actionCreators) {
                var actionCreator = actionCreators[key];
                if (typeof actionCreator === 'function') {
                    boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
                }
            }
            return boundActionCreators;
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            }
            else {
                obj[key] = value;
            }
            return obj;
        }
        function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                keys.push.apply(keys, Object.getOwnPropertySymbols(object));
            }
            if (enumerableOnly)
                keys = keys.filter(function (sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
            return keys;
        }
        function _objectSpread2(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                    ownKeys(source, true).forEach(function (key) {
                        _defineProperty(target, key, source[key]);
                    });
                }
                else if (Object.getOwnPropertyDescriptors) {
                    Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                }
                else {
                    ownKeys(source).forEach(function (key) {
                        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                    });
                }
            }
            return target;
        }
        function compose() {
            for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
                funcs[_key] = arguments[_key];
            }
            if (funcs.length === 0) {
                return function (arg) {
                    return arg;
                };
            }
            if (funcs.length === 1) {
                return funcs[0];
            }
            return funcs.reduce(function (a, b) {
                return function () {
                    return a(b.apply(void 0, arguments));
                };
            });
        }
        function applyMiddleware() {
            for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
                middlewares[_key] = arguments[_key];
            }
            return function (createStore) {
                return function () {
                    var store = createStore.apply(void 0, arguments);
                    var _dispatch = function dispatch() {
                        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
                    };
                    var middlewareAPI = {
                        getState: store.getState,
                        dispatch: function dispatch() {
                            return _dispatch.apply(void 0, arguments);
                        }
                    };
                    var chain = middlewares.map(function (middleware) {
                        return middleware(middlewareAPI);
                    });
                    _dispatch = compose.apply(void 0, chain)(store.dispatch);
                    return _objectSpread2({}, store, {
                        dispatch: _dispatch
                    });
                };
            };
        }
        function isCrushed() { }
        if (true && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
            warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
        }
        exports.__DO_NOT_USE__ActionTypes = ActionTypes;
        exports.applyMiddleware = applyMiddleware;
        exports.bindActionCreators = bindActionCreators;
        exports.combineReducers = combineReducers;
        exports.compose = compose;
        exports.createStore = createStore;
    }),
    "./node_modules/redux/node_modules/symbol-observable/es/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        (function (global, module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _ponyfill = __webpack_require__("./node_modules/redux/node_modules/symbol-observable/es/ponyfill.js");
            var _ponyfill2 = _interopRequireDefault(_ponyfill);
            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
            var root;
            if (typeof self !== 'undefined') {
                root = self;
            }
            else if (typeof window !== 'undefined') {
                root = window;
            }
            else if (typeof global !== 'undefined') {
                root = global;
            }
            else if (true) {
                root = module;
            }
            else { }
            var result = (0, _ponyfill2.default)(root);
            exports.default = result;
        }.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/webpack/buildin/module.js")(module)));
    }),
    "./node_modules/redux/node_modules/symbol-observable/es/ponyfill.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = symbolObservablePonyfill;
        function symbolObservablePonyfill(root) {
            var result;
            var _Symbol = root.Symbol;
            if (typeof _Symbol === 'function') {
                if (_Symbol.observable) {
                    result = _Symbol.observable;
                }
                else {
                    result = _Symbol('observable');
                    _Symbol.observable = result;
                }
            }
            else {
                result = '@@observable';
            }
            return result;
        }
        ;
    }),
    "./node_modules/resolve-pathname/esm/resolve-pathname.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function isAbsolute(pathname) {
            return pathname.charAt(0) === '/';
        }
        function spliceOne(list, index) {
            for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
                list[i] = list[k];
            }
            list.pop();
        }
        function resolvePathname(to, from) {
            if (from === undefined)
                from = '';
            var toParts = to && to.split('/') || [];
            var fromParts = from && from.split('/') || [];
            var isToAbs = to && isAbsolute(to);
            var isFromAbs = from && isAbsolute(from);
            var mustEndAbs = isToAbs || isFromAbs;
            if (to && isAbsolute(to)) {
                fromParts = toParts;
            }
            else if (toParts.length) {
                fromParts.pop();
                fromParts = fromParts.concat(toParts);
            }
            if (!fromParts.length)
                return '/';
            var hasTrailingSlash;
            if (fromParts.length) {
                var last = fromParts[fromParts.length - 1];
                hasTrailingSlash = last === '.' || last === '..' || last === '';
            }
            else {
                hasTrailingSlash = false;
            }
            var up = 0;
            for (var i = fromParts.length; i >= 0; i--) {
                var part = fromParts[i];
                if (part === '.') {
                    spliceOne(fromParts, i);
                }
                else if (part === '..') {
                    spliceOne(fromParts, i);
                    up++;
                }
                else if (up) {
                    spliceOne(fromParts, i);
                    up--;
                }
            }
            if (!mustEndAbs)
                for (; up--; up) {
                    fromParts.unshift('..');
                }
            if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0])))
                fromParts.unshift('');
            var result = fromParts.join('/');
            if (hasTrailingSlash && result.substr(-1) !== '/')
                result += '/';
            return result;
        }
        exports.default = resolvePathname;
    }),
    "./node_modules/scheduler/cjs/scheduler-tracing.development.js": (function (module, exports, __webpack_require__) {
        "use strict";
        if (true) {
            (function () {
                'use strict';
                var DEFAULT_THREAD_ID = 0;
                var interactionIDCounter = 0;
                var threadIDCounter = 0;
                exports.__interactionsRef = null;
                exports.__subscriberRef = null;
                {
                    exports.__interactionsRef = {
                        current: new Set()
                    };
                    exports.__subscriberRef = {
                        current: null
                    };
                }
                function unstable_clear(callback) {
                    var prevInteractions = exports.__interactionsRef.current;
                    exports.__interactionsRef.current = new Set();
                    try {
                        return callback();
                    }
                    finally {
                        exports.__interactionsRef.current = prevInteractions;
                    }
                }
                function unstable_getCurrent() {
                    {
                        return exports.__interactionsRef.current;
                    }
                }
                function unstable_getThreadID() {
                    return ++threadIDCounter;
                }
                function unstable_trace(name, timestamp, callback) {
                    var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
                    var interaction = {
                        __count: 1,
                        id: interactionIDCounter++,
                        name: name,
                        timestamp: timestamp
                    };
                    var prevInteractions = exports.__interactionsRef.current;
                    var interactions = new Set(prevInteractions);
                    interactions.add(interaction);
                    exports.__interactionsRef.current = interactions;
                    var subscriber = exports.__subscriberRef.current;
                    var returnValue;
                    try {
                        if (subscriber !== null) {
                            subscriber.onInteractionTraced(interaction);
                        }
                    }
                    finally {
                        try {
                            if (subscriber !== null) {
                                subscriber.onWorkStarted(interactions, threadID);
                            }
                        }
                        finally {
                            try {
                                returnValue = callback();
                            }
                            finally {
                                exports.__interactionsRef.current = prevInteractions;
                                try {
                                    if (subscriber !== null) {
                                        subscriber.onWorkStopped(interactions, threadID);
                                    }
                                }
                                finally {
                                    interaction.__count--;
                                    if (subscriber !== null && interaction.__count === 0) {
                                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                                    }
                                }
                            }
                        }
                    }
                    return returnValue;
                }
                function unstable_wrap(callback) {
                    var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
                    var wrappedInteractions = exports.__interactionsRef.current;
                    var subscriber = exports.__subscriberRef.current;
                    if (subscriber !== null) {
                        subscriber.onWorkScheduled(wrappedInteractions, threadID);
                    }
                    wrappedInteractions.forEach(function (interaction) {
                        interaction.__count++;
                    });
                    var hasRun = false;
                    function wrapped() {
                        var prevInteractions = exports.__interactionsRef.current;
                        exports.__interactionsRef.current = wrappedInteractions;
                        subscriber = exports.__subscriberRef.current;
                        try {
                            var returnValue;
                            try {
                                if (subscriber !== null) {
                                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                                }
                            }
                            finally {
                                try {
                                    returnValue = callback.apply(undefined, arguments);
                                }
                                finally {
                                    exports.__interactionsRef.current = prevInteractions;
                                    if (subscriber !== null) {
                                        subscriber.onWorkStopped(wrappedInteractions, threadID);
                                    }
                                }
                            }
                            return returnValue;
                        }
                        finally {
                            if (!hasRun) {
                                hasRun = true;
                                wrappedInteractions.forEach(function (interaction) {
                                    interaction.__count--;
                                    if (subscriber !== null && interaction.__count === 0) {
                                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                                    }
                                });
                            }
                        }
                    }
                    wrapped.cancel = function cancel() {
                        subscriber = exports.__subscriberRef.current;
                        try {
                            if (subscriber !== null) {
                                subscriber.onWorkCanceled(wrappedInteractions, threadID);
                            }
                        }
                        finally {
                            wrappedInteractions.forEach(function (interaction) {
                                interaction.__count--;
                                if (subscriber && interaction.__count === 0) {
                                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                                }
                            });
                        }
                    };
                    return wrapped;
                }
                var subscribers = null;
                {
                    subscribers = new Set();
                }
                function unstable_subscribe(subscriber) {
                    {
                        subscribers.add(subscriber);
                        if (subscribers.size === 1) {
                            exports.__subscriberRef.current = {
                                onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                                onInteractionTraced: onInteractionTraced,
                                onWorkCanceled: onWorkCanceled,
                                onWorkScheduled: onWorkScheduled,
                                onWorkStarted: onWorkStarted,
                                onWorkStopped: onWorkStopped
                            };
                        }
                    }
                }
                function unstable_unsubscribe(subscriber) {
                    {
                        subscribers.delete(subscriber);
                        if (subscribers.size === 0) {
                            exports.__subscriberRef.current = null;
                        }
                    }
                }
                function onInteractionTraced(interaction) {
                    var didCatchError = false;
                    var caughtError = null;
                    subscribers.forEach(function (subscriber) {
                        try {
                            subscriber.onInteractionTraced(interaction);
                        }
                        catch (error) {
                            if (!didCatchError) {
                                didCatchError = true;
                                caughtError = error;
                            }
                        }
                    });
                    if (didCatchError) {
                        throw caughtError;
                    }
                }
                function onInteractionScheduledWorkCompleted(interaction) {
                    var didCatchError = false;
                    var caughtError = null;
                    subscribers.forEach(function (subscriber) {
                        try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        }
                        catch (error) {
                            if (!didCatchError) {
                                didCatchError = true;
                                caughtError = error;
                            }
                        }
                    });
                    if (didCatchError) {
                        throw caughtError;
                    }
                }
                function onWorkScheduled(interactions, threadID) {
                    var didCatchError = false;
                    var caughtError = null;
                    subscribers.forEach(function (subscriber) {
                        try {
                            subscriber.onWorkScheduled(interactions, threadID);
                        }
                        catch (error) {
                            if (!didCatchError) {
                                didCatchError = true;
                                caughtError = error;
                            }
                        }
                    });
                    if (didCatchError) {
                        throw caughtError;
                    }
                }
                function onWorkStarted(interactions, threadID) {
                    var didCatchError = false;
                    var caughtError = null;
                    subscribers.forEach(function (subscriber) {
                        try {
                            subscriber.onWorkStarted(interactions, threadID);
                        }
                        catch (error) {
                            if (!didCatchError) {
                                didCatchError = true;
                                caughtError = error;
                            }
                        }
                    });
                    if (didCatchError) {
                        throw caughtError;
                    }
                }
                function onWorkStopped(interactions, threadID) {
                    var didCatchError = false;
                    var caughtError = null;
                    subscribers.forEach(function (subscriber) {
                        try {
                            subscriber.onWorkStopped(interactions, threadID);
                        }
                        catch (error) {
                            if (!didCatchError) {
                                didCatchError = true;
                                caughtError = error;
                            }
                        }
                    });
                    if (didCatchError) {
                        throw caughtError;
                    }
                }
                function onWorkCanceled(interactions, threadID) {
                    var didCatchError = false;
                    var caughtError = null;
                    subscribers.forEach(function (subscriber) {
                        try {
                            subscriber.onWorkCanceled(interactions, threadID);
                        }
                        catch (error) {
                            if (!didCatchError) {
                                didCatchError = true;
                                caughtError = error;
                            }
                        }
                    });
                    if (didCatchError) {
                        throw caughtError;
                    }
                }
                exports.unstable_clear = unstable_clear;
                exports.unstable_getCurrent = unstable_getCurrent;
                exports.unstable_getThreadID = unstable_getThreadID;
                exports.unstable_subscribe = unstable_subscribe;
                exports.unstable_trace = unstable_trace;
                exports.unstable_unsubscribe = unstable_unsubscribe;
                exports.unstable_wrap = unstable_wrap;
            })();
        }
    }),
    "./node_modules/scheduler/cjs/scheduler.development.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        if (true) {
            (function () {
                'use strict';
                var enableSchedulerDebugging = false;
                var enableProfiling = true;
                var _requestHostCallback;
                var requestHostTimeout;
                var cancelHostTimeout;
                var shouldYieldToHost;
                var requestPaint;
                if (typeof window === 'undefined' ||
                    typeof MessageChannel !== 'function') {
                    var _callback = null;
                    var _timeoutID = null;
                    var _flushCallback = function _flushCallback() {
                        if (_callback !== null) {
                            try {
                                var currentTime = exports.unstable_now();
                                var hasRemainingTime = true;
                                _callback(hasRemainingTime, currentTime);
                                _callback = null;
                            }
                            catch (e) {
                                setTimeout(_flushCallback, 0);
                                throw e;
                            }
                        }
                    };
                    var initialTime = Date.now();
                    exports.unstable_now = function () {
                        return Date.now() - initialTime;
                    };
                    _requestHostCallback = function requestHostCallback(cb) {
                        if (_callback !== null) {
                            setTimeout(_requestHostCallback, 0, cb);
                        }
                        else {
                            _callback = cb;
                            setTimeout(_flushCallback, 0);
                        }
                    };
                    requestHostTimeout = function requestHostTimeout(cb, ms) {
                        _timeoutID = setTimeout(cb, ms);
                    };
                    cancelHostTimeout = function cancelHostTimeout() {
                        clearTimeout(_timeoutID);
                    };
                    shouldYieldToHost = function shouldYieldToHost() {
                        return false;
                    };
                    requestPaint = exports.unstable_forceFrameRate = function () { };
                }
                else {
                    var performance = window.performance;
                    var _Date = window.Date;
                    var _setTimeout = window.setTimeout;
                    var _clearTimeout = window.clearTimeout;
                    if (typeof console !== 'undefined') {
                        var requestAnimationFrame = window.requestAnimationFrame;
                        var cancelAnimationFrame = window.cancelAnimationFrame;
                        if (typeof requestAnimationFrame !== 'function') {
                            console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
                        }
                        if (typeof cancelAnimationFrame !== 'function') {
                            console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
                        }
                    }
                    if ((typeof performance === 'undefined' ? 'undefined' : _typeof(performance)) === 'object' && typeof performance.now === 'function') {
                        exports.unstable_now = function () {
                            return performance.now();
                        };
                    }
                    else {
                        var _initialTime = _Date.now();
                        exports.unstable_now = function () {
                            return _Date.now() - _initialTime;
                        };
                    }
                    var isMessageLoopRunning = false;
                    var scheduledHostCallback = null;
                    var taskTimeoutID = -1;
                    var yieldInterval = 5;
                    var deadline = 0;
                    {
                        shouldYieldToHost = function shouldYieldToHost() {
                            return exports.unstable_now() >= deadline;
                        };
                        requestPaint = function requestPaint() { };
                    }
                    exports.unstable_forceFrameRate = function (fps) {
                        if (fps < 0 || fps > 125) {
                            console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
                            return;
                        }
                        if (fps > 0) {
                            yieldInterval = Math.floor(1000 / fps);
                        }
                        else {
                            yieldInterval = 5;
                        }
                    };
                    var performWorkUntilDeadline = function performWorkUntilDeadline() {
                        if (scheduledHostCallback !== null) {
                            var currentTime = exports.unstable_now();
                            deadline = currentTime + yieldInterval;
                            var hasTimeRemaining = true;
                            try {
                                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                                if (!hasMoreWork) {
                                    isMessageLoopRunning = false;
                                    scheduledHostCallback = null;
                                }
                                else {
                                    port.postMessage(null);
                                }
                            }
                            catch (error) {
                                port.postMessage(null);
                                throw error;
                            }
                        }
                        else {
                            isMessageLoopRunning = false;
                        }
                    };
                    var channel = new MessageChannel();
                    var port = channel.port2;
                    channel.port1.onmessage = performWorkUntilDeadline;
                    _requestHostCallback = function _requestHostCallback(callback) {
                        scheduledHostCallback = callback;
                        if (!isMessageLoopRunning) {
                            isMessageLoopRunning = true;
                            port.postMessage(null);
                        }
                    };
                    requestHostTimeout = function requestHostTimeout(callback, ms) {
                        taskTimeoutID = _setTimeout(function () {
                            callback(exports.unstable_now());
                        }, ms);
                    };
                    cancelHostTimeout = function cancelHostTimeout() {
                        _clearTimeout(taskTimeoutID);
                        taskTimeoutID = -1;
                    };
                }
                function push(heap, node) {
                    var index = heap.length;
                    heap.push(node);
                    siftUp(heap, node, index);
                }
                function peek(heap) {
                    var first = heap[0];
                    return first === undefined ? null : first;
                }
                function pop(heap) {
                    var first = heap[0];
                    if (first !== undefined) {
                        var last = heap.pop();
                        if (last !== first) {
                            heap[0] = last;
                            siftDown(heap, last, 0);
                        }
                        return first;
                    }
                    else {
                        return null;
                    }
                }
                function siftUp(heap, node, i) {
                    var index = i;
                    while (true) {
                        var parentIndex = index - 1 >>> 1;
                        var parent = heap[parentIndex];
                        if (parent !== undefined && compare(parent, node) > 0) {
                            heap[parentIndex] = node;
                            heap[index] = parent;
                            index = parentIndex;
                        }
                        else {
                            return;
                        }
                    }
                }
                function siftDown(heap, node, i) {
                    var index = i;
                    var length = heap.length;
                    while (index < length) {
                        var leftIndex = (index + 1) * 2 - 1;
                        var left = heap[leftIndex];
                        var rightIndex = leftIndex + 1;
                        var right = heap[rightIndex];
                        if (left !== undefined && compare(left, node) < 0) {
                            if (right !== undefined && compare(right, left) < 0) {
                                heap[index] = right;
                                heap[rightIndex] = node;
                                index = rightIndex;
                            }
                            else {
                                heap[index] = left;
                                heap[leftIndex] = node;
                                index = leftIndex;
                            }
                        }
                        else if (right !== undefined && compare(right, node) < 0) {
                            heap[index] = right;
                            heap[rightIndex] = node;
                            index = rightIndex;
                        }
                        else {
                            return;
                        }
                    }
                }
                function compare(a, b) {
                    var diff = a.sortIndex - b.sortIndex;
                    return diff !== 0 ? diff : a.id - b.id;
                }
                var NoPriority = 0;
                var ImmediatePriority = 1;
                var UserBlockingPriority = 2;
                var NormalPriority = 3;
                var LowPriority = 4;
                var IdlePriority = 5;
                var runIdCounter = 0;
                var mainThreadIdCounter = 0;
                var profilingStateSize = 4;
                var sharedProfilingBuffer = typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) :
                    typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
                var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
                var PRIORITY = 0;
                var CURRENT_TASK_ID = 1;
                var CURRENT_RUN_ID = 2;
                var QUEUE_SIZE = 3;
                {
                    profilingState[PRIORITY] = NoPriority;
                    profilingState[QUEUE_SIZE] = 0;
                    profilingState[CURRENT_TASK_ID] = 0;
                }
                var INITIAL_EVENT_LOG_SIZE = 131072;
                var MAX_EVENT_LOG_SIZE = 524288;
                var eventLogSize = 0;
                var eventLogBuffer = null;
                var eventLog = null;
                var eventLogIndex = 0;
                var TaskStartEvent = 1;
                var TaskCompleteEvent = 2;
                var TaskErrorEvent = 3;
                var TaskCancelEvent = 4;
                var TaskRunEvent = 5;
                var TaskYieldEvent = 6;
                var SchedulerSuspendEvent = 7;
                var SchedulerResumeEvent = 8;
                function logEvent(entries) {
                    if (eventLog !== null) {
                        var offset = eventLogIndex;
                        eventLogIndex += entries.length;
                        if (eventLogIndex + 1 > eventLogSize) {
                            eventLogSize *= 2;
                            if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                                console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
                                stopLoggingProfilingEvents();
                                return;
                            }
                            var newEventLog = new Int32Array(eventLogSize * 4);
                            newEventLog.set(eventLog);
                            eventLogBuffer = newEventLog.buffer;
                            eventLog = newEventLog;
                        }
                        eventLog.set(entries, offset);
                    }
                }
                function startLoggingProfilingEvents() {
                    eventLogSize = INITIAL_EVENT_LOG_SIZE;
                    eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
                    eventLog = new Int32Array(eventLogBuffer);
                    eventLogIndex = 0;
                }
                function stopLoggingProfilingEvents() {
                    var buffer = eventLogBuffer;
                    eventLogSize = 0;
                    eventLogBuffer = null;
                    eventLog = null;
                    eventLogIndex = 0;
                    return buffer;
                }
                function markTaskStart(task, ms) {
                    {
                        profilingState[QUEUE_SIZE]++;
                        if (eventLog !== null) {
                            logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
                        }
                    }
                }
                function markTaskCompleted(task, ms) {
                    {
                        profilingState[PRIORITY] = NoPriority;
                        profilingState[CURRENT_TASK_ID] = 0;
                        profilingState[QUEUE_SIZE]--;
                        if (eventLog !== null) {
                            logEvent([TaskCompleteEvent, ms * 1000, task.id]);
                        }
                    }
                }
                function markTaskCanceled(task, ms) {
                    {
                        profilingState[QUEUE_SIZE]--;
                        if (eventLog !== null) {
                            logEvent([TaskCancelEvent, ms * 1000, task.id]);
                        }
                    }
                }
                function markTaskErrored(task, ms) {
                    {
                        profilingState[PRIORITY] = NoPriority;
                        profilingState[CURRENT_TASK_ID] = 0;
                        profilingState[QUEUE_SIZE]--;
                        if (eventLog !== null) {
                            logEvent([TaskErrorEvent, ms * 1000, task.id]);
                        }
                    }
                }
                function markTaskRun(task, ms) {
                    {
                        runIdCounter++;
                        profilingState[PRIORITY] = task.priorityLevel;
                        profilingState[CURRENT_TASK_ID] = task.id;
                        profilingState[CURRENT_RUN_ID] = runIdCounter;
                        if (eventLog !== null) {
                            logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
                        }
                    }
                }
                function markTaskYield(task, ms) {
                    {
                        profilingState[PRIORITY] = NoPriority;
                        profilingState[CURRENT_TASK_ID] = 0;
                        profilingState[CURRENT_RUN_ID] = 0;
                        if (eventLog !== null) {
                            logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
                        }
                    }
                }
                function markSchedulerSuspended(ms) {
                    {
                        mainThreadIdCounter++;
                        if (eventLog !== null) {
                            logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
                        }
                    }
                }
                function markSchedulerUnsuspended(ms) {
                    {
                        if (eventLog !== null) {
                            logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
                        }
                    }
                }
                var maxSigned31BitInt = 1073741823;
                var IMMEDIATE_PRIORITY_TIMEOUT = -1;
                var USER_BLOCKING_PRIORITY = 250;
                var NORMAL_PRIORITY_TIMEOUT = 5000;
                var LOW_PRIORITY_TIMEOUT = 10000;
                var IDLE_PRIORITY = maxSigned31BitInt;
                var taskQueue = [];
                var timerQueue = [];
                var taskIdCounter = 1;
                var currentTask = null;
                var currentPriorityLevel = NormalPriority;
                var isPerformingWork = false;
                var isHostCallbackScheduled = false;
                var isHostTimeoutScheduled = false;
                function advanceTimers(currentTime) {
                    var timer = peek(timerQueue);
                    while (timer !== null) {
                        if (timer.callback === null) {
                            pop(timerQueue);
                        }
                        else if (timer.startTime <= currentTime) {
                            pop(timerQueue);
                            timer.sortIndex = timer.expirationTime;
                            push(taskQueue, timer);
                            {
                                markTaskStart(timer, currentTime);
                                timer.isQueued = true;
                            }
                        }
                        else {
                            return;
                        }
                        timer = peek(timerQueue);
                    }
                }
                function handleTimeout(currentTime) {
                    isHostTimeoutScheduled = false;
                    advanceTimers(currentTime);
                    if (!isHostCallbackScheduled) {
                        if (peek(taskQueue) !== null) {
                            isHostCallbackScheduled = true;
                            _requestHostCallback(flushWork);
                        }
                        else {
                            var firstTimer = peek(timerQueue);
                            if (firstTimer !== null) {
                                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                            }
                        }
                    }
                }
                function flushWork(hasTimeRemaining, initialTime) {
                    {
                        markSchedulerUnsuspended(initialTime);
                    }
                    isHostCallbackScheduled = false;
                    if (isHostTimeoutScheduled) {
                        isHostTimeoutScheduled = false;
                        cancelHostTimeout();
                    }
                    isPerformingWork = true;
                    var previousPriorityLevel = currentPriorityLevel;
                    try {
                        if (enableProfiling) {
                            try {
                                return workLoop(hasTimeRemaining, initialTime);
                            }
                            catch (error) {
                                if (currentTask !== null) {
                                    var currentTime = exports.unstable_now();
                                    markTaskErrored(currentTask, currentTime);
                                    currentTask.isQueued = false;
                                }
                                throw error;
                            }
                        }
                        else {
                            return workLoop(hasTimeRemaining, initialTime);
                        }
                    }
                    finally {
                        currentTask = null;
                        currentPriorityLevel = previousPriorityLevel;
                        isPerformingWork = false;
                        {
                            var _currentTime = exports.unstable_now();
                            markSchedulerSuspended(_currentTime);
                        }
                    }
                }
                function workLoop(hasTimeRemaining, initialTime) {
                    var currentTime = initialTime;
                    advanceTimers(currentTime);
                    currentTask = peek(taskQueue);
                    while (currentTask !== null && !enableSchedulerDebugging) {
                        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                            break;
                        }
                        var callback = currentTask.callback;
                        if (callback !== null) {
                            currentTask.callback = null;
                            currentPriorityLevel = currentTask.priorityLevel;
                            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                            markTaskRun(currentTask, currentTime);
                            var continuationCallback = callback(didUserCallbackTimeout);
                            currentTime = exports.unstable_now();
                            if (typeof continuationCallback === 'function') {
                                currentTask.callback = continuationCallback;
                                markTaskYield(currentTask, currentTime);
                            }
                            else {
                                {
                                    markTaskCompleted(currentTask, currentTime);
                                    currentTask.isQueued = false;
                                }
                                if (currentTask === peek(taskQueue)) {
                                    pop(taskQueue);
                                }
                            }
                            advanceTimers(currentTime);
                        }
                        else {
                            pop(taskQueue);
                        }
                        currentTask = peek(taskQueue);
                    }
                    if (currentTask !== null) {
                        return true;
                    }
                    else {
                        var firstTimer = peek(timerQueue);
                        if (firstTimer !== null) {
                            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                        }
                        return false;
                    }
                }
                function unstable_runWithPriority(priorityLevel, eventHandler) {
                    switch (priorityLevel) {
                        case ImmediatePriority:
                        case UserBlockingPriority:
                        case NormalPriority:
                        case LowPriority:
                        case IdlePriority:
                            break;
                        default:
                            priorityLevel = NormalPriority;
                    }
                    var previousPriorityLevel = currentPriorityLevel;
                    currentPriorityLevel = priorityLevel;
                    try {
                        return eventHandler();
                    }
                    finally {
                        currentPriorityLevel = previousPriorityLevel;
                    }
                }
                function unstable_next(eventHandler) {
                    var priorityLevel;
                    switch (currentPriorityLevel) {
                        case ImmediatePriority:
                        case UserBlockingPriority:
                        case NormalPriority:
                            priorityLevel = NormalPriority;
                            break;
                        default:
                            priorityLevel = currentPriorityLevel;
                            break;
                    }
                    var previousPriorityLevel = currentPriorityLevel;
                    currentPriorityLevel = priorityLevel;
                    try {
                        return eventHandler();
                    }
                    finally {
                        currentPriorityLevel = previousPriorityLevel;
                    }
                }
                function unstable_wrapCallback(callback) {
                    var parentPriorityLevel = currentPriorityLevel;
                    return function () {
                        var previousPriorityLevel = currentPriorityLevel;
                        currentPriorityLevel = parentPriorityLevel;
                        try {
                            return callback.apply(this, arguments);
                        }
                        finally {
                            currentPriorityLevel = previousPriorityLevel;
                        }
                    };
                }
                function timeoutForPriorityLevel(priorityLevel) {
                    switch (priorityLevel) {
                        case ImmediatePriority:
                            return IMMEDIATE_PRIORITY_TIMEOUT;
                        case UserBlockingPriority:
                            return USER_BLOCKING_PRIORITY;
                        case IdlePriority:
                            return IDLE_PRIORITY;
                        case LowPriority:
                            return LOW_PRIORITY_TIMEOUT;
                        case NormalPriority:
                        default:
                            return NORMAL_PRIORITY_TIMEOUT;
                    }
                }
                function unstable_scheduleCallback(priorityLevel, callback, options) {
                    var currentTime = exports.unstable_now();
                    var startTime;
                    var timeout;
                    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options !== null) {
                        var delay = options.delay;
                        if (typeof delay === 'number' && delay > 0) {
                            startTime = currentTime + delay;
                        }
                        else {
                            startTime = currentTime;
                        }
                        timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
                    }
                    else {
                        timeout = timeoutForPriorityLevel(priorityLevel);
                        startTime = currentTime;
                    }
                    var expirationTime = startTime + timeout;
                    var newTask = {
                        id: taskIdCounter++,
                        callback: callback,
                        priorityLevel: priorityLevel,
                        startTime: startTime,
                        expirationTime: expirationTime,
                        sortIndex: -1
                    };
                    {
                        newTask.isQueued = false;
                    }
                    if (startTime > currentTime) {
                        newTask.sortIndex = startTime;
                        push(timerQueue, newTask);
                        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                            if (isHostTimeoutScheduled) {
                                cancelHostTimeout();
                            }
                            else {
                                isHostTimeoutScheduled = true;
                            }
                            requestHostTimeout(handleTimeout, startTime - currentTime);
                        }
                    }
                    else {
                        newTask.sortIndex = expirationTime;
                        push(taskQueue, newTask);
                        {
                            markTaskStart(newTask, currentTime);
                            newTask.isQueued = true;
                        }
                        if (!isHostCallbackScheduled && !isPerformingWork) {
                            isHostCallbackScheduled = true;
                            _requestHostCallback(flushWork);
                        }
                    }
                    return newTask;
                }
                function unstable_pauseExecution() { }
                function unstable_continueExecution() {
                    if (!isHostCallbackScheduled && !isPerformingWork) {
                        isHostCallbackScheduled = true;
                        _requestHostCallback(flushWork);
                    }
                }
                function unstable_getFirstCallbackNode() {
                    return peek(taskQueue);
                }
                function unstable_cancelCallback(task) {
                    {
                        if (task.isQueued) {
                            var currentTime = exports.unstable_now();
                            markTaskCanceled(task, currentTime);
                            task.isQueued = false;
                        }
                    }
                    task.callback = null;
                }
                function unstable_getCurrentPriorityLevel() {
                    return currentPriorityLevel;
                }
                function unstable_shouldYield() {
                    var currentTime = exports.unstable_now();
                    advanceTimers(currentTime);
                    var firstTask = peek(taskQueue);
                    return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
                }
                var unstable_requestPaint = requestPaint;
                var unstable_Profiling = {
                    startLoggingProfilingEvents: startLoggingProfilingEvents,
                    stopLoggingProfilingEvents: stopLoggingProfilingEvents,
                    sharedProfilingBuffer: sharedProfilingBuffer
                };
                exports.unstable_IdlePriority = IdlePriority;
                exports.unstable_ImmediatePriority = ImmediatePriority;
                exports.unstable_LowPriority = LowPriority;
                exports.unstable_NormalPriority = NormalPriority;
                exports.unstable_Profiling = unstable_Profiling;
                exports.unstable_UserBlockingPriority = UserBlockingPriority;
                exports.unstable_cancelCallback = unstable_cancelCallback;
                exports.unstable_continueExecution = unstable_continueExecution;
                exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
                exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
                exports.unstable_next = unstable_next;
                exports.unstable_pauseExecution = unstable_pauseExecution;
                exports.unstable_requestPaint = unstable_requestPaint;
                exports.unstable_runWithPriority = unstable_runWithPriority;
                exports.unstable_scheduleCallback = unstable_scheduleCallback;
                exports.unstable_shouldYield = unstable_shouldYield;
                exports.unstable_wrapCallback = unstable_wrapCallback;
            })();
        }
    }),
    "./node_modules/scheduler/index.js": (function (module, exports, __webpack_require__) {
        "use strict";
        if (false) { }
        else {
            module.exports = __webpack_require__("./node_modules/scheduler/cjs/scheduler.development.js");
        }
    }),
    "./node_modules/scheduler/tracing.js": (function (module, exports, __webpack_require__) {
        "use strict";
        if (false) { }
        else {
            module.exports = __webpack_require__("./node_modules/scheduler/cjs/scheduler-tracing.development.js");
        }
    }),
    "./node_modules/tiny-invariant/dist/tiny-invariant.esm.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var isProduction = "development" === 'production';
        var prefix = 'Invariant failed';
        function invariant(condition, message) {
            if (condition) {
                return;
            }
            if (isProduction) {
                throw new Error(prefix);
            }
            throw new Error(prefix + ": " + (message || ''));
        }
        exports.default = invariant;
    }),
    "./node_modules/tiny-warning/dist/tiny-warning.esm.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var isProduction = "development" === 'production';
        function warning(condition, message) {
            if (!isProduction) {
                if (condition) {
                    return;
                }
                var text = "Warning: " + message;
                if (typeof console !== 'undefined') {
                    console.warn(text);
                }
                try {
                    throw Error(text);
                }
                catch (x) { }
            }
        }
        exports.default = warning;
    }),
    "./node_modules/value-equal/esm/value-equal.js": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        function valueOf(obj) {
            return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
        }
        function valueEqual(a, b) {
            if (a === b)
                return true;
            if (a == null || b == null)
                return false;
            if (Array.isArray(a)) {
                return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
                    return valueEqual(item, b[index]);
                });
            }
            if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' || (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object') {
                var aValue = valueOf(a);
                var bValue = valueOf(b);
                if (aValue !== a || bValue !== b)
                    return valueEqual(aValue, bValue);
                return Object.keys(Object.assign({}, a, b)).every(function (key) {
                    return valueEqual(a[key], b[key]);
                });
            }
            return false;
        }
        exports.default = valueEqual;
    }),
    "./node_modules/webpack/buildin/amd-options.js": (function (module, exports) {
        (function (__webpack_amd_options__) {
            module.exports = __webpack_amd_options__;
        }.call(this, {}));
    }),
    "./node_modules/webpack/buildin/global.js": (function (module, exports, __webpack_require__) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
        var g;
        g = function () {
            return this;
        }();
        try {
            g = g || new Function("return this")();
        }
        catch (e) {
            if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object")
                g = window;
        }
        module.exports = g;
    }),
    "./node_modules/webpack/buildin/module.js": (function (module, exports, __webpack_require__) {
        "use strict";
        module.exports = function (module) {
            if (!module.webpackPolyfill) {
                module.deprecate = function () { };
                module.paths = [];
                if (!module.children)
                    module.children = [];
                Object.defineProperty(module, "loaded", {
                    enumerable: true,
                    get: function get() {
                        return module.l;
                    }
                });
                Object.defineProperty(module, "id", {
                    enumerable: true,
                    get: function get() {
                        return module.i;
                    }
                });
                module.webpackPolyfill = 1;
            }
            return module;
        };
    }),
    "./resources/app/js/Interfaces/ICartItem.ts": (function (module, exports, __webpack_require__) {
        "use strict";
        var _IProduct = __webpack_require__("./resources/app/js/Interfaces/IProduct.ts");
        var _IProduct2 = _interopRequireDefault(_IProduct);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    }),
    "./resources/app/js/Interfaces/ICategory.ts": (function (module, exports, __webpack_require__) {
        "use strict";
    }),
    "./resources/app/js/Interfaces/IProduct.ts": (function (module, exports, __webpack_require__) {
        "use strict";
    }),
    "./resources/app/js/components/App.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        var _Header = __webpack_require__("./resources/app/js/components/Header/index.tsx");
        var _Header2 = _interopRequireDefault(_Header);
        var _Footer = __webpack_require__("./resources/app/js/components/Footer.tsx");
        var _Footer2 = _interopRequireDefault(_Footer);
        var _Content = __webpack_require__("./resources/app/js/components/Content.tsx");
        var _Content2 = _interopRequireDefault(_Content);
        var _Newsletter = __webpack_require__("./resources/app/js/components/Newsletter.tsx");
        var _Newsletter2 = _interopRequireDefault(_Newsletter);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var App = function App() {
            return React.createElement(_reactRouterDom.BrowserRouter, null, React.createElement(_Header2.default, null), React.createElement(_Content2.default, null), React.createElement(_Newsletter2.default, null), React.createElement(_Footer2.default, null));
        };
        exports.default = App;
    }),
    "./resources/app/js/components/CartPage/Content/CartItem.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _ICartItem = __webpack_require__("./resources/app/js/Interfaces/ICartItem.ts");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var CartItem = function CartItem(props) {
            return React.createElement('div', { className: 'table__row' }, React.createElement('div', { className: 'table__col orders__product' }, React.createElement('img', {
                className: 'orders__img',
                src: props.product.photo,
                alt: 'Product picture'
            }), React.createElement('div', null, React.createElement('div', { className: 'orders__name' }, props.product.name), React.createElement('div', { className: 'orders__color' }, React.createElement('div', { className: 'goods__color-item goods__color-item_black' }), React.createElement('div', { className: 'orders__size' }, props.size)))), React.createElement('div', { className: 'table__col orders__price' }, props.product.price), React.createElement('div', { className: 'table__col orders__quantity' }, React.createElement('div', { className: 'order__quantity' }, React.createElement('span', {
                className: 'order__quantity-count',
                contentEditable: 'true'
            }, props.count))), React.createElement('div', { className: 'table__col orders__total' }, props.count * props.product.price), React.createElement('div', { className: 'table__col orders__remove' }, React.createElement('i', { className: 'fas fa-times cur' })));
        };
        exports.default = CartItem;
    }),
    "./resources/app/js/components/CartPage/Content/CartTable.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _ICartItem = __webpack_require__("./resources/app/js/Interfaces/ICartItem.ts");
        var _CartItem = __webpack_require__("./resources/app/js/components/CartPage/Content/CartItem.tsx");
        var _CartItem2 = _interopRequireDefault(_CartItem);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var CartTable = function CartTable(props) {
            return React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'table__wrap my-pad' }, React.createElement('div', { className: 'table' }, React.createElement('div', { className: 'table__head' }, React.createElement('div', { className: 'table__head-item table__head-item_lg' }, 'Product'), React.createElement('div', { className: 'table__head-item' }, 'Price'), React.createElement('div', { className: 'table__head-item' }, 'Quantity'), React.createElement('div', { className: 'table__head-item' }, 'Total'), React.createElement('div', { className: 'table__head-item' })), React.createElement('div', { className: 'table__content' }, props.cartItems.map(function (item, index) {
                return React.createElement(_CartItem2.default, _extends({ key: index }, item));
            })))), React.createElement('div', { className: 'orders__actions' }, React.createElement('div', { className: 'orders__clear' }, 'Clear cart'), React.createElement('div', { className: 'orders__update' }, 'Update cart')));
        };
        exports.default = CartTable;
    }),
    "./resources/app/js/components/CartPage/Content/Checkout.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _ICartItem = __webpack_require__("./resources/app/js/Interfaces/ICartItem.ts");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Checkout = function Checkout(props) {
            var cartPrice = props.cartItems.reduce(function (prev, item) {
                return prev + item.count * item.product.price;
            }, 0).toFixed(2);
            return React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'check my-pad' }, React.createElement('div', { className: 'check__box' }, React.createElement('b', { className: 'check__head mb-10' }, 'Cart Total'), React.createElement('div', { className: 'check__subtotal mb-10 row space-between' }, React.createElement('div', { className: 'check__subtotal-head' }, 'Subtotal:'), React.createElement('div', { className: 'check__subtotal-price' }, '$', cartPrice)), React.createElement('div', { className: 'check__shipping mb-10 row space-between' }, React.createElement('div', { className: 'check__shipping-head' }, 'Shipping:'), React.createElement('div', { className: 'check__shipping-list' }, 'FREE SHIPPING')), React.createElement('hr', null), React.createElement('div', { className: 'check__result mb-10 row space-between' }, React.createElement('div', { className: 'check__result-head' }, 'Total'), React.createElement('div', { className: 'check__result-price' }, '$', cartPrice))), React.createElement('button', { type: 'button', className: 'check__but my-pad' }, 'Checkout')));
        };
        exports.default = Checkout;
    }),
    "./resources/app/js/components/CartPage/Content/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _ICartItem = __webpack_require__("./resources/app/js/Interfaces/ICartItem.ts");
        var _CartTable = __webpack_require__("./resources/app/js/components/CartPage/Content/CartTable.tsx");
        var _CartTable2 = _interopRequireDefault(_CartTable);
        var _Checkout = __webpack_require__("./resources/app/js/components/CartPage/Content/Checkout.tsx");
        var _Checkout2 = _interopRequireDefault(_Checkout);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Content = function Content(props) {
            return React.createElement(React.Fragment, null, React.createElement(_CartTable2.default, { cartItems: props.cartItems }), React.createElement(_Checkout2.default, { cartItems: props.cartItems }));
        };
        exports.default = Content;
    }),
    "./resources/app/js/components/CartPage/Empty.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var EmptyCart = function EmptyCart() {
            return React.createElement('div', { className: 'empty my-pad' }, React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'empty__text' }, 'Your cart is current empty'), React.createElement(_reactRouterDom.Link, { to: '/' }, React.createElement('button', { type: 'button', className: 'empty__back' }, 'Return to shop'))));
        };
        exports.default = EmptyCart;
    }),
    "./resources/app/js/components/CartPage/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _Reducers = __webpack_require__("./resources/app/js/redux/Reducers/index.ts");
        var _Paginate = __webpack_require__("./resources/app/js/components/Paginate.tsx");
        var _Paginate2 = _interopRequireDefault(_Paginate);
        var _Empty = __webpack_require__("./resources/app/js/components/CartPage/Empty.tsx");
        var _Empty2 = _interopRequireDefault(_Empty);
        var _Content = __webpack_require__("./resources/app/js/components/CartPage/Content/index.tsx");
        var _Content2 = _interopRequireDefault(_Content);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var mapStateToProps = function mapStateToProps(state) {
            return {
                cart: state.cart
            };
        };
        var cartConnected = (0, _reactRedux.connect)(mapStateToProps);
        var CartPage = function CartPage(props) {
            React.useEffect(function () {
                document.title = 'Cart';
            }, []);
            return React.createElement(React.Fragment, null, React.createElement(_Paginate2.default, { paths: [{ name: 'Home', path: '/' }, { name: 'Cart', path: '/cart' }] }), props.cart.length ? React.createElement(_Content2.default, { cartItems: props.cart }) : React.createElement(_Empty2.default, null));
        };
        exports.default = cartConnected(CartPage);
    }),
    "./resources/app/js/components/CategoriesPage/CategoriesList.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _ICategory = __webpack_require__("./resources/app/js/Interfaces/ICategory.ts");
        var _CategoryItem = __webpack_require__("./resources/app/js/components/CategoriesPage/CategoryItem.tsx");
        var _CategoryItem2 = _interopRequireDefault(_CategoryItem);
        var _Reducers = __webpack_require__("./resources/app/js/redux/Reducers/index.ts");
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var mapStateToProps = function mapStateToProps(state) {
            return {
                categories: state.category.categories
            };
        };
        var connected = (0, _reactRedux.connect)(mapStateToProps);
        var CategoriesList = function CategoriesList(props) {
            return React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'categories my-pad' }, !props.categories.length && React.createElement('b', null, '\u041D\u0435\u0442 \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0439'), props.categories.map(function (category) {
                return React.createElement(_CategoryItem2.default, { key: category.slug, category: category });
            })));
        };
        exports.default = connected(CategoriesList);
    }),
    "./resources/app/js/components/CategoriesPage/CategoryItem.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        var _ICategory = __webpack_require__("./resources/app/js/Interfaces/ICategory.ts");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var CategoryItem = function CategoryItem(props) {
            return React.createElement(_reactRouterDom.Link, { to: '/categories/' + props.category.slug,
                className: 'categories__item' }, React.createElement('img', { className: 'categories__img', src: props.category.image, alt: 'Category' }), React.createElement('div', { className: 'categories__products center w-100',
                style: { flexDirection: 'column' } }, React.createElement('div', null, props.category.name), React.createElement('div', null, props.category.productCount, ' products')));
        };
        exports.default = CategoryItem;
    }),
    "./resources/app/js/components/CategoriesPage/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _Paginate = __webpack_require__("./resources/app/js/components/Paginate.tsx");
        var _Paginate2 = _interopRequireDefault(_Paginate);
        var _CategoriesList = __webpack_require__("./resources/app/js/components/CategoriesPage/CategoriesList.tsx");
        var _CategoriesList2 = _interopRequireDefault(_CategoriesList);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var CategoriesPage = function CategoriesPage() {
            React.useEffect(function () {
                document.title = 'Categories';
            }, []);
            return React.createElement(React.Fragment, null, React.createElement(_Paginate2.default, { paths: [{ name: 'Home', path: '/' }, { name: 'Categories', path: '/categories' }] }), React.createElement(_CategoriesList2.default, null));
        };
        exports.default = CategoriesPage;
    }),
    "./resources/app/js/components/CheckoutPage/Form/BillingForm.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/index.js");
        var _InputElement = __webpack_require__("./resources/app/js/components/FormElements/InputElement.tsx");
        var _InputElement2 = _interopRequireDefault(_InputElement);
        var _CreateAccountForm = __webpack_require__("./resources/app/js/components/CheckoutPage/Form/CreateAccountForm.tsx");
        var _CreateAccountForm2 = _interopRequireDefault(_CreateAccountForm);
        var _Payment = __webpack_require__("./resources/app/js/components/CheckoutPage/Form/Payment/index.tsx");
        var _Payment2 = _interopRequireDefault(_Payment);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var BillingForm = function BillingForm(props) {
            return React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'billing my-pad' }, React.createElement('div', { className: 'billing__head' }, 'Billing Details'), React.createElement('form', { className: 'billing__form', onSubmit: props.handleSubmit, noValidate: true }, React.createElement('div', { className: 'row' }, React.createElement(_reduxForm.Field, { component: _InputElement2.default,
                placeholder: 'First Name',
                name: 'first',
                type: 'text',
                className: 'mr-1',
                required: true }), React.createElement(_reduxForm.Field, { component: _InputElement2.default,
                placeholder: 'Last Name',
                name: 'last',
                type: 'text',
                className: 'ml-1',
                required: true })), React.createElement(_reduxForm.Field, { component: _InputElement2.default,
                placeholder: 'Company Name',
                name: 'company',
                type: 'text',
                required: true }), React.createElement(_reduxForm.Field, { component: _InputElement2.default,
                placeholder: 'Country',
                name: 'country',
                type: 'text',
                required: true }), React.createElement('div', { className: 'row' }, React.createElement(_reduxForm.Field, { component: _InputElement2.default,
                placeholder: 'Town / City',
                name: 'city',
                type: 'text',
                className: 'mr-1',
                required: true }), React.createElement(_reduxForm.Field, { component: _InputElement2.default,
                placeholder: 'Postcode / Zip',
                name: 'postcode',
                type: 'text',
                className: 'ml-1',
                required: true })), React.createElement(_reduxForm.Field, { component: _InputElement2.default,
                placeholder: 'Street Address',
                name: 'address',
                type: 'text',
                required: true }), React.createElement(_reduxForm.Field, { component: _InputElement2.default,
                placeholder: 'Phone',
                name: 'phone',
                type: 'text',
                required: true }), React.createElement(_reduxForm.Field, { component: _InputElement2.default,
                placeholder: 'Email address',
                name: 'email',
                type: 'email',
                required: true }), React.createElement(_CreateAccountForm2.default, null), React.createElement('div', null, 'Order Notes'), React.createElement('div', { className: 'text-muted' }, 'Notes about your order like delivery species e.g.'), React.createElement('div', { className: 'input' }, React.createElement(_reduxForm.Field, { component: 'textarea',
                className: 'input__elem',
                rows: 1,
                name: 'notes'
            }), React.createElement('div', { className: 'input__line', style: { bottom: '4px' } })), React.createElement(_Payment2.default, null))));
        };
        exports.default = _reduxForm.reduxForm < IBillingFormData > {
            form: 'billing'
        }(BillingForm);
    }),
    "./resources/app/js/components/CheckoutPage/Form/CreateAccountForm.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/index.js");
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _Reducers = __webpack_require__("./resources/app/js/redux/Reducers/index.ts");
        var _CheckboxElement = __webpack_require__("./resources/app/js/components/FormElements/CheckboxElement.tsx");
        var _CheckboxElement2 = _interopRequireDefault(_CheckboxElement);
        var _InputElement = __webpack_require__("./resources/app/js/components/FormElements/InputElement.tsx");
        var _InputElement2 = _interopRequireDefault(_InputElement);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var selector = (0, _reduxForm.formValueSelector)('billing');
        var connected = (0, _reactRedux.connect)(function (state) {
            return {
                isCreate: selector(state, 'create')
            };
        });
        var AccountForm = function AccountForm(props) {
            return React.createElement(React.Fragment, null, React.createElement(_reduxForm.Field, { component: _CheckboxElement2.default,
                name: 'create',
                placeholder: 'Create account?'
            }), props.isCreate && React.createElement('div', { className: 'row my-pad' }, React.createElement(_reduxForm.Field, {
                component: _InputElement2.default,
                name: 'password',
                placeholder: 'Password',
                className: 'mr-1',
                required: true
            }), React.createElement(_reduxForm.Field, {
                component: _InputElement2.default,
                name: 'passwordConfirm',
                placeholder: 'Password confirmation',
                className: 'ml-1',
                required: true
            })));
        };
        exports.default = connected(AccountForm);
    }),
    "./resources/app/js/components/CheckoutPage/Form/Payment/PaymentList.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _Reducers = __webpack_require__("./resources/app/js/redux/Reducers/index.ts");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var connected = (0, _reactRedux.connect)(function (state) {
            return {
                cartItems: state.cart,
                totalPrice: state.cart.reduce(function (prev, item) {
                    return prev + item.count * item.product.price;
                }, 0)
            };
        });
        var PaymentList = function PaymentList(props) {
            return React.createElement('div', { className: 'payment__order' }, React.createElement('div', { className: 'payment__head' }, 'My Order'), React.createElement('div', { className: 'payment__order-list' }, React.createElement('div', { className: 'payment__order-item' }, React.createElement('b', null, 'Product'), React.createElement('b', null, 'Total')), props.cartItems.map(function (item, index) {
                return React.createElement('div', { key: index, className: 'payment__order-item' }, React.createElement('span', null, item.product.name, ' x ', item.count), React.createElement('span', null, '$', (item.product.price * item.count).toFixed(2)));
            }), React.createElement('div', { className: 'payment__order-item' }, React.createElement('span', null, 'Shipping'), React.createElement('span', null, 'FREE SHIPPING')), React.createElement('div', { className: 'payment__order-item' }, React.createElement('b', null, 'Total'), React.createElement('b', null, '$', props.totalPrice.toFixed(2)))));
        };
        exports.default = connected(PaymentList);
    }),
    "./resources/app/js/components/CheckoutPage/Form/Payment/PaymentTypes.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/index.js");
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _Reducers = __webpack_require__("./resources/app/js/redux/Reducers/index.ts");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var selector = (0, _reduxForm.formValueSelector)('billing');
        var connected = (0, _reactRedux.connect)(function (state) {
            return {
                type: selector(state, 'payment')
            };
        });
        var PaymentTypes = function PaymentTypes(props) {
            return React.createElement('div', { className: 'payment__types' }, React.createElement('div', { className: 'payment__head' }, 'Payment'), React.createElement('div', { className: 'payment__type' }, React.createElement('div', { className: 'radio' }, React.createElement(_reduxForm.Field, {
                component: 'input',
                type: 'radio',
                name: 'payment',
                value: 'paypal',
                className: 'radio__elem',
                id: 'paypal'
            }), React.createElement('label', { className: 'radio__label', htmlFor: 'paypal' }, React.createElement('span', null, 'Paypal'))), React.createElement('div', { className: 'payment__content ' + (props.type != 'paypal' ? 'hidden' : '') }, 'Paypal payment type')), React.createElement('div', { className: 'payment__type' }, React.createElement('div', { className: 'radio' }, React.createElement(_reduxForm.Field, {
                component: 'input',
                type: 'radio',
                name: 'payment',
                value: 'bank',
                className: 'radio__elem',
                id: 'bank'
            }), React.createElement('label', { className: 'radio__label', htmlFor: 'bank' }, React.createElement('span', null, 'Direct Bank Transfer'))), React.createElement('div', { className: 'payment__content ' + (props.type != 'bank' ? 'hidden' : '') }, 'Direct bank transaction on our card')), React.createElement('div', { className: 'payment__type' }, React.createElement('div', { className: 'radio' }, React.createElement(_reduxForm.Field, {
                component: 'input',
                type: 'radio',
                name: 'payment',
                value: 'deliver',
                className: 'radio__elem',
                id: 'deliver'
            }), React.createElement('label', { className: 'radio__label', htmlFor: 'deliver' }, React.createElement('span', null, 'Cash on delivery'))), React.createElement('div', { className: 'payment__content ' + (props.type != 'deliver' ? 'hidden' : '') }, 'You receive your order via post office and cash on delivery')));
        };
        exports.default = connected(PaymentTypes);
    }),
    "./resources/app/js/components/CheckoutPage/Form/Payment/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _PaymentList = __webpack_require__("./resources/app/js/components/CheckoutPage/Form/Payment/PaymentList.tsx");
        var _PaymentList2 = _interopRequireDefault(_PaymentList);
        var _PaymentTypes = __webpack_require__("./resources/app/js/components/CheckoutPage/Form/Payment/PaymentTypes.tsx");
        var _PaymentTypes2 = _interopRequireDefault(_PaymentTypes);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Payment = function Payment() {
            return React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'payment my-pad row' }, React.createElement(_PaymentList2.default, null), React.createElement(_PaymentTypes2.default, null)), React.createElement('div', { className: 'space-between row mb-10' }, React.createElement('div', null), React.createElement('button', { type: 'submit', className: 'check__but' }, 'Place order')));
        };
        exports.default = Payment;
    }),
    "./resources/app/js/components/CheckoutPage/Questions.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Questions = function Questions() {
            return React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'questions my-pad' }, React.createElement('div', { className: 'question' }, React.createElement('div', { className: 'question__text' }, 'Returning customer ?', React.createElement(_reactRouterDom.Link, { to: '/login' }, 'Click here to login.'))), React.createElement('div', { className: 'question' }, React.createElement('div', { className: 'question__text' }, 'Have a coupon ?', React.createElement('a', { href: '#' }, 'Click here to enter.')))));
        };
        exports.default = Questions;
    }),
    "./resources/app/js/components/CheckoutPage/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _Paginate = __webpack_require__("./resources/app/js/components/Paginate.tsx");
        var _Paginate2 = _interopRequireDefault(_Paginate);
        var _Questions = __webpack_require__("./resources/app/js/components/CheckoutPage/Questions.tsx");
        var _Questions2 = _interopRequireDefault(_Questions);
        var _BillingForm = __webpack_require__("./resources/app/js/components/CheckoutPage/Form/BillingForm.tsx");
        var _BillingForm2 = _interopRequireDefault(_BillingForm);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var CheckoutPage = function CheckoutPage() {
            React.useEffect(function () {
                document.title = 'Checkout';
            }, []);
            var onSubmit = function onSubmit(vals) {
                console.log(vals);
            };
            return React.createElement(React.Fragment, null, React.createElement(_Paginate2.default, { paths: [{
                        name: 'Home',
                        path: '/'
                    }, {
                        name: 'Checkout',
                        path: '/checkout'
                    }] }), React.createElement(_Questions2.default, null), React.createElement(_BillingForm2.default, { onSubmit: onSubmit }));
        };
        exports.default = CheckoutPage;
    }),
    "./resources/app/js/components/Content.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        var _LoginPage = __webpack_require__("./resources/app/js/components/LoginPage/index.tsx");
        var _LoginPage2 = _interopRequireDefault(_LoginPage);
        var _RegisterPage = __webpack_require__("./resources/app/js/components/RegisterPage/index.tsx");
        var _RegisterPage2 = _interopRequireDefault(_RegisterPage);
        var _NotFoundPage = __webpack_require__("./resources/app/js/components/NotFoundPage/index.tsx");
        var _NotFoundPage2 = _interopRequireDefault(_NotFoundPage);
        var _HomePage = __webpack_require__("./resources/app/js/components/HomePage/index.tsx");
        var _HomePage2 = _interopRequireDefault(_HomePage);
        var _CartPage = __webpack_require__("./resources/app/js/components/CartPage/index.tsx");
        var _CartPage2 = _interopRequireDefault(_CartPage);
        var _ResetPage = __webpack_require__("./resources/app/js/components/ResetPage/index.tsx");
        var _ResetPage2 = _interopRequireDefault(_ResetPage);
        var _CategoriesPage = __webpack_require__("./resources/app/js/components/CategoriesPage/index.tsx");
        var _CategoriesPage2 = _interopRequireDefault(_CategoriesPage);
        var _CheckoutPage = __webpack_require__("./resources/app/js/components/CheckoutPage/index.tsx");
        var _CheckoutPage2 = _interopRequireDefault(_CheckoutPage);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Content = function Content() {
            return React.createElement(_reactRouterDom.Switch, null, React.createElement(_reactRouterDom.Route, { path: '/', exact: true, component: _HomePage2.default }), React.createElement(_reactRouterDom.Route, { path: '/login', exact: true, component: _LoginPage2.default }), React.createElement(_reactRouterDom.Route, { path: '/register', exact: true, component: _RegisterPage2.default }), React.createElement(_reactRouterDom.Route, { path: '/cart', exact: true, component: _CartPage2.default }), React.createElement(_reactRouterDom.Route, { path: '/reset', exact: true, component: _ResetPage2.default }), React.createElement(_reactRouterDom.Route, { path: '/categories', exact: true, component: _CategoriesPage2.default }), React.createElement(_reactRouterDom.Route, { path: '/checkout', exact: true, component: _CheckoutPage2.default }), React.createElement(_reactRouterDom.Route, { path: '/', component: _NotFoundPage2.default }));
        };
        exports.default = Content;
    }),
    "./resources/app/js/components/Footer.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Footer = function Footer() {
            return React.createElement('footer', { className: 'footer' }, React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'footer__content' }, React.createElement('div', { className: 'footer__info' }, React.createElement('img', { className: 'footer__logo',
                src: './image/logo.png',
                alt: 'Logo' }), React.createElement('div', { className: 'footer__info-content' }, 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aliquam cumque debitis deleniti doloribus earum error id iure, laborum neque nisi odit, possimus quaerat temporibus totam. Aspernatur atque corporis ut!')), React.createElement('div', { className: 'footer__links' }, React.createElement('div', { className: 'footer__links-head' }, 'Useful links'), React.createElement('ul', { className: 'footer__links-list' }, React.createElement(_reactRouterDom.Link, { to: '/', className: 'footer__links-item' }, React.createElement('li', null, 'Home')), React.createElement(_reactRouterDom.Link, { to: '/checkout', className: 'footer__links-item' }, React.createElement('li', null, 'Checkout')), React.createElement(_reactRouterDom.Link, { to: '/profile', className: 'footer__links-item' }, React.createElement('li', null, 'My account')), React.createElement('a', { className: 'footer__links-item', href: '#' }, React.createElement('li', null, 'Man fashion')), React.createElement('a', { className: 'footer__links-item', href: '#' }, React.createElement('li', null, 'Women fashion')), React.createElement(_reactRouterDom.Link, { to: '/cart', className: 'footer__links-item' }, React.createElement('li', null, 'Cart')))), React.createElement('div', { className: 'footer__contacts' }, React.createElement('div', { className: 'footer__links-head' }, 'Contact us'), React.createElement('div', { className: 'footer__contacts-list' }, React.createElement('div', { className: 'footer__contacts-item' }, React.createElement('i', { className: 'fas fa-envelope' }), React.createElement('a', { className: 'footer__contacts-link',
                href: 'mailto:cssuperpy@gmail.com' }, 'cssuperpy@gmail.com')), React.createElement('div', { className: 'footer__contacts-item' }, React.createElement('i', { className: 'fas fa-phone-alt' }), React.createElement('a', { className: 'footer__contacts-link',
                href: 'tel:+7043345544' }, '+7043345435543')), React.createElement('div', { className: 'footer__contacts-item' }, React.createElement('i', { className: 'fas fa-link' }), React.createElement('a', { className: 'footer__contacts-link',
                href: 'https://htmlprogrammer.ru' }, 'htmlprogrammer.ru')))))), React.createElement('hr', null), React.createElement('div', { className: 'footer__copy' }, 'Copyright ', new Date().getFullYear()));
        };
        exports.default = Footer;
    }),
    "./resources/app/js/components/FormElements/CheckboxElement.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/index.js");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var CheckboxElement = function CheckboxElement(props) {
            var placeholder = props.placeholder, className = props.className, _props$input = props.input, value = _props$input.value, name = _props$input.name, onChange = _props$input.onChange;
            return React.createElement('div', { className: 'checkbox' }, React.createElement('input', { className: 'checkbox__elem  ' + className,
                type: 'checkbox',
                checked: value,
                name: name,
                onChange: onChange }), React.createElement('label', { className: 'checkbox__label' }, React.createElement('span', null, placeholder)));
        };
        exports.default = CheckboxElement;
    }),
    "./resources/app/js/components/FormElements/InputElement.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/index.js");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var InputElement = function InputElement(props) {
            var required = props.required, type = props.type, placeholder = props.placeholder, className = props.className, _props$input = props.input, value = _props$input.value, name = _props$input.name, onChange = _props$input.onChange;
            return React.createElement('div', { className: 'input  ' + className }, React.createElement('input', {
                className: 'input__elem',
                required: required,
                type: type,
                value: value,
                name: name,
                onChange: onChange
            }), React.createElement('label', { className: 'input__label' }, React.createElement('span', null, placeholder), required && React.createElement('span', { className: 'red' }, '*')), React.createElement('div', { className: 'input__line' }));
        };
        exports.default = InputElement;
    }),
    "./resources/app/js/components/Header/Logo.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Logo = function Logo() {
            return React.createElement("a", { href: "/" }, React.createElement("img", { className: "header__logo", src: "/image/logo.png", alt: "Logo" }));
        };
        exports.default = Logo;
    }),
    "./resources/app/js/components/Header/Menu/Burger.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _classnames = __webpack_require__("./node_modules/classnames/index.js");
        var _classnames2 = _interopRequireDefault(_classnames);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Burger = function Burger(props) {
            var burgerClasses = (0, _classnames2.default)('burger header__icon', {
                active: props.isOpen
            });
            return React.createElement('div', { className: burgerClasses, onClick: function onClick() {
                    props.changeOpen(function (prev) {
                        return !prev;
                    });
                } }, React.createElement('div', { className: 'burger__body' }, React.createElement('span', { className: 'burger__item' }), React.createElement('span', { className: 'burger__item' }), React.createElement('span', { className: 'burger__item' })));
        };
        exports.default = Burger;
    }),
    "./resources/app/js/components/Header/Menu/Cart/CartDropdown.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        var _CartList = __webpack_require__("./resources/app/js/components/Header/Menu/Cart/CartList.tsx");
        var _CartList2 = _interopRequireDefault(_CartList);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var CartDropdown = function CartDropdown() {
            return React.createElement('div', { className: 'dropdown__body' }, React.createElement('div', { className: 'dropdown__content' }, React.createElement(_CartList2.default, null), React.createElement('div', { className: 'row space-between w-100' }, React.createElement(_reactRouterDom.Link, { to: '/cart' }, React.createElement('button', { type: 'button', className: 'check__but sm' }, 'View Cart')), React.createElement(_reactRouterDom.Link, { to: '/checkout' }, React.createElement('button', { type: 'button', className: 'check__but sm' }, 'Checkout')))));
        };
        exports.default = CartDropdown;
    }),
    "./resources/app/js/components/Header/Menu/Cart/CartList.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _Reducers = __webpack_require__("./resources/app/js/redux/Reducers/index.ts");
        var _ICartItem = __webpack_require__("./resources/app/js/Interfaces/ICartItem.ts");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var mapStateToProps = function mapStateToProps(state) {
            return {
                cartItems: state.cart
            };
        };
        var connected = (0, _reactRedux.connect)(mapStateToProps);
        var CartList = function CartList(props) {
            var cartPrice = props.cartItems.reduce(function (prev, data) {
                return prev + data.product.price * data.count;
            }, 0);
            return React.createElement('ul', { className: 'header__product-list' }, !props.cartItems.length && React.createElement('b', null, '\u041D\u0435\u0442 \u0442\u043E\u0432\u0430\u0440\u043E\u0432'), props.cartItems.map(function (item, index) {
                return React.createElement('li', { className: 'header__product-item', key: index }, React.createElement('span', null, item.product.name, ' x ', item.count), React.createElement('span', null, '$', (item.product.price * item.count).toFixed(2)), React.createElement('span', null, '\xD7'));
            }), props.cartItems.length && React.createElement('li', { className: 'header__product-item' }, React.createElement('b', null, 'Total'), React.createElement('span', null), React.createElement('b', null, '$', cartPrice.toFixed(2))));
        };
        exports.default = connected(CartList);
    }),
    "./resources/app/js/components/Header/Menu/Cart/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _classnames = __webpack_require__("./node_modules/classnames/index.js");
        var _classnames2 = _interopRequireDefault(_classnames);
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _Reducers = __webpack_require__("./resources/app/js/redux/Reducers/index.ts");
        var _Search = __webpack_require__("./resources/app/js/components/Header/Menu/Search.tsx");
        var _CartDropdown = __webpack_require__("./resources/app/js/components/Header/Menu/Cart/CartDropdown.tsx");
        var _CartDropdown2 = _interopRequireDefault(_CartDropdown);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var mapStateToProps = function mapStateToProps(state) {
            return {
                count: state.cart.length
            };
        };
        var connected = (0, _reactRedux.connect)(mapStateToProps);
        var Cart = function Cart(props) {
            var dropClasses = (0, _classnames2.default)('header__icon header__icon_badge dropdown', {
                active: props.openMenu == 'cart'
            });
            return React.createElement(React.Fragment, null, React.createElement('span', { className: dropClasses }, React.createElement('i', { className: 'fas fa-shopping-bag dropdown__elem',
                onClick: function onClick() {
                    props.changeOpen(function (prev) {
                        return prev == 'cart' ? '' : 'cart';
                    });
                } }), React.createElement('span', { className: 'badge' }, props.count), React.createElement(_CartDropdown2.default, null)));
        };
        exports.default = connected(Cart);
    }),
    "./resources/app/js/components/Header/Menu/Search.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _classnames = __webpack_require__("./node_modules/classnames/index.js");
        var _classnames2 = _interopRequireDefault(_classnames);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Search = function Search(props) {
            var searchClasses = (0, _classnames2.default)('header__icon dropdown', {
                active: props.openMenu == 'search'
            });
            return React.createElement(React.Fragment, null, React.createElement('span', { className: searchClasses }, React.createElement('i', { className: 'fas fa-search dropdown__elem',
                onClick: function onClick() {
                    props.changeOpen(function (prev) {
                        return prev == 'search' ? '' : 'search';
                    });
                } }), React.createElement('div', { className: 'dropdown__body' }, React.createElement('div', { className: 'dropdown__content' }, React.createElement('div', { className: 'input' }, React.createElement('input', { className: 'input__elem', required: true }), React.createElement('label', { className: 'input__label' }, 'Search'), React.createElement('div', { className: 'input__line' }))))));
        };
        exports.default = Search;
    }),
    "./resources/app/js/components/Header/Menu/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _slicedToArray = function () {
            function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;
                try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i)
                            break;
                    }
                }
                catch (err) {
                    _d = true;
                    _e = err;
                }
                finally {
                    try {
                        if (!_n && _i["return"])
                            _i["return"]();
                    }
                    finally {
                        if (_d)
                            throw _e;
                    }
                }
                return _arr;
            }
            return function (arr, i) {
                if (Array.isArray(arr)) {
                    return arr;
                }
                else if (Symbol.iterator in Object(arr)) {
                    return sliceIterator(arr, i);
                }
                else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
            };
        }();
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _classnames = __webpack_require__("./node_modules/classnames/index.js");
        var _classnames2 = _interopRequireDefault(_classnames);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        var _Cart = __webpack_require__("./resources/app/js/components/Header/Menu/Cart/index.tsx");
        var _Cart2 = _interopRequireDefault(_Cart);
        var _Search = __webpack_require__("./resources/app/js/components/Header/Menu/Search.tsx");
        var _Search2 = _interopRequireDefault(_Search);
        var _Burger = __webpack_require__("./resources/app/js/components/Header/Menu/Burger.tsx");
        var _Burger2 = _interopRequireDefault(_Burger);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Menu = function Menu() {
            var _React$useState = React.useState(''), _React$useState2 = _slicedToArray(_React$useState, 2), openMenu = _React$useState2[0], changeMenu = _React$useState2[1];
            var _React$useState3 = React.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), isBurgerOpen = _React$useState4[0], changeBurger = _React$useState4[1];
            var menuClasses = (0, _classnames2.default)('header__links', {
                active: isBurgerOpen
            });
            return React.createElement('nav', { className: 'header__menu' }, React.createElement('div', { className: menuClasses }, React.createElement(_reactRouterDom.Link, { to: '/', className: 'header__item' }, 'Home'), React.createElement(_reactRouterDom.Link, { to: '/categories', className: 'header__item' }, 'Categories'), React.createElement(_reactRouterDom.Link, { to: '/profile', className: 'header__item' }, 'Profile')), React.createElement('div', { className: 'header__icons' }, React.createElement(_Cart2.default, { openMenu: openMenu, changeOpen: changeMenu }), React.createElement(_Search2.default, { openMenu: openMenu, changeOpen: changeMenu })), React.createElement(_Burger2.default, { isOpen: isBurgerOpen, changeOpen: changeBurger }));
        };
        exports.default = Menu;
    }),
    "./resources/app/js/components/Header/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _Logo = __webpack_require__("./resources/app/js/components/Header/Logo.tsx");
        var _Logo2 = _interopRequireDefault(_Logo);
        var _Menu = __webpack_require__("./resources/app/js/components/Header/Menu/index.tsx");
        var _Menu2 = _interopRequireDefault(_Menu);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Header = function Header() {
            return React.createElement('header', { className: 'header' }, React.createElement('div', { className: 'container' }, React.createElement(_Logo2.default, null), React.createElement(_Menu2.default, null)));
        };
        exports.default = Header;
    }),
    "./resources/app/js/components/HomePage/Goods/GoodsForm.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var GoodsForm = function GoodsForm() {
            return React.createElement("div", { className: "goods__form" }, React.createElement("div", { className: "goods__form-head" }, "Product Categories"), React.createElement("div", { className: "goods__categories" }, React.createElement("ul", { className: "goods__categories-list" }, React.createElement("li", { className: "goods__categories-item" }, React.createElement("div", { className: "checkbox" }, React.createElement("label", { className: "checkbox__label" }, React.createElement("input", { className: "checkbox__elem", type: "checkbox", name: "create" }), React.createElement("span", null, "T-Shirt test")))), React.createElement("li", { className: "goods__categories-item" }, React.createElement("div", { className: "checkbox" }, React.createElement("label", { className: "checkbox__label" }, React.createElement("input", { className: "checkbox__elem", type: "checkbox", name: "create" }), React.createElement("span", null, "T-Shirt test")))), React.createElement("li", { className: "goods__categories-item" }, React.createElement("div", { className: "checkbox" }, React.createElement("label", { className: "checkbox__label" }, React.createElement("input", { className: "checkbox__elem", type: "checkbox", name: "create" }), React.createElement("span", null, "T-Shirt test")))))), React.createElement("div", { className: "goods__form-head" }, "Filter by color"), React.createElement("div", { className: "goods__color" }, React.createElement("div", { className: "goods__color-item goods__color-item_red" }), React.createElement("div", { className: "goods__color-item goods__color-item_green" }), React.createElement("div", { className: "goods__color-item goods__color-item_blue" }), React.createElement("div", { className: "goods__color-item goods__color-item_purple goods__color-item_active" }), React.createElement("div", { className: "goods__color-item goods__color-item_yellow" }), React.createElement("div", { className: "goods__color-item goods__color-item_black" })), React.createElement("div", { className: "goods__form-head" }, "Filter by size"), React.createElement("ul", { className: "goods__size" }, React.createElement("li", { className: "goods__size-item" }, "XS"), React.createElement("li", { className: "goods__size-item goods__size-item_active" }, "S"), React.createElement("li", { className: "goods__size-item" }, "M"), React.createElement("li", { className: "goods__size-item" }, "L"), React.createElement("li", { className: "goods__size-item" }, "XL")), React.createElement("div", { className: "goods__form-head" }, "Filter by price"), React.createElement("div", { className: "goods__price" }, React.createElement("div", { className: "goods__price-point left" }), React.createElement("div", { className: "goods__price-indicator" }), React.createElement("div", { className: "goods__price-point right" })), React.createElement("div", { className: "goods__price-range" }, "Price: $5 - $100"), React.createElement("button", { className: "goods__form-button" }, "Filter"));
        };
        exports.default = GoodsForm;
    }),
    "./resources/app/js/components/HomePage/Goods/GoodsList/GoodItem.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        var _IProduct = __webpack_require__("./resources/app/js/Interfaces/IProduct.ts");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var GoodItem = function GoodItem(props) {
            return React.createElement('div', { className: 'goods__list-product' }, React.createElement(_reactRouterDom.Link, { to: '/products/' + props.product.slug, className: 'w-100' }, React.createElement('img', {
                className: 'goods__list-photo w-100',
                src: props.product.photo,
                alt: 'Product photo'
            })), React.createElement('div', { className: 'goods__list-info' }, React.createElement('div', { className: 'goods__list-name' }, props.product.name), React.createElement('div', { className: 'goods__list-price' }, props.product.price)));
        };
        exports.default = GoodItem;
    }),
    "./resources/app/js/components/HomePage/Goods/GoodsList/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _IProduct = __webpack_require__("./resources/app/js/Interfaces/IProduct.ts");
        var _GoodItem = __webpack_require__("./resources/app/js/components/HomePage/Goods/GoodsList/GoodItem.tsx");
        var _GoodItem2 = _interopRequireDefault(_GoodItem);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var GoodsList = function (_React$Component) {
            _inherits(GoodsList, _React$Component);
            function GoodsList(props) {
                _classCallCheck(this, GoodsList);
                var _this = _possibleConstructorReturn(this, (GoodsList.__proto__ || Object.getPrototypeOf(GoodsList)).call(this, props));
                _this.state = {
                    products: [],
                    loaded: 0,
                    total: 0,
                    isLoading: false
                };
                return _this;
            }
            _createClass(GoodsList, [{
                    key: 'render',
                    value: function render() {
                        if (this.state.isLoading) {
                            return React.createElement('div', { className: 'goods__items' }, React.createElement('div', null, 'Loading products...'));
                        }
                        if (!this.state.isLoading && !this.state.loaded) {
                            return React.createElement('div', { className: 'goods__items' }, React.createElement('div', null, 'No products that accept this filter'));
                        }
                        return React.createElement('div', { className: 'goods__items' }, React.createElement('div', { className: 'goods__head' }, React.createElement('div', { className: 'goods__head-count' }, 'Showing ', this.state.loaded, ' of ', this.state.total, ' products'), React.createElement('div', { className: 'select cur' }, React.createElement('select', { className: 'select__input cur' }, React.createElement('option', null, 'Featured products'), React.createElement('option', null, 'All')), React.createElement('i', { className: 'fas fa-chevron-down select__icon' }), React.createElement('div', { className: 'select__line' }))), React.createElement('div', { className: 'goods__list' }, this.state.products.map(function (item) {
                            return React.createElement(_GoodItem2.default, { product: item, key: item.id });
                        })), this.state.total == this.state.loaded ? false : React.createElement('div', { className: 'goods__list-load' }, React.createElement('button', { type: 'button', className: 'goods__list-more' }, 'Load More')));
                    }
                }]);
            return GoodsList;
        }(React.Component);
        exports.default = GoodsList;
    }),
    "./resources/app/js/components/HomePage/Goods/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _GoodsList = __webpack_require__("./resources/app/js/components/HomePage/Goods/GoodsList/index.tsx");
        var _GoodsList2 = _interopRequireDefault(_GoodsList);
        var _GoodsForm = __webpack_require__("./resources/app/js/components/HomePage/Goods/GoodsForm.tsx");
        var _GoodsForm2 = _interopRequireDefault(_GoodsForm);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Goods = function Goods() {
            return React.createElement('div', { className: 'goods' }, React.createElement('div', { className: 'container' }, React.createElement(_GoodsList2.default, null), React.createElement(_GoodsForm2.default, null)));
        };
        exports.default = Goods;
    }),
    "./resources/app/js/components/HomePage/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _Paginate = __webpack_require__("./resources/app/js/components/Paginate.tsx");
        var _Paginate2 = _interopRequireDefault(_Paginate);
        var _Goods = __webpack_require__("./resources/app/js/components/HomePage/Goods/index.tsx");
        var _Goods2 = _interopRequireDefault(_Goods);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var HomePage = function HomePage() {
            React.useEffect(function () {
                document.title = 'Home | Products';
            }, []);
            return React.createElement(React.Fragment, null, React.createElement(_Paginate2.default, { paths: [{ name: 'Home', path: '/' }] }), React.createElement(_Goods2.default, null));
        };
        exports.default = HomePage;
    }),
    "./resources/app/js/components/LoginPage/LoginForm.tsx": (function (module, exports) {
        throw new Error("Module build failed (from ./node_modules/babel-loader/lib/index.js):\nSyntaxError: C:/Users/Lenovo/Desktop/Mag/src/resources/app/js/components/LoginPage/LoginForm.tsx: Unexpected token, expected ; (32:14)\n\n\u001b[0m \u001b[90m 30 | \u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 31 | \u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 32 | \u001b[39mtype \u001b[33mA\u001b[39m\u001b[33m<\u001b[39m\u001b[33mT\u001b[39m\u001b[33m>\u001b[39m \u001b[33m=\u001b[39m \u001b[33mT\u001b[39m \u001b[36mextends\u001b[39m string \u001b[33m?\u001b[39m string \u001b[33m:\u001b[39m any\u001b[33m;\u001b[39m\n \u001b[90m    | \u001b[39m              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 33 | \u001b[39m\n \u001b[90m 34 | \u001b[39m\u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m reduxForm\u001b[33m<\u001b[39m\u001b[33mILoginFormData\u001b[39m\u001b[33m>\u001b[39m({\n \u001b[90m 35 | \u001b[39m\tform\u001b[33m:\u001b[39m \u001b[32m'login'\u001b[39m\u001b[0m\n");
    }),
    "./resources/app/js/components/LoginPage/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _Paginate = __webpack_require__("./resources/app/js/components/Paginate.tsx");
        var _Paginate2 = _interopRequireDefault(_Paginate);
        var _LoginForm = __webpack_require__("./resources/app/js/components/LoginPage/LoginForm.tsx");
        var _LoginForm2 = _interopRequireDefault(_LoginForm);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var LoginPage = function LoginPage() {
            var submit = function submit(values) {
                console.log(values);
            };
            React.useEffect(function () {
                document.title = 'Login';
            }, []);
            return React.createElement(React.Fragment, null, React.createElement(_Paginate2.default, { paths: [{ name: 'Home', path: '/' }, { name: 'Login', path: '/login' }] }), React.createElement(_LoginForm2.default, { onSubmit: submit }));
        };
        exports.default = LoginPage;
    }),
    "./resources/app/js/components/Newsletter.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/index.js");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Newsletter = function Newsletter(props) {
            return React.createElement('div', { className: 'subscribe' }, React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'subscribe__wrap' }, React.createElement('div', { className: 'subscribe__content' }, React.createElement('div', { className: 'subscribe__head' }, 'Newsletter'), React.createElement('div', { className: 'subscribe__desc' }, 'Get timely updates from your favorite products'), React.createElement('form', { className: 'subscribe__form', onSubmit: props.handleSubmit }, React.createElement('div', { className: 'subscribe__form-wrap' }, React.createElement('i', { className: 'fas fa-envelope subscribe__icon' }), React.createElement(_reduxForm.Field, {
                component: 'input',
                name: 'email',
                className: 'subscribe__email',
                placeholder: 'Enter your email'
            })), React.createElement('button', { type: 'submit', className: 'subscribe__but' }, React.createElement('i', { className: 'fas fa-paper-plane' })))))));
        };
        exports.default = (0, _reduxForm.reduxForm)({
            form: 'newsletter'
        })(Newsletter);
    }),
    "./resources/app/js/components/NotFoundPage/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _Paginate = __webpack_require__("./resources/app/js/components/Paginate.tsx");
        var _Paginate2 = _interopRequireDefault(_Paginate);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var NotFoundPage = function NotFoundPage() {
            React.useEffect(function () {
                document.title = '404 | Not found';
            }, []);
            return React.createElement(React.Fragment, null, React.createElement(_Paginate2.default, { paths: [{ name: 'Home', path: '/' }, { name: 'Not found', path: '/404' }] }), React.createElement('div', { className: 'error' }, React.createElement('img', { className: 'error__img', src: '/image/not-found.png', alt: 'Not found' })));
        };
        exports.default = NotFoundPage;
    }),
    "./resources/app/js/components/Paginate.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/esm/react-router-dom.js");
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var Paginate = function Paginate(props) {
            return React.createElement('div', { className: 'paginate' }, React.createElement('div', { className: 'container' }, React.createElement('div', { className: 'paginate__content' }, React.createElement('div', { className: 'paginate__name' }, 'SHOP SIDEBAR'), React.createElement('div', { className: 'paginate__path' }, props.paths.map(function (item) {
                return React.createElement(_reactRouterDom.Link, { to: item.path, key: item.path, className: 'paginate__item' }, item.name);
            })))));
        };
        exports.default = Paginate;
    }),
    "./resources/app/js/components/RegisterPage/RegisterForm.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/index.js");
        var _InputElement = __webpack_require__("./resources/app/js/components/FormElements/InputElement.tsx");
        var _InputElement2 = _interopRequireDefault(_InputElement);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var RegisterForm = function RegisterForm(props) {
            return React.createElement('div', { className: 'container' }, React.createElement('form', { onSubmit: props.handleSubmit, className: 'login my-pad' }, React.createElement('div', { className: 'login__head' }, 'Sign in'), React.createElement(_reduxForm.Field, { component: _InputElement2.default, type: 'text', name: 'firstName',
                placeholder: 'First name', required: true }), React.createElement(_reduxForm.Field, { component: _InputElement2.default, type: 'text', name: 'lastName',
                placeholder: 'Last name', required: true }), React.createElement(_reduxForm.Field, { component: _InputElement2.default, type: 'text', name: 'email',
                placeholder: 'Email', required: true }), React.createElement(_reduxForm.Field, { component: _InputElement2.default, type: 'password', name: 'password',
                placeholder: 'Password', required: true }), React.createElement(_reduxForm.Field, { component: _InputElement2.default, type: 'password', name: 'confirmPassword',
                placeholder: 'Confirm password', required: true }), React.createElement('div', { className: 'row space-between my-pad w-100' }, React.createElement('div', null), React.createElement('button', { type: 'submit', className: 'check__but' }, 'Sign in'))));
        };
        exports.default = _reduxForm.reduxForm < IRegisterFormData > {
            form: 'register'
        }(RegisterForm);
    }),
    "./resources/app/js/components/RegisterPage/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _Paginate = __webpack_require__("./resources/app/js/components/Paginate.tsx");
        var _Paginate2 = _interopRequireDefault(_Paginate);
        var _RegisterForm = __webpack_require__("./resources/app/js/components/RegisterPage/RegisterForm.tsx");
        var _RegisterForm2 = _interopRequireDefault(_RegisterForm);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var RegisterPage = function RegisterPage() {
            var submit = function submit(values) {
                console.log(values);
            };
            React.useEffect(function () {
                document.title = 'Sign in';
            }, []);
            return React.createElement(React.Fragment, null, React.createElement(_Paginate2.default, { paths: [{ name: 'Home', path: '/' }, { name: 'Register', path: '/register' }] }), React.createElement(_RegisterForm2.default, { onSubmit: submit }));
        };
        exports.default = RegisterPage;
    }),
    "./resources/app/js/components/ResetPage/ResetForm.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/index.js");
        var _InputElement = __webpack_require__("./resources/app/js/components/FormElements/InputElement.tsx");
        var _InputElement2 = _interopRequireDefault(_InputElement);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var ResetForm = function ResetForm(props) {
            return React.createElement('form', { className: 'reset', onSubmit: props.handleSubmit }, React.createElement('div', { className: 'container my-pad' }, React.createElement('div', { className: 'login__head' }, 'Reset password'), React.createElement(_reduxForm.Field, { component: _InputElement2.default, type: 'email', name: 'email',
                placeholder: 'Email', required: true }), React.createElement('div', { className: 'row space-between my-pad w-100' }, React.createElement('div', null), React.createElement('button', { type: 'submit', className: 'check__but' }, 'Reset'))));
        };
        exports.default = _reduxForm.reduxForm < IResetFormData > {
            form: 'reset'
        }(ResetForm);
    }),
    "./resources/app/js/components/ResetPage/index.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _Paginate = __webpack_require__("./resources/app/js/components/Paginate.tsx");
        var _Paginate2 = _interopRequireDefault(_Paginate);
        var _ResetForm = __webpack_require__("./resources/app/js/components/ResetPage/ResetForm.tsx");
        var _ResetForm2 = _interopRequireDefault(_ResetForm);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var ResetPage = function ResetPage() {
            React.useEffect(function () {
                document.title = 'Reset password';
            }, []);
            var onSubmit = function onSubmit(vals) {
                console.log(vals);
            };
            return React.createElement(React.Fragment, null, React.createElement(_Paginate2.default, { paths: [{ name: 'Home', path: '/' }, { name: 'Reset password', path: '/reset' }] }), React.createElement(_ResetForm2.default, { onSubmit: onSubmit }));
        };
        exports.default = ResetPage;
    }),
    "./resources/app/js/main.tsx": (function (module, exports, __webpack_require__) {
        "use strict";
        var _react = __webpack_require__("./node_modules/react/index.js");
        var React = _interopRequireWildcard(_react);
        var _reactDom = __webpack_require__("./node_modules/react-dom/index.js");
        var ReactDOM = _interopRequireWildcard(_reactDom);
        var _redux = __webpack_require__("./node_modules/redux/es/redux.js");
        var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");
        var _App = __webpack_require__("./resources/app/js/components/App.tsx");
        var _App2 = _interopRequireDefault(_App);
        var _Reducers = __webpack_require__("./resources/app/js/redux/Reducers/index.ts");
        var _Reducers2 = _interopRequireDefault(_Reducers);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var store = (0, _redux.createStore)(_Reducers2.default);
        ReactDOM.render(React.createElement(_reactRedux.Provider, { store: store }, React.createElement(_App2.default, null)), document.querySelector('#root'));
    }),
    "./resources/app/js/redux/Actions/cartActions.ts": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.cartReset = exports.cartRemove = exports.cartAdd = undefined;
        var _IProduct = __webpack_require__("./resources/app/js/Interfaces/IProduct.ts");
        var _actionTypes = __webpack_require__("./resources/app/js/redux/actionTypes.ts");
        var cartAdd = exports.cartAdd = function cartAdd(product) {
            return {
                type: _actionTypes.CART_ADD,
                payload: product
            };
        };
        var cartRemove = exports.cartRemove = function cartRemove(id) {
            return {
                type: _actionTypes.CART_REMOVE,
                payload: id
            };
        };
        var cartReset = exports.cartReset = function cartReset() {
            return {
                type: _actionTypes.CART_RESET
            };
        };
    }),
    "./resources/app/js/redux/Actions/categoryActions.ts": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.categoryLoadFailure = exports.categoryLoadSuccess = exports.categoryLoadStart = undefined;
        var _ICategory = __webpack_require__("./resources/app/js/Interfaces/ICategory.ts");
        var _actionTypes = __webpack_require__("./resources/app/js/redux/actionTypes.ts");
        var categoryLoadStart = exports.categoryLoadStart = function categoryLoadStart() {
            return {
                type: _actionTypes.CATEGORY_LOAD_START
            };
        };
        var categoryLoadSuccess = exports.categoryLoadSuccess = function categoryLoadSuccess(payload) {
            return {
                type: _actionTypes.CATEGORY_LOAD_SUCCESS,
                payload: payload
            };
        };
        var categoryLoadFailure = exports.categoryLoadFailure = function categoryLoadFailure(error) {
            return {
                type: _actionTypes.CATEGORY_LOAD_ERROR,
                error: error
            };
        };
    }),
    "./resources/app/js/redux/Reducers/cart.ts": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _ICartItem = __webpack_require__("./resources/app/js/Interfaces/ICartItem.ts");
        var _cartActions = __webpack_require__("./resources/app/js/redux/Actions/cartActions.ts");
        var actionCreators = _interopRequireWildcard(_cartActions);
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var initialState = [];
        var cartReducer = function cartReducer() {
            var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            var action = arguments[1];
            console.log(2);
            return state;
        };
        exports.default = cartReducer;
    }),
    "./resources/app/js/redux/Reducers/category.ts": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _ICategory = __webpack_require__("./resources/app/js/Interfaces/ICategory.ts");
        var _categoryActions = __webpack_require__("./resources/app/js/redux/Actions/categoryActions.ts");
        var actionCreators = _interopRequireWildcard(_categoryActions);
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key))
                            newObj[key] = obj[key];
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        var initialState = {
            isLoading: false,
            error: null,
            categories: []
        };
        var categoryReducer = function categoryReducer() {
            var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
            var action = arguments[1];
            console.log(1);
            return state;
        };
        exports.default = categoryReducer;
    }),
    "./resources/app/js/redux/Reducers/index.ts": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _redux = __webpack_require__("./node_modules/redux/es/redux.js");
        var _reduxForm = __webpack_require__("./node_modules/redux-form/es/index.js");
        var _cart = __webpack_require__("./resources/app/js/redux/Reducers/cart.ts");
        var _cart2 = _interopRequireDefault(_cart);
        var _category = __webpack_require__("./resources/app/js/redux/Reducers/category.ts");
        var _category2 = _interopRequireDefault(_category);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        var storeReducer = (0, _redux.combineReducers)({
            cart: _cart2.default,
            category: _category2.default,
            form: _reduxForm.reducer
        });
        exports.default = storeReducer;
    }),
    "./resources/app/js/redux/actionTypes.ts": (function (module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var CATEGORY_LOAD_START = exports.CATEGORY_LOAD_START = 'CATEGORY_LOAD_START';
        var CATEGORY_LOAD_SUCCESS = exports.CATEGORY_LOAD_SUCCESS = 'CATEGORY_LOAD_SUCCESS';
        var CATEGORY_LOAD_ERROR = exports.CATEGORY_LOAD_ERROR = 'CATEGORY_LOAD_ERROR';
        var CART_ADD = exports.CART_ADD = 'CART_ADD';
        var CART_REMOVE = exports.CART_REMOVE = 'CART_REMOVE';
        var CART_RESET = exports.CART_RESET = 'CART_RESET';
        var CART_UPDATE = exports.CART_UPDATE = 'CART_UPDATE';
    })
});
export default _default;
//# sourceMappingURL=bundle.js.map