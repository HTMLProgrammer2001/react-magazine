{"version":3,"sources":["redux/ThunkActions/thunkRegister.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAAmD;AAKnD,8DAAyF;AACzF,yCAAoC;AAKpC,IAAM,aAAa,GAAG,UAAC,IAAuB,EAAE,QAAgB;IAC/D,OAAA,UAAO,QAAgD;;;;;oBACtD,QAAQ,CAAC,+BAAa,EAAE,CAAC,CAAC;oBAEN,WAAM,aAAG,CAAC,YAAY,CAAC,IAAI,CAAC,EAAA;;oBAA1C,WAAW,GAAG,SAA4B;oBAEhD,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;oBAEzB,IAAG,aAAG,CAAC,OAAO,CAAC,WAAW,CAAC,EAAC;wBAC3B,IAAG,WAAW,CAAC,QAAS,CAAC,IAAI,CAAC,MAAM,EAAC;4BACpC,QAAQ,CAAC,6BAAgB,CACxB,QAAQ,EACR,WAAW,CAAC,QAAS,CAAC,IAAI,CAAC,MAAM,EACjC,WAAW,CAAC,QAAS,CAAC,IAAI,CAAC,OAAO,CAClC,CAAC,CAAC;yBACH;6BACG;4BACH,QAAQ,CAAC,+BAAa,CAAC,WAAW,CAAC,QAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;yBAC5D;qBACD;yBACG;wBACH,QAAQ,CAAC,kBAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC1B,QAAQ,CAAC,iCAAe,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;qBAC/C;;;;SACD;AAvBD,CAuBC,CAAC;AAEH,kBAAe,aAAa,CAAC","file":"thunkRegister.js","sourcesContent":["import {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {updateSyncErrors, reset} from 'redux-form';\r\n\r\nimport {IRegisterFormData} from '../../components/RegisterPage/RegisterForm';\r\nimport {RootState} from '../Reducers';\r\nimport {RegisterActions} from '../Reducers/register';\r\nimport {registerError, registerStart, registerSuccess} from '../Actions/registerActions';\r\nimport API from '../../Helpers/API';\r\n\r\n\r\nexport type RegisterThunkAction = ThunkAction<void, RootState, unknown, RegisterActions>;\r\n\r\nconst thunkRegister = (vals: IRegisterFormData, formName: string): RegisterThunkAction =>\r\n\tasync (dispatch: ThunkDispatch<{}, {}, RegisterActions>) => {\r\n\t\tdispatch(registerStart());\r\n\r\n\t\tconst regResponse = await API.registerUser(vals);\r\n\r\n\t\tconsole.log(regResponse);\r\n\r\n\t\tif(API.isError(regResponse)){\r\n\t\t\tif(regResponse.response!.data.errors){\r\n\t\t\t\tdispatch(updateSyncErrors(\r\n\t\t\t\t\tformName,\r\n\t\t\t\t\tregResponse.response!.data.errors,\r\n\t\t\t\t\tregResponse.response!.data.message\r\n\t\t\t\t));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdispatch(registerError(regResponse.response!.data.message));\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tdispatch(reset(formName));\r\n\t\t\tdispatch(registerSuccess(regResponse.message));\r\n\t\t}\r\n\t};\r\n\r\nexport default thunkRegister;\r\n"]}