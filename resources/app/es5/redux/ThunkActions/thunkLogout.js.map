{"version":3,"sources":["redux/ThunkActions/thunkLogout.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,sDAAiD;AACjD,yCAAoC;AAKpC,IAAM,WAAW,GAAG;IACnB,OAAA,UAAO,QAA6D;;;;wBAC5C,WAAM,aAAG,CAAC,UAAU,EAAE,EAAA;;oBAAvC,cAAc,GAAG,SAAsB;oBAE7C,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;oBAE5B,IAAG,aAAG,CAAC,OAAO,CAAC,cAAc,CAAC,EAAC;wBAC9B,IAAG,cAAc,CAAC,QAAS,CAAC,IAAI,CAAC,MAAM,EAAC;yBACvC;6BACG;yBAEH;qBACD;yBACG;wBACH,QAAQ,CAAC,uBAAS,EAAE,CAAC,CAAC;qBACtB;;;;SACD;AAfD,CAeC,CAAC;AAEH,kBAAe,WAAW,CAAC","file":"thunkLogout.js","sourcesContent":["import {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\n\r\nimport {RootState} from '../Reducers';\r\nimport {resetUser} from '../Actions/userActions';\r\nimport API from '../../Helpers/API';\r\n\r\n\r\nexport type LogoutThunkAction =ThunkAction<void, RootState, unknown, ReturnType<typeof resetUser>>;\r\n\r\nconst thunkLogout = (): LogoutThunkAction =>\r\n\tasync (dispatch: ThunkDispatch<{}, {}, ReturnType<typeof resetUser>>) => {\r\n\t\tconst logoutResponse = await API.logoutUser();\r\n\r\n\t\tconsole.log(logoutResponse);\r\n\r\n\t\tif(API.isError(logoutResponse)){\r\n\t\t\tif(logoutResponse.response!.data.errors){\r\n\t\t\t}\r\n\t\t\telse{\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tdispatch(resetUser());\r\n\t\t}\r\n\t};\r\n\r\nexport default thunkLogout;\r\n"]}